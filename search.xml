<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【C语言笔记】联合体</title>
      <link href="/2019/08/01/c-yu-yan-bi-ji-lian-he-ti/"/>
      <url>/2019/08/01/c-yu-yan-bi-ji-lian-he-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是联合体？"><a href="#一、什么是联合体？" class="headerlink" title="一、什么是联合体？"></a>一、什么是联合体？</h1><p>在C语言中，变量的定义是分配存储空间的过程。一般的，每个变量都具有其独有的存储空间，那么可不可以在同一个内存空间中存储不同的数据类型（不是同事存储）呢？</p><p>答案是可以的，使用<code>联合体</code>就可以达到这样的目的。<code>联合体也叫共用体</code>，在C语言中定义联合体的关键字是<code>union</code>。</p><p>定义一个联合类型的一般形式为：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">union</span> 联合名<span class="token punctuation">{</span>成员表<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>成员表中含有若干成员，成员的一般形式为： <code>类型说明符 成员名</code>。其占用的字节数与成员中最大数据类型占用的字节数。</p><p>与<code>结构体（struct）</code>、<code>枚举（enum）</code>一样，联合体也是一种构造类型：</p><p>[<img src="https://s2.ax1x.com/2019/06/17/VHCDJg.md.png" alt="VHCDJg.md.png"></p><p>关于结构体与枚举的知识可查看往期笔记：</p><p><a href="https://zhengnianli.github.io/2019/01/22/c-yu-yan-bi-ji-jie-gou-ti/">【C语言笔记】结构体</a></p><p><a href="https://zhengnianli.github.io/2019/01/15/c-yu-yan-bi-ji-mei-ju/">【C语言笔记】枚举</a></p><h1 id="二、联合体变量的定义方法"><a href="#二、联合体变量的定义方法" class="headerlink" title="二、联合体变量的定义方法"></a>二、联合体变量的定义方法</h1><p>创建联合和创建结构的方式相同，需要一个联合模板和联合变量。下面是几种定义联合体变量的方法：</p><h2 id="方法一：先创建模板，再定义变量"><a href="#方法一：先创建模板，再定义变量" class="headerlink" title="方法一：先创建模板，再定义变量"></a>方法一：先创建模板，再定义变量</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 创建联合体模板union perdata</span><span class="token keyword">union</span> perdata<span class="token punctuation">{</span>    <span class="token keyword">int</span> Class<span class="token punctuation">;</span>    <span class="token keyword">char</span> Office<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用该联合体模板创建两个变量a, b</span><span class="token keyword">union</span> perdata a<span class="token punctuation">,</span>b<span class="token punctuation">;</span></code></pre><p>此处，<code>perdata</code>是联合体名，该名字是由我们任意定的，但是尽量起个有意义的名称。其相当于一个模板，可以使用这个模板去定义变量<code>a、b</code>。定义的时候不要忘了<code>union</code>。</p><h2 id="方法二：同时创建模板和变量"><a href="#方法二：同时创建模板和变量" class="headerlink" title="方法二：同时创建模板和变量"></a>方法二：同时创建模板和变量</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 创建联合体模板union perdata的同时定义两个变量a、b</span><span class="token keyword">union</span> perdata<span class="token punctuation">{</span>    <span class="token keyword">int</span> Class<span class="token punctuation">;</span>    <span class="token keyword">char</span> Office<span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span></code></pre><p>这与方法一差不多。</p><h2 id="方法三：省略联合体名"><a href="#方法三：省略联合体名" class="headerlink" title="方法三：省略联合体名"></a>方法三：省略联合体名</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">union</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> Class<span class="token punctuation">;</span>    <span class="token keyword">char</span> Office<span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span></code></pre><p>相对于方法一与方法二，此处省略了联合体名。虽然更简洁了，但是因为没有了名字，后面就不能用该联合体定义新的变量。</p><h2 id="方法四：使用typedef"><a href="#方法四：使用typedef" class="headerlink" title="方法四：使用typedef"></a>方法四：使用typedef</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 联合体模板union perdata重新命名为perdata_U</span><span class="token keyword">typedef</span> <span class="token keyword">union</span> perdata<span class="token punctuation">{</span>    <span class="token keyword">int</span> Class<span class="token punctuation">;</span>    <span class="token keyword">char</span> Office<span class="token punctuation">;</span><span class="token punctuation">}</span>perdata_U<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用新名字perdata_U创建两个变量a, b</span>perdata_U a<span class="token punctuation">,</span>b<span class="token punctuation">;</span></code></pre><p>此处使用<code>typedef</code>为联合体模板<code>union perdata</code>定义一个别名<code>perdata_U</code>。关于<code>typedef</code>关键字可查看往期笔记：<a href="https://zhengnianli.github.io/2018/10/11/c-yu-yan-bi-ji-define-yu-typedef-de-qu-bie/">【C语言笔记】#define与typedef的区别？</a></p><h1 id="三、初始化联合体"><a href="#三、初始化联合体" class="headerlink" title="三、初始化联合体"></a>三、初始化联合体</h1><p>联合体的初始化与结构体不同，联合体只能存储一个值。联合体有三种初始化方法：</p><pre class=" language-c"><code class="language-c">perdata_U a<span class="token punctuation">;</span>a<span class="token punctuation">.</span>Class <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>perdata_U b <span class="token operator">=</span> a<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* 1、把一个联合初始化为另一个同类型的联合； */</span>perdata_U c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* 2、初始化联合的第一个成员； */</span>perdata_U d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span>Office <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 3、根据C99标准，使用指定初始化器。 */</span></code></pre><h1 id="四、联合体的应用示例"><a href="#四、联合体的应用示例" class="headerlink" title="四、联合体的应用示例"></a>四、联合体的应用示例</h1><h2 id="1、检测当前处理器是大端模式还是小端模式？"><a href="#1、检测当前处理器是大端模式还是小端模式？" class="headerlink" title="1、检测当前处理器是大端模式还是小端模式？"></a>1、检测当前处理器是大端模式还是小端模式？</h2><p>之前分享的<a href="https://mp.weixin.qq.com/s?__biz=MzU5MzcyMjI4MA==&tempkey=MTAyMF80ZTBiaE4yOFpEM3pmZ3gycWZKTVprMFJzZUNJam5DSm5TaTFSb1o2TDVPTVFaZHgzS0pyZ0FRX1hRZVJka1FsQmJCbGs2OXFlTVZTd21tSVdBMzBSX0VQTGFoTTBLVmhhWGJLNG4weTMtWUp3RzlNVUgtN2FBRnMwVTk0R0ZJM3Rfajh5YUNVQzRSNWZKLTFGcWhMUUsyUmJzbWJjUlVwTHcyQXd3fn4%3D&chksm=7e0d6857497ae1411a1a768f1b0bf99c5202212b2f3e16b97c8271bb3c832461fb64278a76b3#rd" target="_blank" rel="noopener">《什么是大小端模式？》</a>中已经有介绍怎么判断当前处理器的大小端问题：</p><p><img src="https://s2.ax1x.com/2019/08/02/ed0kgH.png" alt="ed0kgH.png"></p><p>现在，可以使用联合体来做判断：</p><p><img src="https://s2.ax1x.com/2019/08/02/ed0Avd.png" alt="ed0Avd.png"></p><h2 id="2、分离高低字节"><a href="#2、分离高低字节" class="headerlink" title="2、分离高低字节"></a>2、分离高低字节</h2><p>单片机中经常会遇见分离高低字节的操作，比如进行计时中断复位操作时往往会进行</p><blockquote><p>(65535-200)/256,</p><p>(65535-200)%256</p></blockquote><p>这样的操作，而一个除法消耗四个机器周期，取余也需要进行一系列复杂的运算，如果在短时间内需要进行很多次这样的运算无疑会给程序带来巨大的负担。其实进行这些操作的时候我们需要的仅仅是高低字节的数据分离而已，这样利用联合体我们很容易降低这部分开销。</p><p><strong>代码：</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">union</span> div<span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// n中存放要进行分离高低字节的数据</span>    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在keil c中一个整形占两个字节，char占一个字节，所以n与数组a占的字节数相同</span><span class="token punctuation">}</span>test<span class="token punctuation">;</span>test<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">65535</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 进行完这句后就一切ok了，下面通过访问test中数组a的数据来取出高低字节的数据</span>TH1 <span class="token operator">=</span> test<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// test.a[0]中存储的是高位数据</span>TL1 <span class="token operator">=</span> test<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// test.a[1]中储存了test.n的低位数据</span></code></pre><p>联合体内数据是按地址对齐的。具体是高位数据还是低位数据要看平台的大小端模式，<code>51</code>是大端，<code>stm32</code>默认是小端，如果其他编译器还请自测。仅仅用了一条减法指令就达到了除法、取余的操作，在进行高频率定时时尤为有用。</p><h2 id="3、寄存器封装"><a href="#3、寄存器封装" class="headerlink" title="3、寄存器封装"></a>3、寄存器封装</h2><p>看看<code>TI</code>固件库中寄存器是怎么封装的：</p><p><img src="https://s2.ax1x.com/2019/08/02/ed0ZDI.png" alt="ed0ZDI.png"></p><p><img src="https://s2.ax1x.com/2019/08/02/ed0VKA.png" alt="ed0VKA.png"></p><p>所有的寄存器被封装成联合体类型的，联合体里边的成员是一个<code>32bit</code>的整数及一个结构体，该结构体以位域的形式体现。这样就可以达到直接操控寄存器的某些位了。比如，我们要设置<code>PA0</code>引脚的<code>GPAQSEL1</code>寄存器的<code>[1:0]</code>两位都为1，则我们只操控两个<code>bit</code>就可以很方便的这么设置：</p><pre class=" language-c"><code class="language-c">GpioCtrlRegs<span class="token punctuation">.</span>GPAQSEL1<span class="token punctuation">.</span>bit<span class="token punctuation">.</span>GPIO0 <span class="token operator">=</span> <span class="token number">3</span></code></pre><p>或者直接操控整个寄存器：</p><pre class=" language-c"><code class="language-c">GpioCtrlRegs<span class="token punctuation">.</span>GPAQSEL1<span class="token punctuation">.</span>all <span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x03</span> </code></pre><p>以上就是关于联合体的一点总结笔记，如有错误欢迎指出！</p><p>资料：</p><p>1、《C Primer Plus》第6版</p><p>2、<a href="https://baike.baidu.com/item/%E8%81%94%E5%90%88%E4%BD%93/721541?fr=aladdin" target="_blank" rel="noopener">联合体</a></p><hr><p>我的个人博客：<a href="https://zhengnianli.github.io/">https://zhengnianli.github.io/</a></p><p>我的微信公众号：嵌入式大杂烩</p><p><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 联合体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【DSP笔记】TI官方例程中切换RAM、FLASH工程版本的方法</title>
      <link href="/2019/07/30/dsp-bi-ji-ti-guan-fang-li-cheng-zhong-qie-huan-ram-flash-gong-cheng-ban-ben-de-fang-fa/"/>
      <url>/2019/07/30/dsp-bi-ji-ti-guan-fang-li-cheng-zhong-qie-huan-ram-flash-gong-cheng-ban-ben-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p><img src="https://s2.ax1x.com/2019/07/30/e8OBqO.png" alt="e8OBqO.png"></p><p>我们用<code>Visual Studio</code>来开发程序时，可以选择编译<code>Debug</code>版本，也可以选择编译<code>Release</code>版本。Debug版本为调试版本，Release版本为对外发布版本。</p><p>同样，在我们嵌入式软件中，也有类似这样子的做法。在嵌入式中，我们可以编译输出<code>RAM版本</code>的可执行文件用于在线调试，也可以编译输出<code>FLASH版本</code>的可执行文件固化到<code>FLASH</code>中。</p><h1 id="二、TI的DSP官方例程中RAM版本与FLASH版本怎么切换"><a href="#二、TI的DSP官方例程中RAM版本与FLASH版本怎么切换" class="headerlink" title="二、TI的DSP官方例程中RAM版本与FLASH版本怎么切换"></a>二、TI的DSP官方例程中RAM版本与FLASH版本怎么切换</h1><h2 id="1、切换方法"><a href="#1、切换方法" class="headerlink" title="1、切换方法"></a>1、切换方法</h2><p>首先，看一下<code>TI</code>的<code>DSP</code>例程工程，其工程默认是编译<code>RAM版本</code>的：</p><p><img src="https://s2.ax1x.com/2019/07/30/e8O0sK.png" alt="e8O0sK.png"></p><p>那么，怎么修改使其编译生成<code>FLASH版本</code>的可执行文件呢？我们可以看到系统控制初始化函数里的代码如下：</p><p><img src="https://s2.ax1x.com/2019/07/30/e8OrZD.png" alt="e8OrZD.png"></p><p>显然，根据我们的C语言知识，只要我们定义宏<code>_FLASH</code>就可以切换为<code>FLASH</code>版本了。那么，我们需要手动添加这一句宏代码吗。其实是不用的，我们可以在工程属性<code>Properties</code>里头添加：</p><p><img src="https://s2.ax1x.com/2019/07/30/e8Osde.png" alt="e8Osde.png"></p><p>在<code>Predefined Symbols</code>里添加<code>_FLASH</code>宏：</p><p><img src="https://s2.ax1x.com/2019/07/30/e8OyIH.png" alt="e8OyIH.png"></p><p>然后，再修改<code>Configuration</code>为<code>CPU1_FLASH</code>：</p><p><img src="https://s2.ax1x.com/2019/07/30/e8Ocid.png" alt="e8Ocid.png"></p><p>可以看到，工程目录下多了一个<code>CPU1_FLASH</code>文件夹：</p><p><img src="https://s2.ax1x.com/2019/07/30/e8O2RI.png" alt="e8O2RI.png"></p><p>编译之后生成的就是<code>FLASH版本</code>的<code>.out</code>后缀的可执行文件。如果我们想再切换为<code>RAM版本</code>,则只需把<code>_FLASH</code> 宏给删掉，再把<code>Configuration</code>改为<code>CPU1_RAM</code>即可，重新编译就可以生成<code>RAM版本</code>的<code>.out</code>文件。</p><p>我们在工程属性里定义的预定义宏的作用范围是整个工程都有效的。这在我们在使用<code>keil MDK</code>做<code>STM32</code>开发时也是有类似操作的，如：</p><p><img src="https://s2.ax1x.com/2019/07/30/e8OgJA.png" alt="e8OgJA.png"></p><p>同样的，<code>keil MDK</code>也是可以设置多个<code>target</code>的，如：</p><p><img src="https://s2.ax1x.com/2019/07/30/e8ORzt.png" alt="e8ORzt.png"></p><h2 id="2、为什么存在RAM模式和FLASH模式呢？"><a href="#2、为什么存在RAM模式和FLASH模式呢？" class="headerlink" title="2、为什么存在RAM模式和FLASH模式呢？"></a>2、为什么存在RAM模式和FLASH模式呢？</h2><p>在开发调试阶段为了节省程序装载时间和延长<code>Flash</code>寿命，可以将代码空间定位到CPU内部<code>RAM</code>中进行调试，等到调试完毕，确定代码编写得没问题之后，就可以切换至<code>FLASH模式</code>进行编译，输出最终的可执行文件。这就是一个工程同时包含<code>RAM</code>版本与<code>FLASH</code>版本的意义。</p><p>除此之外，<code>RAM</code>是易失性存储器，即掉电数据会丢失；<code>FLASH</code>是非易失性存储器，即掉电之后数据还是存在的。所以，我们最终的程序都是要下载到<code>FLASH</code>中的，并且烧写到<code>FLASH</code>中的可执行文件（带调试信息）也是可以进行在线调试的。可以没有<code>RAM</code>版本代码，但不可没有<code>FLASH</code>版本的代码。</p><h1 id="三、科普：常见存储器种类"><a href="#三、科普：常见存储器种类" class="headerlink" title="三、科普：常见存储器种类"></a>三、科普：常见存储器种类</h1><p>下面，我们一起来归纳学习一下常见的存储器种类。以下内容摘抄于野火<code>《零死角玩转STM32-F429挑战者V2.pdf》</code>。</p><p>存储器是计算机结构的重要组成部分。存储器是用来存储程序代码和数据的部件，有了存储器计算机才具有记忆功能。基本的存储器种类如：</p><p><img src="https://s2.ax1x.com/2019/07/30/e8O4L8.png" alt="e8O4L8.png"></p><p>存储器按其存储介质特性主要分为<code>易失性存储器</code>和<code>非易失性存储器两</code>大类。其中的<code>易失/非易失</code>是指存储器断电后，它存储的数据内容是否会丢失的特性。由于一般易失性存储器存取速度快，而非易失性存储器可长期保存数据，它们都在计算机中占据着重要角色。在计算机中易失性存储器最典型的代表是内存，非易失性存储器的代表则是硬盘 。</p><h2 id="1、RAM-存储器（易失性存储器）"><a href="#1、RAM-存储器（易失性存储器）" class="headerlink" title="1、RAM 存储器（易失性存储器）"></a>1、RAM 存储器（易失性存储器）</h2><p><code>RAM</code> 是<code>Random Access Memory</code>的缩写，被译为随机存储器。 所谓随机存取，指的是当存储器中的消息被读取或写入时，所需要的时间与这段信息所在的位置无关。 现在 <code>RAM</code> 已经专门用于指代作为计算机内存的易失性半导体存储器。 </p><p>根据 RAM 的存储机制，又分为<code>动态随机存储器 DRAM(Dynamic RAM)</code>以及<code>静态随机存储器 SRAM(Static RAM)</code>两种。 </p><h3 id="（1）DRAM"><a href="#（1）DRAM" class="headerlink" title="（1）DRAM"></a>（1）DRAM</h3><p>动态随机存储器 DRAM 的存储单元以电容的电荷来表示数据，有电荷代表 <code>1</code>，无电荷代表 <code>0</code> 。如：</p><p><img src="https://s2.ax1x.com/2019/07/30/e8OfQP.png" alt="e8OfQP.png"></p><p>但时间一长，代表 <code>1</code> 的电容会放电，代表 <code>0</code> 的电容会吸收电荷，因此它需要定期刷新操作，这就是<code>动态(Dynamic)</code>一词所形容的特性。刷新操作会对电容进行检查，若电量大于满电量的 <code>1/2</code>，则认为其代表 <code>1</code>，并把电容充满电； 若电量小于 <code>1/2</code>，则认为其代表 <code>0</code>，并把电容放电，藉此来保证数据的正确性。 </p><ul><li><h4 id="SDRAM"><a href="#SDRAM" class="headerlink" title="SDRAM"></a>SDRAM</h4></li></ul><p>根据 DRAM 的通讯方式，又分为<code>同步</code>和<code>异步</code>两种，这两种方式根据通讯时是否需要使用时钟信号来区分。 下图一种利用时钟进行同步的通讯时序，它在时钟的上升沿表示有效数据：</p><p><img src="https://s2.ax1x.com/2019/07/30/e8OIeS.png" alt="e8OIeS.png"></p><p>由于使用时钟同步的通讯速度更快，所以同步 <code>DRAM</code> 使用更为广泛，这种 <code>DRAM</code> 被称为 <code>SDRAM(Synchronous DRAM)</code>。  </p><ul><li><h4 id="DDR-SDRAM"><a href="#DDR-SDRAM" class="headerlink" title="DDR SDRAM"></a>DDR SDRAM</h4></li></ul><p>为了进一步提高 <code>SDRAM</code> 的通讯速度，人们设计了 <code>DDR SDRAM</code> 存储器<code>(Double DataRate SDRAM)</code>。它的存储特性与 <code>SDRAM</code> 没有区别，但 <code>SDRAM</code> 只在上升沿表示有效数据，在 1 个时钟周期内，只能表示 1 个有数据。</p><p>而 <code>DDR SDRAM</code> 在时钟的上升沿及下降沿各表示一个数据，也就是说在 1 个时钟周期内可以表示 2 数据，在时钟频率同样的情况下，提高了一倍的速度。至于 <code>DDRII</code> 和 <code>DDRIII</code>，它们的通讯方式并没有区别，主要是通讯同步时钟的频率提高了。 </p><p>当前个人计算机常用的内存条是 <code>DDRIII SDRAM</code> 存储器，在一个内存条上包含多个<code>DDRIII SDRAM</code> 芯片 。</p><h3 id="（2）SRAM"><a href="#（2）SRAM" class="headerlink" title="（2）SRAM"></a>（2）SRAM</h3><p>静态随机存储器 SRAM 的存储单元以锁存器来存储数据，如：</p><p><img src="https://s2.ax1x.com/2019/07/30/e8Oodg.png" alt="e8Oodg.png"></p><p>这种电路结构不需要定时刷新充电，就能保持状态(当然，如果断电了，数据还是会丢失的)，所以这种存储器被称为<code>静态(Static)RAM</code>。 </p><p>同样地， <code>SRAM</code> 根据其通讯方式也分为同步<code>(SSRAM)</code>和异步 <code>SRAM</code>。 </p><h3 id="（3）DRAM-与-SRAM-的应用场合"><a href="#（3）DRAM-与-SRAM-的应用场合" class="headerlink" title="（3）DRAM 与 SRAM 的应用场合"></a>（3）DRAM 与 SRAM 的应用场合</h3><p>对比 <code>DRAM</code> 与 <code>SRAM</code> 的结构，可知 <code>DRAM</code> 的结构简单得多，所以生产相同容量的存储器， <code>DRAM</code> 的成本要更低，且集成度更高。而 <code>DRAM</code> 中的电容结构则决定了它的存取速度不如 <code>SRAM</code> ,特性对比 如：</p><p><img src="https://s2.ax1x.com/2019/07/30/e8OToQ.png" alt="e8OToQ.png"></p><p>所以在实际应用场合中， <code>SRAM</code> 一般只用于 CPU 内部的<code>高速缓存(Cache)</code>，而外部扩展的内存一般使用 <code>DRAM</code>。 </p><h2 id="2、非易失性存储器"><a href="#2、非易失性存储器" class="headerlink" title="2、非易失性存储器"></a>2、非易失性存储器</h2><p>非易失性存储器种类非常多，半导体类的有 <code>ROM</code> 和 <code>FLASH</code>，而其它的则包括光盘、软盘及机械硬盘。 </p><h3 id="（1）ROM存储器"><a href="#（1）ROM存储器" class="headerlink" title="（1）ROM存储器"></a>（1）ROM存储器</h3><p><code>ROM</code> 是<code>Read Only Memory</code>的缩写，意为只能读的存储器。 现在一般用于指代非易失性半导体存储器，包括后面介绍的 <code>FLASH</code> 存储器，有些人也把它归到 <code>ROM</code> 类里边 。</p><ul><li><h4 id="MASK-ROM"><a href="#MASK-ROM" class="headerlink" title="MASK ROM"></a>MASK ROM</h4></li></ul><p><code>MASK(掩膜) ROM</code> 就是正宗的<code>Read Only Memory</code>，存储在它内部的数据是在出厂时使用特殊工艺固化的，生产后就不可修改，其主要优势是大批量生产时成本低。当前在生产量大，数据不需要修改的场合，还有应用。 </p><ul><li><h4 id="OTPROM"><a href="#OTPROM" class="headerlink" title="OTPROM"></a>OTPROM</h4></li></ul><p><code>OTPROM(One Time Programable ROM)</code>是一次可编程存储器。这种存储器出厂时内部并没有资料，用户可以使用专用的编程器将自己的资料写入，但只能写入一次，被写入过后，它的内容也不可再修改。在 NXP 公司生产的控制器芯片中常使用 <code>OTPROM</code> 来存储密钥； <code>STM32F429</code> 系列的芯片内部也包含有一部分的 <code>OTPROM</code> 空间。 </p><ul><li><h4 id="EPROM"><a href="#EPROM" class="headerlink" title="EPROM"></a>EPROM</h4></li></ul><p><code>EPROM(Erasable Programmable ROM)</code>是可重复擦写的存储器，它解决了 <code>PROM</code> 芯片只能写入一次的问题。这种存储器使用紫外线照射芯片内部擦除数据，擦除和写入都要专用的设备。现在这种存储器基本淘汰，被 <code>EEPROM</code> 取代。 </p><ul><li><h4 id="EEPROM"><a href="#EEPROM" class="headerlink" title="EEPROM"></a>EEPROM</h4></li></ul><p><code>EEPROM(Electrically Erasable Programmable ROM)</code>是电可擦除存储器。 <code>EEPROM</code> 可以重复擦写，它的擦除和写入都是直接使用电路控制，不需要再使用外部设备来擦写。而且可以按字节为单位修改数据，无需整个芯片擦除。现在主要使用的 <code>ROM</code> 芯片都是<code>EEPROM</code>。 </p><h3 id="（2）FLASH-存储器"><a href="#（2）FLASH-存储器" class="headerlink" title="（2）FLASH 存储器"></a>（2）FLASH 存储器</h3><p><code>FLASH</code> 存储器又称为闪存，它也是可重复擦写的储器，部分书籍会把 <code>FLASH</code> 存储器称为 <code>FLASH ROM</code>，但它的容量一般比 <code>EEPROM</code> 大得多，且在擦除时，一般以多个字节为单位。</p><p>如有的 <code>FLASH</code> 存储器以 <code>4096</code> 个字节为扇区，最小的擦除单位为一个扇区。根据存储单元电路的不同， <code>FLASH</code> 存储器又分为 <code>NOR FLASH</code> 和 <code>NAND FLASH</code>，如： </p><p><img src="https://s2.ax1x.com/2019/07/30/e8OHij.png" alt="e8OHij.png"></p><p><code>NOR</code> 与 <code>NAND</code> 的共性是在数据写入前都需要有擦除操作，而擦除操作一般是以<code>扇区/块</code>为单位的。而 <code>NOR</code> 与 <code>NAND</code> 特性的差别，主要是由于其内部<code>地址/数据线</code>是否分开导致的。 </p><p>由于 <code>NOR</code> 的地址线和数据线分开，它可以按<code>字节</code>读写数据，符合 <code>CPU</code> 的指令译码执行要求，所以假如 <code>NOR</code> 上存储了代码指令， <code>CPU</code> 给 <code>NOR</code> 一个地址， <code>NOR</code> 就能向<code>CPU</code> 返回一个数据让 <code>CPU</code> 执行，中间不需要额外的处理操作。 </p><p>而由于 <code>NAND</code> 的数据和地址线共用，只能按<code>块</code>来读写数据，假如 <code>NAND</code> 上存储了代码指令， <code>CPU</code> 给 <code>NAND</code> 地址后，它无法直接返回该地址的数据，所以不符合指令译码要求。 这就是最后一项<code>是否支持 XIP</code>描述的就是这种立即执行的特性<code>(eXecute In Place)</code> 。</p><p>若代码存储在 <code>NAND</code> 上，可以把它先加载到 <code>RAM</code> 存储器上，再由 <code>CPU</code> 执行。所以在功能上可以认为 <code>NOR</code> 是一种断电后数据不丢失的 <code>RAM</code>，但它的擦除单位与 <code>RAM</code> 有区别，且读写速度比 <code>RAM</code> 要慢得多。 </p><p>另外， <code>FLASH</code> 的擦除次数都是有限的(现在普遍是 10 万次左右)，当它的使用接近寿命的时候，可能会出现写操作失败。由于 <code>NAND</code> 通常是整块擦写，块内有一位失效整个块就会失效，这被称为<code>坏块</code>。</p><p>而且由于擦写过程复杂，从整体来说 <code>NOR</code> 块块更少，寿命更长。由于可能存在坏块，所以 FLASH 存储器需要<code>探测/错误更正(EDC/ECC)算法</code>来确保数据的正确性。 </p><p>由于两种 <code>FLASH</code> 存储器特性的差异， <code>NOR FLASH</code> 一般应用在代码存储的场合，如嵌入式控制器内部的程序存储空间。而 <code>NAND FLASH</code> 一般应用在大数据量存储的场合，包括 SD 卡、 U 盘以及固态硬盘等，都是 <code>NAND FLASH</code> 类型的 。</p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>1、一个工程可以创建多个target以区分不同模式（RAM模式、FLASH模式）的代码；也可以创建多个target用来适配不同的硬件方案，如有些项目既有有用到小屏幕，也有用到大屏幕，那么就可以创建一个针对大屏的target、一个针对小屏幕的target，方便代码维护。</p><p>2、存储器分两大类：一类是掉电易失的，另一类是掉电不易失的。</p><hr><p>我的个人博客网站为：<a href="https://zhengnianli.github.io">https://zhengnianli.github.io</a></p><p>我的微信公众号为：嵌入式大杂烩</p><p><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> DSP </tag>
            
            <tag> 存储器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【DSP笔记】下载程序遇到的问题及解决方法</title>
      <link href="/2019/07/25/dsp-bi-ji-dsp-xia-zai-cheng-xu-yu-dao-de-wen-ti/"/>
      <url>/2019/07/25/dsp-bi-ji-dsp-xia-zai-cheng-xu-yu-dao-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>最近拿到了一块TI官方的DSP开发板，芯片型号是：<code>TMS320F280049C</code>，板载调试器<code>XDS110</code>。但是下载程序时遇到了一点问题，现记录总结如下：</p><img src="https://s2.ax1x.com/2019/07/25/eex9Re.jpg" alt="ZGtM1P.png" border="0" width="600"><p><code>TMS320F280049C</code>特性：</p><p><img src="https://s2.ax1x.com/2019/07/25/eexlss.png" alt="eexlss.png"></p><p><img src="https://s2.ax1x.com/2019/07/25/eex1Ln.png" alt="eex1Ln.png"></p><h1 id="二、下载程序时遇到的问题及解决方法"><a href="#二、下载程序时遇到的问题及解决方法" class="headerlink" title="二、下载程序时遇到的问题及解决方法"></a>二、下载程序时遇到的问题及解决方法</h1><p>之前用过一阵子TI的DSP，也用过其配套的IDE——<code>CCS</code>（Code Composer Studio）进行开发。下载程序之前先新建一个<code>.ccxml</code>结尾的配置文件进行下载、调试配置，这个文件通常只需要配置两个基本信息，一个是调试器，另一个是芯片型号。</p><p>按照以往的经验，配置完这两个信息之后，进行连接测试：</p><p><img src="https://i.loli.net/2019/07/25/5d39925f8a2a441390.png" alt="001.png"></p><p>测试结果显示连接失败：</p><p><img src="https://i.loli.net/2019/07/25/5d3992b394de157588.png" alt="002.png"></p><p>之前使用<code>XDS100v1</code>、<code>XDS100v2</code>仿真器时就是这么设置就可以了。现在用了<code>XDS110</code>却不行，反复操作了好几遍都是连接失败，还以为仿真器或者板子坏了呢。仔细看了看连接失败的说明：<code>The JTAG IR an DR scan-path cannot circulate bits.</code>，表明了这应该是仿真器还需要设置，上官网查了查相关的用户手册文档，发现还真的得对仿真器进行设置：</p><p><img src="https://i.loli.net/2019/07/25/5d399a6a7a3fc37097.png" alt="008.png"></p><p>果然，按照文档说的，设置了仿真器的模式为<code>cJTAG1149.7 2-pin advanced modes</code>（原本默认是<code>JTAG1149.1</code>）之后就可以用了：</p><p><img src="https://s2.ax1x.com/2019/07/25/eevCBq.png" alt="eevCBq.png"></p><p>修改之后的配置为：</p><p><img src="https://s2.ax1x.com/2019/07/25/eevmv9.png" alt="eevmv9.png"></p><p>然后进行连接测试：</p><p><img src="https://s2.ax1x.com/2019/07/25/eevUKA.png" alt="eevUKA.png"></p><p>连接成功。这下就可以愉快的点灯啦。</p><p><strong>总结：</strong></p><p>（1）<code>XDS100v1</code>、<code>XDS100v2</code>调试器不用修改仿真器模式，默认为<code>JTAG1149.1</code>就可以用，<code>XDS110</code>调试器的模式得改为<code>cJTAG1149.7 2-pin advanced modes</code>才可以正常使用。</p><p>（2）官方文档是重要的学习资料，要多看。</p><p>（3）有些经验可能会让我们进入思维惯性误区，要勤于思考，灵活应变。</p><hr><p>我的个人博客网站为：<a href="https://zhengnianli.github.io">https://zhengnianli.github.io</a></p><p>我的微信公众号为：嵌入式大杂烩</p><p><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> DSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【socket应用】基于C语言的天气客户端的实现</title>
      <link href="/2019/07/08/socket-ying-yong-ji-yu-c-yu-yan-de-tian-qi-ke-hu-duan-de-shi-xian/"/>
      <url>/2019/07/08/socket-ying-yong-ji-yu-c-yu-yan-de-tian-qi-ke-hu-duan-de-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>上一篇笔记分享了<a href="https://zhengnianli.github.io/2019/06/30/socket-bi-ji-tcp-udp-tong-xin-zong-jie/">【socket笔记】TCP、UDP通信总结</a>，这一篇分享一个用C语言写的、基于TCP的一个HTTP天气客户端的实现，这个一个控制台应用程序，最终的界面如下：</p><p><img src="https://s2.ax1x.com/2019/07/07/ZDKRxA.png" alt="ZDKRxA.png"></p><p>关于天气预报，之前我已经用<code>STM32+ESP8266</code>wifi模块实现过了一遍，感兴趣的可查阅往期笔记：<a href="https://zhengnianli.github.io/2019/06/20/zuo-pin-ji-yu-stm32-de-zhi-neng-tian-qi-yu-bao-xi-tong/">基于STM32的智能天气预报系统</a>。这次这个基于C语言控制台程序的HTTP客户端的天气解析的代码和之前分享的差不多，只是在那基础上添加修改了一些东西，并配合socket的相关知识实现的，以巩固一下socket编程的知识。下面分享一些实现过程。</p><h1 id="二、天气客户端实现的要点"><a href="#二、天气客户端实现的要点" class="headerlink" title="二、天气客户端实现的要点"></a>二、天气客户端实现的要点</h1><p>首先，需要说明的是，这份代码是在windows系统下使用<code>gcc6.3.0</code>进行编译的。</p><h2 id="1、秘钥"><a href="#1、秘钥" class="headerlink" title="1、秘钥"></a>1、秘钥</h2><blockquote><p>心知天气：<a href="http://www.seniverse.com" target="_blank" rel="noopener">www.seniverse.com</a></p></blockquote><p>我们完成这个实验必须得到这个上面去注册一个账号才能使用它的天气数据，注册之后每个账户都会有一个<code>私钥</code>，例如：</p><blockquote><p>私钥 SMEieQjde1C9eXnbE</p></blockquote><p>这个是我们程序中需要用到。</p><h2 id="2、IP和端口"><a href="#2、IP和端口" class="headerlink" title="2、IP和端口"></a>2、IP和端口</h2><p>上一节分享了socket的笔记，我们与服务端通信，需要知道三个重要的信息，分别是：</p><ol><li>IP地址</li><li>端口</li><li>传输方式</li></ol><p>这里的心知天气的IP是<code>116.62.81.138</code>，端口是<code>80</code>，传输方式是<code>TCP</code>，对应的代码如下：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 设置要访问的服务器的信息 */</span>SOCKADDR_IN  ServerSockAddr<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ServerSockAddr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ServerSockAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 每个字节都用0填充</span>ServerSockAddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> PF_INET<span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// IPv4</span>ServerSockAddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>WEATHER_IP_ADDR<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 心知天气服务器IP</span>ServerSockAddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>WEATHER_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 端口</span></code></pre><p>这里的<code>WEATHER_IP_ADDR</code>对应的就是<code>116.62.81.138</code>，<code>WEATHER_PORT</code>对应的就是<code>80</code>。</p><h2 id="3、GET请求"><a href="#3、GET请求" class="headerlink" title="3、GET请求"></a>3、GET请求</h2><p>HTTP有几种请求方法，我们这里使用的是<code>GET</code>请求。查看心知天气API文档可知，请求地址示例为：</p><blockquote><p><a href="https://api.seniverse.com/v3/weather/now.json?key=your_api_key&amp;location=beijing&amp;language=zh-Hans&amp;unit=c" target="_blank" rel="noopener">https://api.seniverse.com/v3/weather/now.json?key=your_api_key&amp;location=beijing&amp;language=zh-Hans&amp;unit=c</a></p></blockquote><p>这是一个天气实况的请求地址示例，其有几个重要的参数：</p><p><img src="https://s2.ax1x.com/2019/07/07/ZD8cPf.png" alt="ZD8cPf.png"></p><p>这里的<code>key</code>是个很重要的参数，就是我们前面说的<code>私钥</code>。</p><p>我们的天气客户端就是要往天气服务端发送类似这样的<code>GET请求</code>来获取天气数据，具体的请求方法示例为：</p><pre class=" language-c"><code class="language-c">GET https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>api<span class="token punctuation">.</span>seniverse<span class="token punctuation">.</span>com<span class="token operator">/</span>v3<span class="token operator">/</span>weather<span class="token operator">/</span>now<span class="token punctuation">.</span>json<span class="token operator">?</span>key<span class="token operator">=</span>2owqvhhd2dd9o9f8<span class="token operator">&amp;</span>location<span class="token operator">=</span>beijing<span class="token operator">&amp;</span>language<span class="token operator">=</span>zh<span class="token operator">-</span>Hans<span class="token operator">&amp;</span>unit<span class="token operator">=</span>c</code></pre><p>对应代码如下：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 秘钥，注意！！如果要用这一份代码，这个一定要改为自己的，因为这个我已经故意改错了，防止有人与我公用一个KEY */</span><span class="token macro property">#<span class="token directive keyword">define</span>  KEY    "2owqvhhd2dd9o9f8"        </span><span class="token comment" spellcheck="true">// 这是在心知天气注册后，每个用户自己的一个key</span><span class="token comment" spellcheck="true">/* GET请求包 */</span><span class="token macro property">#<span class="token directive keyword">define</span>  GET_REQUEST_PACKAGE     \         "GET https://api.seniverse.com/v3/weather/%s.json?key=%s&amp;location=%s&amp;language=zh-Hans&amp;unit=c\r\n\r\n"</span><span class="token comment" spellcheck="true">/* JSON数据包 */</span>    <span class="token macro property">#<span class="token directive keyword">define</span>  NOW_JSON     "now"</span><span class="token macro property">#<span class="token directive keyword">define</span>  DAILY_JSON   "daily"</span><span class="token comment" spellcheck="true">//....还用更多其他的天气数据包可查阅心知天气</span><span class="token comment" spellcheck="true">/* 组合GET请求包 */</span><span class="token function">sprintf</span><span class="token punctuation">(</span>GetRequestBuf<span class="token punctuation">,</span> GET_REQUEST_PACKAGE<span class="token punctuation">,</span> weather_json<span class="token punctuation">,</span> KEY<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 发送数据到服务端 */</span><span class="token function">send</span><span class="token punctuation">(</span>ClientSock<span class="token punctuation">,</span> GetRequestBuf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>GetRequestBuf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里简单复习一下<code>sprintf函数</code>的用法：</p><p>（1）函数功能：字符串格式化</p><p>（2）函数原型：int sprintf(char *string, char *format [,argument,…]);</p><p><strong>string</strong>： 这是指向一个字符数组的指针，该数组存储了 C 字符串。</p><p><strong>format</strong> ： 这是字符串，包含了要被写入到字符串 str 的文本。</p><p><strong>*[argument]..***</strong>.**：根据不同的 format 字符串，函数可能需要一系列的附加参数，每个参数包含了一个要被插入的值，替换了 format 参数中指定的每个 % 标签。</p><p>（3）使用示例：</p><pre class=" language-c"><code class="language-c"><span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"%s,%d"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>假如此时<code>str</code>为<code>&quot;hello&quot;</code>，<code>num</code>为<code>5201314</code>，则此时buf中的内容为：<code>hello，5201314</code>，需要注意的是buf的容量要足够大。</p><h2 id="4、天气服务端返回的数据"><a href="#4、天气服务端返回的数据" class="headerlink" title="4、天气服务端返回的数据"></a>4、天气服务端返回的数据</h2><p>天气服务端给我们天气客户端返回的数据为<code>JSON</code>格式数据，可查阅往期笔记<a href="https://zhengnianli.github.io/2019/06/15/json-de-jian-dan-ren-shi/">JSON的简单认识</a>。我们这个天气客户端只是实现了查询此刻天气（对应的数据包为<code>now.json</code>）及近三天天气情况（对应的数据包为<code>daily.json</code>），如要查询其他信息，可模仿我们这里处理<code>now.json</code>和<code>daily.json</code>的方法，我们用<code>cJson库</code>进行解析。</p><p>这个<code>cJson</code>库的下载链接为：</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1DQynsdlNyIvsVXmf4W5b8Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1DQynsdlNyIvsVXmf4W5b8Q</a><br>提取码：ww4z</p></blockquote><p>只要把<code>cJSON.c</code>与<code>cJSON.ｈ</code>放到工程主程序所在目录，然后在主程序中包含头文件<code>JSON.ｈ</code>即可引入该库。如：</p><p><img src="https://s2.ax1x.com/2019/07/07/ZDYU2T.png" alt="ZDYU2T.png"></p><p>为了解析<code>now.json</code>和<code>daily.json</code>中的有用数据，我们建立如下结构体：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 天气数据结构体 */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 实况天气数据 */</span>    <span class="token keyword">char</span> id<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//id</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//地名</span>    <span class="token keyword">char</span> country<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//国家</span>    <span class="token keyword">char</span> path<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//完整地名路径</span>    <span class="token keyword">char</span> timezone<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//时区</span>    <span class="token keyword">char</span> timezone_offset<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//时差</span>    <span class="token keyword">char</span> text<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//天气预报文字</span>    <span class="token keyword">char</span> code<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//天气预报代码</span>    <span class="token keyword">char</span> temperature<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//气温</span>    <span class="token keyword">char</span> last_update<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//最后一次更新的时间</span>    <span class="token comment" spellcheck="true">/* 今天、明天、后天天气数据 */</span>    <span class="token keyword">char</span> date<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//日期</span>    <span class="token keyword">char</span> text_day<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//白天天气现象文字</span>    <span class="token keyword">char</span> code_day<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//白天天气现象代码</span>    <span class="token keyword">char</span> code_night<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//晚间天气现象代码</span>    <span class="token keyword">char</span> high<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//最高温</span>    <span class="token keyword">char</span> low<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//最低温</span>    <span class="token keyword">char</span> wind_direction<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//风向</span>    <span class="token keyword">char</span> wind_speed<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//风速，单位km/h（当unit=c时）</span>    <span class="token keyword">char</span> wind_scale<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//风力等级</span><span class="token punctuation">}</span>Weather<span class="token punctuation">;</span></code></pre><p>现在看一下<code>now.json</code>和<code>daily.json</code>的内容是怎样的：</p><p>（1）<code>now.json</code>示例及解析：</p><p><strong>now.json：</strong></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"results"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"location"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"C23NB62W20TF"</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"西雅图"</span><span class="token punctuation">,</span>        <span class="token property">"country"</span><span class="token operator">:</span> <span class="token string">"US"</span><span class="token punctuation">,</span>        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"西雅图,华盛顿州,美国"</span><span class="token punctuation">,</span>        <span class="token property">"timezone"</span><span class="token operator">:</span> <span class="token string">"America/Los_Angeles"</span><span class="token punctuation">,</span>        <span class="token property">"timezone_offset"</span><span class="token operator">:</span> <span class="token string">"-07:00"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"now"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"多云"</span><span class="token punctuation">,</span> //天气现象文字        <span class="token property">"code"</span><span class="token operator">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span> //天气现象代码        <span class="token property">"temperature"</span><span class="token operator">:</span> <span class="token string">"14"</span><span class="token punctuation">,</span> //温度，单位为c摄氏度或f华氏度        <span class="token property">"feels_like"</span><span class="token operator">:</span> <span class="token string">"14"</span><span class="token punctuation">,</span> //体感温度，单位为c摄氏度或f华氏度        <span class="token property">"pressure"</span><span class="token operator">:</span> <span class="token string">"1018"</span><span class="token punctuation">,</span> //气压，单位为mb百帕或in英寸        <span class="token property">"humidity"</span><span class="token operator">:</span> <span class="token string">"76"</span><span class="token punctuation">,</span> //相对湿度，<span class="token number">0</span>~<span class="token number">100</span>，单位为百分比        <span class="token property">"visibility"</span><span class="token operator">:</span> <span class="token string">"16.09"</span><span class="token punctuation">,</span> //能见度，单位为km公里或mi英里        <span class="token property">"wind_direction"</span><span class="token operator">:</span> <span class="token string">"西北"</span><span class="token punctuation">,</span> //风向文字        <span class="token property">"wind_direction_degree"</span><span class="token operator">:</span> <span class="token string">"340"</span><span class="token punctuation">,</span> //风向角度，范围<span class="token number">0</span>~<span class="token number">360</span>，<span class="token number">0</span>为正北，<span class="token number">90</span>为正东，<span class="token number">180</span>为正南，<span class="token number">270</span>为正西        <span class="token property">"wind_speed"</span><span class="token operator">:</span> <span class="token string">"8.05"</span><span class="token punctuation">,</span> //风速，单位为km/h公里每小时或mph英里每小时        <span class="token property">"wind_scale"</span><span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span> //风力等级，请参考：http<span class="token operator">:</span>//baike.baidu.com/view/<span class="token number">465076</span>.htm        <span class="token property">"clouds"</span><span class="token operator">:</span> <span class="token string">"90"</span><span class="token punctuation">,</span> //云量，单位%，范围<span class="token number">0</span>~<span class="token number">100</span>，天空被云覆盖的百分比 #目前不支持中国城市#        <span class="token property">"dew_point"</span><span class="token operator">:</span> <span class="token string">"-12"</span> //露点温度，请参考：http<span class="token operator">:</span>//baike.baidu.com/view/<span class="token number">118348</span>.htm #目前不支持中国城市#      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"last_update"</span><span class="token operator">:</span> <span class="token string">"2015-09-25T22:45:00-07:00"</span> //数据更新时间（该城市的本地时间）    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>这里实测了一下，我们普通用户（因为没充钱，哈哈~）申请的<code>now.json</code>数据中，<code>now对象</code>中只有如下三个键值对：</p><pre class=" language-json"><code class="language-json"><span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"多云"</span><span class="token punctuation">,</span> //天气现象文字<span class="token property">"code"</span><span class="token operator">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span> //天气现象代码<span class="token property">"temperature"</span><span class="token operator">:</span> <span class="token string">"14"</span><span class="token punctuation">,</span> //温度，单位为c摄氏度或f华氏度</code></pre><p><strong>now.json的解析函数：</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/********************************************************************************************************* 函数: cJSON_NowWeatherParse，解析天气实况数据**------------------------------------------------------------------------------------------------------** 参数: JSON：天气数据包   result：数据解析的结果** 返回: void********************************************************************************************************/</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cJSON_NowWeatherParse</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>JSON<span class="token punctuation">,</span> Weather <span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>    cJSON <span class="token operator">*</span>json<span class="token punctuation">,</span><span class="token operator">*</span>arrayItem<span class="token punctuation">,</span><span class="token operator">*</span>object<span class="token punctuation">,</span><span class="token operator">*</span>subobject<span class="token punctuation">,</span><span class="token operator">*</span>item<span class="token punctuation">;</span>    json <span class="token operator">=</span> <span class="token function">cJSON_Parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//解析JSON数据包</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>json <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//检测JSON数据包是否存在语法上的错误，返回NULL表示数据包无效</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error before: [%s]\n"</span><span class="token punctuation">,</span><span class="token function">cJSON_GetErrorPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印数据包语法错误的位置</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arrayItem <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span><span class="token string">"results"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//匹配字符串"results",获取数组内容</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">cJSON_GetArraySize</span><span class="token punctuation">(</span>arrayItem<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//获取数组中对象个数</span><span class="token macro property">#<span class="token directive keyword">if</span> DEBUG</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cJSON_GetArraySize: size=%d\n"</span><span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token macro property">#<span class="token directive keyword">endif</span></span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>object <span class="token operator">=</span> <span class="token function">cJSON_GetArrayItem</span><span class="token punctuation">(</span>arrayItem<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取父对象内容</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* 匹配子对象1：城市地区相关 */</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>subobject <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token string">"location"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 匹配id</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                       <span class="token punctuation">{</span>                        <span class="token function">memcpy</span><span class="token punctuation">(</span>result<span class="token operator">-></span>id<span class="token punctuation">,</span> item<span class="token operator">-></span>valuestring<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 保存数据供外部调用</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 匹配城市名</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                     <span class="token punctuation">{</span>                        <span class="token function">memcpy</span><span class="token punctuation">(</span>result<span class="token operator">-></span>name<span class="token punctuation">,</span> item<span class="token operator">-></span>valuestring<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 保存数据供外部调用</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 匹配城市所在的国家</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"country"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token function">memcpy</span><span class="token punctuation">(</span>result<span class="token operator">-></span>country<span class="token punctuation">,</span> item<span class="token operator">-></span>valuestring<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 保存数据供外部调用</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 匹配完整地名路径</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                      <span class="token punctuation">{</span>                        <span class="token function">memcpy</span><span class="token punctuation">(</span>result<span class="token operator">-></span>path<span class="token punctuation">,</span> item<span class="token operator">-></span>valuestring<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 保存数据供外部调用    </span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 匹配时区</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"timezone"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token function">memcpy</span><span class="token punctuation">(</span>result<span class="token operator">-></span>timezone<span class="token punctuation">,</span> item<span class="token operator">-></span>valuestring<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 保存数据供外部调用    </span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 匹配时差</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"timezone_offset"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token function">memcpy</span><span class="token punctuation">(</span>result<span class="token operator">-></span>timezone_offset<span class="token punctuation">,</span> item<span class="token operator">-></span>valuestring<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 保存数据供外部调用</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">/* 匹配子对象2：今天的天气情况 */</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>subobject <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token string">"now"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 匹配天气现象文字</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token function">memcpy</span><span class="token punctuation">(</span>result<span class="token operator">-></span>text<span class="token punctuation">,</span> item<span class="token operator">-></span>valuestring<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 保存数据供外部调用</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 匹配天气现象代码</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token function">memcpy</span><span class="token punctuation">(</span>result<span class="token operator">-></span>code<span class="token punctuation">,</span> item<span class="token operator">-></span>valuestring<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 保存数据供外部调用</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 匹配气温</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"temperature"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                     <span class="token punctuation">{</span>                        <span class="token function">memcpy</span><span class="token punctuation">(</span>result<span class="token operator">-></span>temperature<span class="token punctuation">,</span> item<span class="token operator">-></span>valuestring<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 保存数据供外部调用</span>                    <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">/* 匹配子对象3：数据更新时间（该城市的本地时间） */</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>subobject <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token string">"last_update"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">memcpy</span><span class="token punctuation">(</span>result<span class="token operator">-></span>last_update<span class="token punctuation">,</span> subobject<span class="token operator">-></span>valuestring<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>subobject<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 保存数据供外部调用</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">cJSON_Delete</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//释放cJSON_Parse()分配出来的内存空间</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>（2）<code>daily.json</code>示例及解析：</p><p><strong>daily.json：</strong></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"results"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"location"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"WX4FBXXFKE4F"</span><span class="token punctuation">,</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"北京"</span><span class="token punctuation">,</span>      <span class="token property">"country"</span><span class="token operator">:</span> <span class="token string">"CN"</span><span class="token punctuation">,</span>      <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"北京,北京,中国"</span><span class="token punctuation">,</span>      <span class="token property">"timezone"</span><span class="token operator">:</span> <span class="token string">"Asia/Shanghai"</span><span class="token punctuation">,</span>      <span class="token property">"timezone_offset"</span><span class="token operator">:</span> <span class="token string">"+08:00"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"daily"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                         //返回指定days天数的结果      <span class="token property">"date"</span><span class="token operator">:</span> <span class="token string">"2015-09-20"</span><span class="token punctuation">,</span>             //日期      <span class="token property">"text_day"</span><span class="token operator">:</span> <span class="token string">"多云"</span><span class="token punctuation">,</span>               //白天天气现象文字      <span class="token property">"code_day"</span><span class="token operator">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span>                  //白天天气现象代码      <span class="token property">"text_night"</span><span class="token operator">:</span> <span class="token string">"晴"</span><span class="token punctuation">,</span>               //晚间天气现象文字      <span class="token property">"code_night"</span><span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>                //晚间天气现象代码      <span class="token property">"high"</span><span class="token operator">:</span> <span class="token string">"26"</span><span class="token punctuation">,</span>                     //当天最高温度      <span class="token property">"low"</span><span class="token operator">:</span> <span class="token string">"17"</span><span class="token punctuation">,</span>                      //当天最低温度      <span class="token property">"precip"</span><span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>                    //降水概率，范围<span class="token number">0</span>~<span class="token number">100</span>，单位百分比（目前仅支持国外城市）      <span class="token property">"wind_direction"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>             //风向文字      <span class="token property">"wind_direction_degree"</span><span class="token operator">:</span> <span class="token string">"255"</span><span class="token punctuation">,</span>   //风向角度，范围<span class="token number">0</span>~<span class="token number">360</span>      <span class="token property">"wind_speed"</span><span class="token operator">:</span> <span class="token string">"9.66"</span><span class="token punctuation">,</span>             //风速，单位km/h（当unit=c时）、mph（当unit=f时）      <span class="token property">"wind_scale"</span><span class="token operator">:</span> <span class="token string">""</span>                  //风力等级    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token property">"date"</span><span class="token operator">:</span> <span class="token string">"2015-09-21"</span><span class="token punctuation">,</span>      <span class="token property">"text_day"</span><span class="token operator">:</span> <span class="token string">"晴"</span><span class="token punctuation">,</span>      <span class="token property">"code_day"</span><span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>      <span class="token property">"text_night"</span><span class="token operator">:</span> <span class="token string">"晴"</span><span class="token punctuation">,</span>      <span class="token property">"code_night"</span><span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>      <span class="token property">"high"</span><span class="token operator">:</span> <span class="token string">"27"</span><span class="token punctuation">,</span>      <span class="token property">"low"</span><span class="token operator">:</span> <span class="token string">"17"</span><span class="token punctuation">,</span>      <span class="token property">"precip"</span><span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>      <span class="token property">"wind_direction"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token property">"wind_direction_degree"</span><span class="token operator">:</span> <span class="token string">"157"</span><span class="token punctuation">,</span>      <span class="token property">"wind_speed"</span><span class="token operator">:</span> <span class="token string">"17.7"</span><span class="token punctuation">,</span>      <span class="token property">"wind_scale"</span><span class="token operator">:</span> <span class="token string">"3"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      ...                               //更多返回结果    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"last_update"</span><span class="token operator">:</span> <span class="token string">"2015-09-20T18:00:00+08:00"</span> //数据更新时间（该城市的本地时间）  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p><strong>daily.json解析函数：</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/********************************************************************************************************* 函数: cJSON_DailyWeatherParse，解析近三天天气数据**------------------------------------------------------------------------------------------------------** 参数: JSON：天气数据包   result：数据解析的结果** 返回: void********************************************************************************************************/</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cJSON_DailyWeatherParse</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>JSON<span class="token punctuation">,</span> Weather <span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>    cJSON <span class="token operator">*</span>json<span class="token punctuation">,</span><span class="token operator">*</span>arrayItem<span class="token punctuation">,</span><span class="token operator">*</span>object<span class="token punctuation">,</span><span class="token operator">*</span>subobject<span class="token punctuation">,</span><span class="token operator">*</span>item<span class="token punctuation">,</span><span class="token operator">*</span>sub_child_object<span class="token punctuation">,</span><span class="token operator">*</span>child_Item<span class="token punctuation">;</span>    json <span class="token operator">=</span> <span class="token function">cJSON_Parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//解析JSON数据包</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>json <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//检测JSON数据包是否存在语法上的错误，返回NULL表示数据包无效</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error before: [%s]\n"</span><span class="token punctuation">,</span><span class="token function">cJSON_GetErrorPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印数据包语法错误的位置</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arrayItem <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span><span class="token string">"results"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//匹配字符串"results",获取数组内容</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">cJSON_GetArraySize</span><span class="token punctuation">(</span>arrayItem<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//获取数组中对象个数</span><span class="token macro property">#<span class="token directive keyword">if</span> DEBUG</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Get Array Size: size=%d\n"</span><span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token macro property">#<span class="token directive keyword">endif</span></span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>object <span class="token operator">=</span> <span class="token function">cJSON_GetArrayItem</span><span class="token punctuation">(</span>arrayItem<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取父对象内容</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* 匹配子对象1------结构体location */</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>subobject <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token string">"location"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//匹配子对象1成员"name"</span>                    <span class="token punctuation">{</span>                        <span class="token function">memcpy</span><span class="token punctuation">(</span>result<span class="token operator">-></span>name<span class="token punctuation">,</span> item<span class="token operator">-></span>valuestring<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 保存数据供外部调用</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">/* 匹配子对象2------数组daily */</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>subobject <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token string">"daily"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">int</span> sub_array_size <span class="token operator">=</span> <span class="token function">cJSON_GetArraySize</span><span class="token punctuation">(</span>subobject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> DEBUG</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Get Sub Array Size: sub_array_size=%d\n"</span><span class="token punctuation">,</span>sub_array_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sub_array_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sub_child_object <span class="token operator">=</span> <span class="token function">cJSON_GetArrayItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 匹配日期</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>child_Item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>sub_child_object<span class="token punctuation">,</span><span class="token string">"date"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                <span class="token function">memcpy</span><span class="token punctuation">(</span>result<span class="token operator">-></span>date<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> child_Item<span class="token operator">-></span>valuestring<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>child_Item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 保存数据</span>                            <span class="token punctuation">}</span>                            <span class="token comment" spellcheck="true">// 匹配白天天气现象文字</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>child_Item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>sub_child_object<span class="token punctuation">,</span><span class="token string">"text_day"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                <span class="token function">memcpy</span><span class="token punctuation">(</span>result<span class="token operator">-></span>text_day<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> child_Item<span class="token operator">-></span>valuestring<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>child_Item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 保存数据</span>                            <span class="token punctuation">}</span>                            <span class="token comment" spellcheck="true">// 匹配白天天气现象代码</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>child_Item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>sub_child_object<span class="token punctuation">,</span><span class="token string">"code_day"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                <span class="token function">memcpy</span><span class="token punctuation">(</span>result<span class="token operator">-></span>code_day<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> child_Item<span class="token operator">-></span>valuestring<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>child_Item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 保存数据</span>                            <span class="token punctuation">}</span>                            <span class="token comment" spellcheck="true">// 匹配夜间天气现象代码</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>child_Item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>sub_child_object<span class="token punctuation">,</span><span class="token string">"code_night"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                <span class="token function">memcpy</span><span class="token punctuation">(</span>result<span class="token operator">-></span>code_night<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> child_Item<span class="token operator">-></span>valuestring<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>child_Item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存数据</span>                            <span class="token punctuation">}</span>                            <span class="token comment" spellcheck="true">// 匹配最高温度</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>child_Item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>sub_child_object<span class="token punctuation">,</span><span class="token string">"high"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                <span class="token function">memcpy</span><span class="token punctuation">(</span>result<span class="token operator">-></span>high<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> child_Item<span class="token operator">-></span>valuestring<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>child_Item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//保存数据</span>                            <span class="token punctuation">}</span>                            <span class="token comment" spellcheck="true">// 匹配最低温度</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>child_Item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>sub_child_object<span class="token punctuation">,</span><span class="token string">"low"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                <span class="token function">memcpy</span><span class="token punctuation">(</span>result<span class="token operator">-></span>low<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> child_Item<span class="token operator">-></span>valuestring<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>child_Item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 保存数据</span>                            <span class="token punctuation">}</span>                            <span class="token comment" spellcheck="true">// 匹配风向</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>child_Item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>sub_child_object<span class="token punctuation">,</span><span class="token string">"wind_direction"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                <span class="token function">memcpy</span><span class="token punctuation">(</span>result<span class="token operator">-></span>wind_direction<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>child_Item<span class="token operator">-></span>valuestring<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>child_Item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//保存数据</span>                            <span class="token punctuation">}</span>                            <span class="token comment" spellcheck="true">// 匹配风速，单位km/h（当unit=c时）</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>child_Item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>sub_child_object<span class="token punctuation">,</span><span class="token string">"wind_speed"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                <span class="token function">memcpy</span><span class="token punctuation">(</span>result<span class="token operator">-></span>wind_speed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> child_Item<span class="token operator">-></span>valuestring<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>child_Item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存数据</span>                            <span class="token punctuation">}</span>                            <span class="token comment" spellcheck="true">// 匹配风力等级</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>child_Item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>sub_child_object<span class="token punctuation">,</span><span class="token string">"wind_scale"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                <span class="token function">memcpy</span><span class="token punctuation">(</span>result<span class="token operator">-></span>wind_scale<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> child_Item<span class="token operator">-></span>valuestring<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>child_Item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存数据</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">/* 匹配子对象3------最后一次更新的时间 */</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>subobject <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token string">"last_update"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//printf("%s:%s\n",subobject->string,subobject->valuestring);</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">cJSON_Delete</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//释放cJSON_Parse()分配出来的内存空间</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="5、获取天气数据并解析"><a href="#5、获取天气数据并解析" class="headerlink" title="5、获取天气数据并解析"></a>5、获取天气数据并解析</h2><p>这个函数就涉及到我们上一节笔记中的socket编程的知识了，先看一下这个函数实现的总体框图：</p><p><img src="https://s2.ax1x.com/2019/07/08/ZD2emR.png" alt="ZD2emR.png"></p><p>下面是函数实现的细节过程：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/********************************************************************************************************* 函数: GetWeather，获取天气数据并解析**------------------------------------------------------------------------------------------------------** 参数: weather_json：需要解析的json包   location：地名   result：数据解析的结果** 返回: void********************************************************************************************************/</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">GetWeather</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>weather_json<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>location<span class="token punctuation">,</span> Weather <span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>    SOCKET ClientSock<span class="token punctuation">;</span>    WSADATA wd<span class="token punctuation">;</span>    <span class="token keyword">char</span> GetRequestBuf<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> WeatherRecvBuf<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> GbkRecvBuf<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span>  gbk_recv_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span>  connect_status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 初始化操作sock需要的DLL */</span>    <span class="token function">WSAStartup</span><span class="token punctuation">(</span><span class="token function">MAKEWORD</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>wd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* 设置要访问的服务器的信息 */</span>    SOCKADDR_IN  ServerSockAddr<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ServerSockAddr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ServerSockAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 每个字节都用0填充</span>    ServerSockAddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> PF_INET<span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// IPv4</span>    ServerSockAddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>WEATHER_IP_ADDR<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 心知天气服务器IP</span>    ServerSockAddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>WEATHER_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 端口</span>    <span class="token comment" spellcheck="true">/* 创建客户端socket */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token punctuation">(</span>ClientSock <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>PF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> IPPROTO_TCP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"socket error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 连接服务端 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token punctuation">(</span>connect_status <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>ClientSock<span class="token punctuation">,</span> <span class="token punctuation">(</span>SOCKADDR<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ServerSockAddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>SOCKADDR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"connect error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 组合GET请求包 */</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>GetRequestBuf<span class="token punctuation">,</span> GET_REQUEST_PACKAGE<span class="token punctuation">,</span> weather_json<span class="token punctuation">,</span> KEY<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 发送数据到服务端 */</span>    <span class="token function">send</span><span class="token punctuation">(</span>ClientSock<span class="token punctuation">,</span> GetRequestBuf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>GetRequestBuf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 接受服务端的返回数据 */</span>    <span class="token function">recv</span><span class="token punctuation">(</span>ClientSock<span class="token punctuation">,</span> WeatherRecvBuf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* utf-8转为gbk */</span>    <span class="token function">SwitchToGbk</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>WeatherRecvBuf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>WeatherRecvBuf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>GbkRecvBuf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>gbk_recv_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">#<span class="token directive keyword">if</span> DEBUG</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"服务端返回的数据为：%s\n"</span><span class="token punctuation">,</span> GbkRecvBuf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token comment" spellcheck="true">/* 解析天气数据并保存到结构体变量weather_data中 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>weather_json<span class="token punctuation">,</span> NOW_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 天气实况</span>    <span class="token punctuation">{</span>        <span class="token function">cJSON_NowWeatherParse</span><span class="token punctuation">(</span>GbkRecvBuf<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>weather_json<span class="token punctuation">,</span> DAILY_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 未来三天天气</span>    <span class="token punctuation">{</span>        <span class="token function">cJSON_DailyWeatherParse</span><span class="token punctuation">(</span>GbkRecvBuf<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 清空缓冲区 */</span>    <span class="token function">memset</span><span class="token punctuation">(</span>GetRequestBuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">memset</span><span class="token punctuation">(</span>WeatherRecvBuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">memset</span><span class="token punctuation">(</span>GbkRecvBuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 关闭套接字 */</span>    <span class="token function">closesocket</span><span class="token punctuation">(</span>ClientSock<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* 终止使用 DLL */</span>    <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h2 id="6、编译"><a href="#6、编译" class="headerlink" title="6、编译"></a>6、编译</h2><p>如何编译这份代码（可在文末进行获取）呢？</p><p>这份C代码工程的文件如下：</p><p><img src="https://s2.ax1x.com/2019/07/08/ZDRFEt.png" alt="ZDRFEt.png"></p><p>在windows系统下使用<code>gcc</code>编译器编译，编译命令为：</p><pre class=" language-c"><code class="language-c">gcc weather_client<span class="token punctuation">.</span>c cJSON<span class="token punctuation">.</span>c utf8togbk<span class="token punctuation">.</span>c <span class="token operator">-</span>o weather_client<span class="token punctuation">.</span>exe <span class="token operator">-</span>lwsock32</code></pre><p>如：</p><p><img src="https://s2.ax1x.com/2019/07/08/ZDRVC8.png" alt="ZDRVC8.png"></p><p>这里的<code>weather_client.exe</code>就是我们编译生成的可执行文件：<code>天气客户端</code>，双击就可以运行了。此外，<code>-lwsock32</code>参数上一节也有讲过，这个参数用于链接<code>windows</code>下socket编程必须的<code>winsock2</code>这个库。若是使用集成开发环境，则需要把<code>wsock32.lib</code>放在工程目录下，并在我们代码中<code>#include &lt;winsock2.h&gt;</code> 下面加上一行 <code>#pragma comment(lib, &quot;ws2_32.lib&quot;)</code>代码（在IDE里编译本人未验证，有兴趣的朋友可尝试）。</p><p>需要说明的是，Windows下默认是没有装gcc的，需要自己进行配置，关于配置及使用<code>mingw</code>（这是个工具包，里面包含有gcc编译器）可查看往期笔记：<a href="https://zhengnianli.github.io/2018/10/05/c-yu-yan-bi-ji-shi-yong-notepad-mingw-lai-kai-fa-c-cheng-xu/">【C语言笔记】使用notepad++、MinGW来开发C程序</a>、<a href="https://zhengnianli.github.io/2018/12/23/c-yu-yan-bi-ji-windows-ming-ling-xing-xia-bian-yi-c-cheng-xu/">【C语言笔记】windows命令行下编译C程序</a></p><h2 id="7、运行结果示例"><a href="#7、运行结果示例" class="headerlink" title="7、运行结果示例"></a>7、运行结果示例</h2><p><img src="https://s2.ax1x.com/2019/07/08/ZD4Vds.png" alt="ZD4Vds.png"></p><p>此处，只能使用拼音进行搜索，其实也可以做输入汉字进行搜索的功能，只是要进行转码处理，这个功能实现在<a href="https://zhengnianli.github.io/2019/06/20/zuo-pin-ji-yu-stm32-de-zhi-neng-tian-qi-yu-bao-xi-tong/">基于STM32的智能天气预报系统</a>的代码里已经有做，有兴趣的朋友可以参考这个。</p><h1 id="三、代码获取"><a href="#三、代码获取" class="headerlink" title="三、代码获取"></a>三、代码获取</h1><blockquote><p><a href="https://github.com/zhengnianli/WeatherClient" target="_blank" rel="noopener">https://github.com/zhengnianli/WeatherClient</a></p></blockquote><hr><p>我的个人博客网站为：<a href="https://zhengnianli.github.io">https://zhengnianli.github.io</a></p><p>我的微信公众号为：嵌入式大杂烩</p><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> socket笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> C语言 </tag>
            
            <tag> socket </tag>
            
            <tag> 网络编程 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【socket笔记】TCP、UDP通信总结</title>
      <link href="/2019/06/30/socket-bi-ji-tcp-udp-tong-xin-zong-jie/"/>
      <url>/2019/06/30/socket-bi-ji-tcp-udp-tong-xin-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是socket？"><a href="#一、什么是socket？" class="headerlink" title="一、什么是socket？"></a>一、什么是socket？</h1><p>Socket的英文原义是“孔”或“插座”。在编程中，Socket被称做<code>套接字</code>，是网络通信中的一种约定。Socket编程的应用无处不在，我们平时用的QQ、微信、浏览器等程序，都与Socket编程有关。我们平时使用浏览器查资料，这个过程的技术原理是怎样的呢？</p><p><img src="https://s2.ax1x.com/2019/07/01/Z3XNyn.png" alt="Z3XNyn.png"></p><p>我们平时使用浏览器，大致就是这样的一个过程。这里有两个重要的名词：<code>服务端</code>与<code>客户端</code>。</p><p>Socket编程的目的就是如何实现这两端之间的通信。</p><h2 id="1、Socket编程在嵌入式中也很重要"><a href="#1、Socket编程在嵌入式中也很重要" class="headerlink" title="1、Socket编程在嵌入式中也很重要"></a>1、Socket编程在嵌入式中也很重要</h2><p>Socket编程不仅仅在互联网方面很重要，在我们的嵌入式方面也是非常的重要，因为现在很多电子设备都趋向于联网。比如很多嵌入式工作的招聘要求都会有这一条要求：</p><p><img src="https://s2.ax1x.com/2019/06/30/Z1Kytg.png" alt="Z1Kytg.png"></p><p><img src="https://s2.ax1x.com/2019/06/30/Z1KoAU.png" alt="Z1KoAU.png"></p><p>说一点题外话，还在学校的朋友，如果感觉到很迷茫，不知道学什么的时候，可以上招聘网站上看看自己未来工作相关的职位的任职要求，这样就可以总结自己的一些不足、比较有针对性的去学习。</p><h1 id="二、Socket编程中的几个重要概念"><a href="#二、Socket编程中的几个重要概念" class="headerlink" title="二、Socket编程中的几个重要概念"></a>二、Socket编程中的几个重要概念</h1><p>Socket编程用于解决我们<code>客户端</code>与<code>服务端</code>之间通信的问题。我们平时多多少少都有听过IP地址、端口、TCP协议、UDP协议等概念，这些都与Socket编程中相关，想要知道怎么用起来，当然得先了解它们的一些介绍。下面看一下这些专业术语的一些要点介绍：</p><h2 id="1、什么是IP地址？"><a href="#1、什么是IP地址？" class="headerlink" title="1、什么是IP地址？"></a>1、什么是IP地址？</h2><p><code>IP地址（Internet Protocol Address）</code>是指互联网协议地址，又译为<code>网际协议地址</code>。IP地址被用来给Internet上的电脑一个编号。我们可以把“个人电脑”比作“一台电话”，那么“IP地址”就相当于“电话号码”。若计算机1知道计算机2的IP地址，则计算机1就能访问计算机2。</p><p>IP地址是一个32位的二进制数，通常被分割为4个“8位二进制数”（也就是4个字节）。IP地址通常用<code>点分十进制</code>表示成（a.b.c.d）的形式，其中，a,b,c,d都是0~255之间的十进制整数。例：点分十进IP地址（100.4.5.6），实际上是32位二进制数（01100100.00000100.00000101.00000110）。</p><p>IP地址有<code>IPv4</code>与<code>IPv6</code>之分，现在用得较多的是IPv4。其中，有一个特殊的IP地址需要我们记住：<code>127.0.0.1</code>，这是回送地址，即本地机，一般用来测试使用。后边我们的实例中会用到。</p><p>关于IP地址还有很多知识要点，但是对于在Socket编程中的应用，我们暂且知道这么多就可以。</p><h2 id="2、什么是TCP-IP端口？"><a href="#2、什么是TCP-IP端口？" class="headerlink" title="2、什么是TCP/IP端口？"></a>2、什么是TCP/IP端口？</h2><p>上一点中我们提到，若计算机1知道计算机2的IP地址，则计算机1就能访问计算机2。但是，我们要访问计算机2中的不同的应用软件，则还得需要一个信息：<code>端口</code>。端口使用16bit进行编号，即其范围为：<code>0~65536</code>。但<code>0~1023</code> 的端口一般由系统分配给特定的服务程序，例如 Web 服务的端口号为 80，FTP 服务的端口号为 21等。</p><h2 id="3、什么是协议？"><a href="#3、什么是协议？" class="headerlink" title="3、什么是协议？"></a>3、什么是协议？</h2><p>协议（Protocol）是通信双方进行数据交互的一种约定。如TCP、UDP协议：</p><h3 id="（1）TCP协议"><a href="#（1）TCP协议" class="headerlink" title="（1）TCP协议"></a>（1）TCP协议</h3><p>TCP（Transmission Control Protocol 传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议，数据可以准确发送，数据丢失会重发。TCP协议常用于web应用中。</p><h4 id="TCP连接（三次握手）"><a href="#TCP连接（三次握手）" class="headerlink" title="TCP连接（三次握手）"></a>TCP连接（三次握手）</h4><p>TCP传输起始时，客户端、服务端要完成三次数据交互工作才能建立连接，常称为<strong>三次握手</strong>。可形象比喻为如下对话：</p><blockquote><p>客户端：服务端您好，我有数据要发给你，请求您开通访问权限。</p><p>服务端：客户端您好，已给您开通权限，您可以发送数据了。</p><p>客户端：收到，谢谢。</p></blockquote><p>具体示意图为：</p><p><img src="https://s2.ax1x.com/2019/06/30/Z1UacT.png" alt="Z1UacT.png"></p><p>这里的SYN和ACK是都是标志位，其中SYN代表新建一个连接，ACK代表确认。其中m、n都是随机数。具体说明如：</p><ul><li>第一次握手：SYN标志位被置位，客户端向服务端发送一个随机数m。</li><li>第二次握手：ACK、SYN标志位被置位。服务端向客户端发送m+1表示确认刚才收到的数据，同时向客户端发送一个随机数n。</li><li>第三次握手：ACK标志被置位。客户端向服务端发送n+1表示确认收到数据。</li></ul><h4 id="TCP断开（四次挥手）"><a href="#TCP断开（四次挥手）" class="headerlink" title="TCP断开（四次挥手）"></a>TCP断开（四次挥手）</h4><p>TCP断开连接时，客户端、服务端要完成四次数据交互工作才能建立连接，常称为<strong>四次挥手</strong>。可形象比喻为如下对话：</p><blockquote><p>客户端：服务端您好，我发送数据完毕了，即将和您断开连接。</p><p>服务端：客户端您好，我稍稍准备一下，再给您断开</p><p>服务端：客户端您好，我准备好了，您可以断开连接了。</p><p>客户端：好的，合作愉快！</p></blockquote><p>具体示意图为：</p><p><img src="https://s2.ax1x.com/2019/06/30/Z1dxts.png" alt="Z1dxts.png"></p><p>这里的FIN也是一个标志位，代表断开连接。具体说明类似<strong>三次握手</strong>。</p><p><strong>为什么建立连接只需要三次数据交互，而断开连接需要四次呢？</strong></p><p>建立连接时，服务端在监听状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。</p><p>而关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送。</p><h3 id="（2）UDP协议"><a href="#（2）UDP协议" class="headerlink" title="（2）UDP协议"></a>（2）UDP协议</h3><p>UDP（User Datagram Protocol， 用户数据报协议）是一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务，可以保证通讯效率，传输延时小。例如视频聊天应用中用的就是UDP协议，这样可以保证及时丢失少量数据，视频的显示也不受很大影响。</p><h2 id="4、什么是协议族？"><a href="#4、什么是协议族？" class="headerlink" title="4、什么是协议族？"></a>4、什么是协议族？</h2><p>协议族是多个协议的统称。比如我们的TCP/IP协议族，其不仅仅是TCP协议、IP协议，而是多个协议的集合，其包含IP、TCP、UDP、FTP、SMTP等协议。</p><h1 id="三、socket编程的API接口"><a href="#三、socket编程的API接口" class="headerlink" title="三、socket编程的API接口"></a>三、socket编程的API接口</h1><h2 id="1、Linux下的socket-API接口"><a href="#1、Linux下的socket-API接口" class="headerlink" title="1、Linux下的socket API接口"></a>1、Linux下的socket API接口</h2><h3 id="（1）创建socket：socket-函数"><a href="#（1）创建socket：socket-函数" class="headerlink" title="（1）创建socket：socket()函数"></a>（1）创建socket：socket()函数</h3><p><strong>函数原型：</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> af<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>af参数：af 为地址族（Address Family），也就是 IP 地址类型，常用的有 AF_INET 和 AF_INET6，其前缀也可以是PF（Protocol  Family），即PF_INET 和 PF_INET6。</li><li>type参数：type 为数据传输方式，常用的有 面向连接（<code>SOCK_STREAM</code>）方式（即TCP） 和 无连接（<code>SOCK_DGRAM</code>）的方式（即UDP）。</li><li>protocol参数：protocol 表示传输协议，常用的有 <code>IPPROTO_TCP</code> 和 <code>IPPTOTO_UDP</code>，分别表示 TCP 传输协议和 UDP 传输协议。</li></ul><p><strong>使用示例：</strong></p><p>创建TCP套接字：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> tcp_socket <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> IPPROTO_TCP<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>创建UDP套接字：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> udp_socket <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> IPPROTO_UDP<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="（2）绑定套接字：bind-函数"><a href="#（2）绑定套接字：bind-函数" class="headerlink" title="（2）绑定套接字：bind()函数"></a>（2）绑定套接字：bind()函数</h3><p><strong>函数原型：</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> sock<span class="token punctuation">,</span> <span class="token keyword">struct</span> sockaddr <span class="token operator">*</span>addr<span class="token punctuation">,</span> socklen_t addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><ul><li>sock参数：sock 为 socket 文件描述符。</li><li>addr参数：addr 为 sockaddr 结构体变量的指针。</li><li>addrlen参数：addrlen 为 addr 变量的大小，可由 sizeof() 计算得出。</li></ul><p><strong>使用示例：</strong></p><p>将创建的套接字<code>ServerSock</code>与本地IP<code>127.0.0.1</code>、端口<code>1314</code>进行绑定：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 创建服务端socket */</span><span class="token keyword">int</span> ServerSock <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>PF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> IPPROTO_TCP<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 设置服务端信息 */</span><span class="token keyword">struct</span> sockaddr_in ServerSockAddr<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ServerSockAddr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ServerSockAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 给结构体ServerSockAddr清零</span>ServerSockAddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> PF_INET<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 使用IPv4地址</span>ServerSockAddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 本机IP地址</span>ServerSockAddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">1314</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 端口</span><span class="token comment" spellcheck="true">/* 绑定套接字 */</span><span class="token function">bind</span><span class="token punctuation">(</span>ServerSock<span class="token punctuation">,</span> <span class="token punctuation">(</span>SOCKADDR<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ServerSockAddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>SOCKADDR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中<code>struct sockaddr_in</code>类型的结构体变量用于保存IPv4的IP信息。若是IPv6，则有对应的结构体：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> sockaddr_in6 <span class="token punctuation">{</span>     sa_family_t sin6_family<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 地址类型，取值为AF_INET6</span>    in_port_t sin6_port<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 16位端口号</span>    uint32_t sin6_flowinfo<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// IPv6流信息</span>    <span class="token keyword">struct</span> in6_addr sin6_addr<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 具体的IPv6地址</span>    uint32_t sin6_scope_id<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 接口范围ID</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="（3）建立连接：connect-函数"><a href="#（3）建立连接：connect-函数" class="headerlink" title="（3）建立连接：connect()函数"></a>（3）建立连接：connect()函数</h3><p><strong>函数原型：</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> sock<span class="token punctuation">,</span> <span class="token keyword">struct</span> sockaddr <span class="token operator">*</span>serv_addr<span class="token punctuation">,</span> socklen_t addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><p>参数与<code>bind()</code>的参数类似。</p><p><strong>使用示例：</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> ClientSock <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> IPPROTO_TCP<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>ClientSock<span class="token punctuation">,</span> <span class="token punctuation">(</span>SOCKADDR<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ServerSockAddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>SOCKADDR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="（4）监听：listen-函数"><a href="#（4）监听：listen-函数" class="headerlink" title="（4）监听：listen()函数"></a>（4）监听：listen()函数</h3><p><strong>函数原型：</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token keyword">int</span> sock<span class="token punctuation">,</span> <span class="token keyword">int</span> backlog<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>sock参数：sock 为需要进入监听状态的套接字。</li><li>backlog参数：backlog 为请求队列的最大长度。</li></ul><p><strong>使用示例：</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 进入监听状态 */</span><span class="token function">listen</span><span class="token punctuation">(</span>ServerSock<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="（5）接收请求：accept-函数"><a href="#（5）接收请求：accept-函数" class="headerlink" title="（5）接收请求：accept()函数"></a>（5）接收请求：accept()函数</h3><p><strong>函数原型：</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">int</span> sock<span class="token punctuation">,</span> <span class="token keyword">struct</span> sockaddr <span class="token operator">*</span>addr<span class="token punctuation">,</span> socklen_t <span class="token operator">*</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>sock参数：sock 为服务器端套接字。</li><li>addr参数：addr 为 sockaddr_in 结构体变量。</li><li>addrlen参数：addrlen 为参数 addr 的长度，可由 sizeof() 求得。</li><li>返回值：一个新的套接字，用于与客户端通信。</li></ul><p><strong>使用示例：</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 监听客户端请求，accept函数返回一个新的套接字，发送和接收都是用这个套接字 */</span><span class="token keyword">int</span> ClientSock <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>ServerSock<span class="token punctuation">,</span> <span class="token punctuation">(</span>SOCKADDR<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ClientAddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="（6）关闭：close-函数"><a href="#（6）关闭：close-函数" class="headerlink" title="（6）关闭：close()函数"></a>（6）关闭：close()函数</h3><p><strong>函数原型：</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>fd：要关闭的文件描述符。</li></ul><p><strong>使用示例：</strong></p><pre class=" language-c"><code class="language-c"><span class="token function">close</span><span class="token punctuation">(</span>ServerSock<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="（7）数据的接收和发送"><a href="#（7）数据的接收和发送" class="headerlink" title="（7）数据的接收和发送"></a>（7）数据的接收和发送</h3><p>数据收发函数有几组：</p><ul><li>read()/write()</li><li>recv()/send()</li><li>readv()/writev()</li><li>recvmsg()/sendmsg()</li><li>recvfrom()/sendto()</li></ul><p>函数原型：</p><pre class=" language-c"><code class="language-c">ssize_t <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> size_t count<span class="token punctuation">)</span><span class="token punctuation">;</span>ssize_t <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> size_t count<span class="token punctuation">)</span><span class="token punctuation">;</span>ssize_t <span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> size_t len<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>ssize_t <span class="token function">recv</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> size_t len<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>ssize_t <span class="token function">sendto</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> size_t len<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span>                      <span class="token keyword">const</span> <span class="token keyword">struct</span> sockaddr <span class="token operator">*</span>dest_addr<span class="token punctuation">,</span> socklen_t addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>ssize_t <span class="token function">recvfrom</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> size_t len<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span>                        <span class="token keyword">struct</span> sockaddr <span class="token operator">*</span>src_addr<span class="token punctuation">,</span> socklen_t <span class="token operator">*</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>ssize_t <span class="token function">sendmsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> msghdr <span class="token operator">*</span>msg<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>ssize_t <span class="token function">recvmsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> msghdr <span class="token operator">*</span>msg<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里介绍一下recv()/send()、recvfrom()/sendto()。</p><p><strong>recv()函数：</strong></p><pre class=" language-c"><code class="language-c">ssize_t <span class="token function">recv</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> size_t len<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>sockfd参数：sockfd为要接收数据的套接字。</li><li>buf参数：buf 为要接收的数据的缓冲区地址。</li><li>len参数：len 为要接收的数据的字节数。</li><li>flags参数：flags 为接收数据时的选项，常设为0。</li></ul><p><strong>send()函数：</strong></p><pre class=" language-c"><code class="language-c">ssize_t <span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> size_t len<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>sockfd参数：sockfd为要发送数据的套接字。</li><li>buf参数：buf 为要发送的数据的缓冲区地址。</li><li>len参数：len 为要发送的数据的字节数。</li><li>flags参数：flags 为发送数据时的选项，常设为0。</li></ul><p><strong>recvfrom()函数：</strong></p><pre class=" language-c"><code class="language-c">ssize_t <span class="token function">recvfrom</span><span class="token punctuation">(</span><span class="token keyword">int</span> sock<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> size_t nbytes<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">struct</span> sockadr <span class="token operator">*</span>from<span class="token punctuation">,</span> socklen_t <span class="token operator">*</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>sock：用于接收UDP数据的套接字；</li><li>buf：保存接收数据的缓冲区地址；</li><li>nbytes：可接收的最大字节数（不能超过buf缓冲区的大小）；</li><li>flags：可选项参数，若没有可传递0；</li><li>from：存有发送端地址信息的sockaddr结构体变量的地址；</li><li>addrlen：保存参数 from 的结构体变量长度的变量地址值。</li></ul><p><strong>sendto()函数：</strong></p><pre class=" language-c"><code class="language-c">ssize_t <span class="token function">sendto</span><span class="token punctuation">(</span><span class="token keyword">int</span> sock<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> size_t nbytes<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">struct</span> sockaddr <span class="token operator">*</span>to<span class="token punctuation">,</span> socklen_t addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>sock：用于传输UDP数据的套接字；</li><li>buf：保存待传输数据的缓冲区地址；</li><li>nbytes：带传输数据的长度（以字节计）；</li><li>flags：可选项参数，若没有可传递0；</li><li>to：存有目标地址信息的 sockaddr 结构体变量的地址；</li><li>addrlen：传递给参数 to 的地址值结构体变量的长度。</li></ul><h2 id="2、windows下的socket-API接口"><a href="#2、windows下的socket-API接口" class="headerlink" title="2、windows下的socket API接口"></a>2、windows下的socket API接口</h2><p>跟Linux下的差不多：</p><pre class=" language-c"><code class="language-c">SOCKET <span class="token function">socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> af<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">bind</span><span class="token punctuation">(</span>SOCKET sock<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> sockaddr <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token keyword">int</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">connect</span><span class="token punctuation">(</span>SOCKET sock<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> sockaddr <span class="token operator">*</span>serv_addr<span class="token punctuation">,</span> <span class="token keyword">int</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">listen</span><span class="token punctuation">(</span>SOCKET sock<span class="token punctuation">,</span> <span class="token keyword">int</span> backlog<span class="token punctuation">)</span><span class="token punctuation">;</span>SOCKET <span class="token function">accept</span><span class="token punctuation">(</span>SOCKET sock<span class="token punctuation">,</span> <span class="token keyword">struct</span> sockaddr <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">closesocket</span><span class="token punctuation">(</span> SOCKET s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">send</span><span class="token punctuation">(</span>SOCKET sock<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">recv</span><span class="token punctuation">(</span>SOCKET sock<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>SOCKET sock<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">int</span> nbytes<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> sockaddr <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sendto</span><span class="token punctuation">(</span>SOCKET sock<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">int</span> nbytes<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> sockadr <span class="token operator">*</span>to<span class="token punctuation">,</span> <span class="token keyword">int</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3、TCP、UDP通信的socket编程过程图"><a href="#3、TCP、UDP通信的socket编程过程图" class="headerlink" title="3、TCP、UDP通信的socket编程过程图"></a>3、TCP、UDP通信的socket编程过程图</h2><p><strong>（1）TCP通信socket编程过程</strong></p><p><img src="https://s2.ax1x.com/2019/07/01/Z37yzq.png" alt="Z37yzq.png"></p><p><strong>（2）UDP通信socket编程过程</strong></p><p><img src="https://s2.ax1x.com/2019/07/01/Z372LT.png" alt="Z372LT.png"></p><h1 id="四、socket的应用实例"><a href="#四、socket的应用实例" class="headerlink" title="四、socket的应用实例"></a>四、socket的应用实例</h1><h2 id="1、基于TCP的本地客户端、服务端信息交互实例"><a href="#1、基于TCP的本地客户端、服务端信息交互实例" class="headerlink" title="1、基于TCP的本地客户端、服务端信息交互实例"></a>1、基于TCP的本地客户端、服务端信息交互实例</h2><p>本例的例子实现的功能为：本地TCP客户端往本地TCP服务端发送数据，TCP服务端收到数据则会打印输出，同时把原数据返回给TCP客户端。这个例子类似于我们在做单片机的串口实验时，串口上位机往我们的单片机发送数据，单片机收到数据则把该数据原样返回给上位机。</p><p><strong>（1）windows的程序：</strong></p><p><strong>服务端程序tcp_server.c：</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;winsock2.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> BUF_LEN  100</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    WSADATA wd<span class="token punctuation">;</span>    SOCKET ServerSock<span class="token punctuation">,</span> ClientSock<span class="token punctuation">;</span>    <span class="token keyword">char</span> Buf<span class="token punctuation">[</span>BUF_LEN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    SOCKADDR ClientAddr<span class="token punctuation">;</span>    SOCKADDR_IN ServerSockAddr<span class="token punctuation">;</span>    <span class="token keyword">int</span> addr_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> recv_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 初始化操作sock需要的DLL */</span>    <span class="token function">WSAStartup</span><span class="token punctuation">(</span><span class="token function">MAKEWORD</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>wd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* 创建服务端socket */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token punctuation">(</span>ServerSock <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> IPPROTO_TCP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"socket error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 设置服务端信息 */</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ServerSockAddr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ServerSockAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 给结构体ServerSockAddr清零</span>    ServerSockAddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 使用IPv4地址</span>    ServerSockAddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 本机IP地址</span>    ServerSockAddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">1314</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 端口</span>    <span class="token comment" spellcheck="true">/* 绑定套接字 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token function">bind</span><span class="token punctuation">(</span>ServerSock<span class="token punctuation">,</span> <span class="token punctuation">(</span>SOCKADDR<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ServerSockAddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>SOCKADDR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bind error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 进入监听状态 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token function">listen</span><span class="token punctuation">(</span>ServerSock<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"listen error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    addr_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>SOCKADDR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 监听客户端请求，accept函数返回一个新的套接字，发送和接收都是用这个套接字 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token punctuation">(</span>ClientSock <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>ServerSock<span class="token punctuation">,</span> <span class="token punctuation">(</span>SOCKADDR<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ClientAddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"socket error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 接受客户端的返回数据 */</span>        <span class="token keyword">int</span> recv_len <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>ClientSock<span class="token punctuation">,</span> Buf<span class="token punctuation">,</span> BUF_LEN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"客户端发送过来的数据为：%s\n"</span><span class="token punctuation">,</span> Buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 发送数据到客户端 */</span>        <span class="token function">send</span><span class="token punctuation">(</span>ClientSock<span class="token punctuation">,</span> Buf<span class="token punctuation">,</span> recv_len<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 关闭客户端套接字 */</span>        <span class="token function">closesocket</span><span class="token punctuation">(</span>ClientSock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 清空缓冲区 */</span>        <span class="token function">memset</span><span class="token punctuation">(</span>Buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> BUF_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*如果有退出循环的条件，这里还需要清除对socket库的使用*/</span>    <span class="token comment" spellcheck="true">/* 关闭服务端套接字 */</span>    <span class="token comment" spellcheck="true">//closesocket(ServerSock);</span>    <span class="token comment" spellcheck="true">/* WSACleanup();*/</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>客户端程序tcp_client.c：</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;winsock2.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> BUF_LEN  100</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    WSADATA wd<span class="token punctuation">;</span>    SOCKET ClientSock<span class="token punctuation">;</span>    <span class="token keyword">char</span> Buf<span class="token punctuation">[</span>BUF_LEN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    SOCKADDR_IN  ServerSockAddr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 初始化操作sock需要的DLL */</span>    <span class="token function">WSAStartup</span><span class="token punctuation">(</span><span class="token function">MAKEWORD</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>wd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* 向服务器发起请求 */</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ServerSockAddr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ServerSockAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ServerSockAddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    ServerSockAddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ServerSockAddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">1314</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 创建客户端socket */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token punctuation">(</span>ClientSock <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> IPPROTO_TCP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"socket error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token function">connect</span><span class="token punctuation">(</span>ClientSock<span class="token punctuation">,</span> <span class="token punctuation">(</span>SOCKADDR<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ServerSockAddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>SOCKADDR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"connect error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个字符串，发送给服务端："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">gets</span><span class="token punctuation">(</span>Buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 发送数据到服务端 */</span>        <span class="token function">send</span><span class="token punctuation">(</span>ClientSock<span class="token punctuation">,</span> Buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>Buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 接受服务端的返回数据 */</span>        <span class="token function">recv</span><span class="token punctuation">(</span>ClientSock<span class="token punctuation">,</span> Buf<span class="token punctuation">,</span> BUF_LEN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"服务端发送过来的数据为：%s\n"</span><span class="token punctuation">,</span> Buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>Buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> BUF_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 重置缓冲区</span>        <span class="token function">closesocket</span><span class="token punctuation">(</span>ClientSock<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 关闭套接字</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// WSACleanup();  </span><span class="token comment" spellcheck="true">/*如果有退出循环的条件，这里还需要清除对socket库的使用*/</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们上边的IP地址概念那一部分中，有强调<code>127.0.0.1</code>这个IP是一个特殊的IP地址，这是回送地址，即本地机，一般用来测试使用。这个例子中我们就用到了。此外，端口我们设置为<code>1314</code>，这是随意设置的，只要范围在<code>1024~65536</code>之间就可以。</p><p>本文使用的是gcc编译器编译（关于gcc编译器的相关介绍可查看往期笔记：<a href="https://zhengnianli.github.io/2018/10/05/c-yu-yan-bi-ji-shi-yong-notepad-mingw-lai-kai-fa-c-cheng-xu/">【C语言笔记】使用notepad++、MinGW来开发C程序</a>及<a href="https://zhengnianli.github.io/2018/12/23/c-yu-yan-bi-ji-windows-ming-ling-xing-xia-bian-yi-c-cheng-xu/">【C语言笔记】windows命令行下编译C程序</a>），编译命令如下：</p><pre class=" language-c"><code class="language-c">gcc tcp_client<span class="token punctuation">.</span>c <span class="token operator">-</span>o tcp_client<span class="token punctuation">.</span>exe <span class="token operator">-</span>lwsock32gcc tcp_server<span class="token punctuation">.</span>c <span class="token operator">-</span>o tcp_server<span class="token punctuation">.</span>exe <span class="token operator">-</span>lwsock32</code></pre><p>这里必须要加<code>-lwsock32</code>这个参数用于链接windows下socket编程必须的winsock2这个库。若是使用集成开发环境，则需要把<code>wsock32.lib</code>放在工程目录下，并在我们代码中<code>#include &lt;winsock2.h&gt;</code> 下面加上一行 <code>#pragma comment(lib, &quot;ws2_32.lib&quot;)</code>代码（这种情况本人未验证，有兴趣的朋友可尝试）。</p><p><strong>实验现象：</strong></p><p>先启动服务端程序<code>tcp_server.exe</code>，再启动客户端程序<code>tcp_client.exe</code>，并在客户端中输入字符串，则当服务端会接收到字符串时会打印输出，与此同时也会往客户端返回相同的数据：</p><p><img src="https://s2.ax1x.com/2019/06/30/Z1zBss.png" alt="Z1zBss.png"></p><p><strong>动图：</strong></p><p><img src="http://i65.tinypic.com/20t31iv.gif" alt="实验结果"></p><p><strong>（2）Linux的程序：</strong></p><p>在linux下，“一切都是文件”，所以这里我们的套接字也当做文件来看待。</p><p><strong>服务端程序linux_tcp_server.c：</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> BUF_LEN  100</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ServerFd<span class="token punctuation">,</span> ClientFd<span class="token punctuation">;</span>                    <span class="token keyword">char</span> Buf<span class="token punctuation">[</span>BUF_LEN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr ClientAddr<span class="token punctuation">;</span>    <span class="token keyword">int</span> addr_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> recv_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_in ServerSockAddr<span class="token punctuation">;</span>      <span class="token keyword">int</span> optval <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 创建服务端文件描述符 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token punctuation">(</span>ServerFd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> IPPROTO_TCP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"socket error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 设置服务端信息 */</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ServerSockAddr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ServerSockAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 给结构体ServerSockAddr清零</span>    ServerSockAddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 使用IPv4地址</span>    ServerSockAddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 自动获取IP地址</span>    ServerSockAddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 端口</span>    <span class="token comment" spellcheck="true">// 设置地址和端口号可以重复使用  </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setsockopt</span><span class="token punctuation">(</span>ServerFd<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_REUSEADDR<span class="token punctuation">,</span> <span class="token operator">&amp;</span>optval<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>optval<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"setsockopt error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 绑定操作，绑定前加上上面的socket属性可重复使用地址 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token function">bind</span><span class="token punctuation">(</span>ServerFd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ServerSockAddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bind error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 进入监听状态 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token function">listen</span><span class="token punctuation">(</span>ServerFd<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"listen error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    addr_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 监听客户端请求，accept函数返回一个新的套接字，发送和接收都是用这个套接字 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token punctuation">(</span>ClientFd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>ServerFd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ClientAddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr_len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"accept error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 接受客户端的返回数据 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>recv_len <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>ClientFd<span class="token punctuation">,</span> Buf<span class="token punctuation">,</span> BUF_LEN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"客户端发送过来的数据为：%s\n"</span><span class="token punctuation">,</span> Buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 发送数据到客户端 */</span>        <span class="token function">send</span><span class="token punctuation">(</span>ClientFd<span class="token punctuation">,</span> Buf<span class="token punctuation">,</span> recv_len<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 关闭客户端套接字 */</span>        <span class="token function">close</span><span class="token punctuation">(</span>ClientFd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 清空缓冲区 */</span>        <span class="token function">memset</span><span class="token punctuation">(</span>Buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> BUF_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>客户端程序linux_tcp_client.c：</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> BUF_LEN  100</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ClientFd<span class="token punctuation">;</span>    <span class="token keyword">char</span> Buf<span class="token punctuation">[</span>BUF_LEN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_in  ServerSockAddr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 向服务器发起请求 */</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ServerSockAddr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ServerSockAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ServerSockAddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    ServerSockAddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ServerSockAddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 创建客户端socket */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token punctuation">(</span>ClientFd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> IPPROTO_TCP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"socket error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 连接 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token function">connect</span><span class="token punctuation">(</span>ClientFd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ServerSockAddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ServerSockAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"connect error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个字符串，发送给服务端："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">gets</span><span class="token punctuation">(</span>Buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 发送数据到服务端 */</span>        <span class="token function">send</span><span class="token punctuation">(</span>ClientFd<span class="token punctuation">,</span> Buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>Buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>Buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> BUF_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 重置缓冲区</span>        <span class="token comment" spellcheck="true">/* 接受服务端的返回数据 */</span>        <span class="token function">recv</span><span class="token punctuation">(</span>ClientFd<span class="token punctuation">,</span> Buf<span class="token punctuation">,</span> BUF_LEN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"服务端发送过来的数据为：%s\n"</span><span class="token punctuation">,</span> Buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>Buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> BUF_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 重置缓冲区</span>        <span class="token function">close</span><span class="token punctuation">(</span>ClientFd<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 关闭套接字</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Linux下编译就不需要添加<code>-lwsock32</code>参数：</p><pre class=" language-c"><code class="language-c">gcc linux_tcp_server<span class="token punctuation">.</span>c <span class="token operator">-</span>o linux_tcp_servergcc linux_tcp_client<span class="token punctuation">.</span>c <span class="token operator">-</span>o linux_tcp_client</code></pre><p><strong>实验现象：</strong></p><p><img src="https://s2.ax1x.com/2019/07/01/Z34TAA.png" alt="Z34TAA.png"></p><p>在调试这份程序时，出现了绑定错误：</p><p><img src="https://s2.ax1x.com/2019/07/01/Z34z7j.png" alt="Z34z7j.png"></p><p>经上网查询发现是端口重复使用，可以在调用<code>bind()</code>函数之前调用<code>setsockopt()</code>函数以解决端口重复使用的问题：</p><p><img src="https://s2.ax1x.com/2019/07/01/Z35NEd.png" alt="Z35NEd.png"></p><h2 id="2、基于UDP的本地客户端、服务端信息交互实例"><a href="#2、基于UDP的本地客户端、服务端信息交互实例" class="headerlink" title="2、基于UDP的本地客户端、服务端信息交互实例"></a>2、基于UDP的本地客户端、服务端信息交互实例</h2><p><strong>（1）windows的程序</strong></p><p><strong>服务端程序udp_server.c：</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;winsock2.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> BUF_LEN  100</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    WSADATA wd<span class="token punctuation">;</span>    SOCKET ServerSock<span class="token punctuation">;</span>    <span class="token keyword">char</span> Buf<span class="token punctuation">[</span>BUF_LEN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    SOCKADDR ClientAddr<span class="token punctuation">;</span>    SOCKADDR_IN ServerSockAddr<span class="token punctuation">;</span>    <span class="token keyword">int</span> addr_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 初始化操作sock需要的DLL */</span>    <span class="token function">WSAStartup</span><span class="token punctuation">(</span><span class="token function">MAKEWORD</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>wd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* 创建服务端socket */</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token punctuation">(</span>ServerSock <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> IPPROTO_UDP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"socket error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 设置服务端信息 */</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ServerSockAddr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ServerSockAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 给结构体ServerSockAddr清零</span>    ServerSockAddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 使用IPv4地址</span>    ServerSockAddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 自动获取IP地址</span>    ServerSockAddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">1314</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 端口</span>    <span class="token comment" spellcheck="true">/* 绑定套接字 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>ServerSock<span class="token punctuation">,</span> <span class="token punctuation">(</span>SOCKADDR<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ServerSockAddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>SOCKADDR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bind error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    addr_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>SOCKADDR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 接受客户端的返回数据 */</span>        <span class="token keyword">int</span> str_len <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>ServerSock<span class="token punctuation">,</span> Buf<span class="token punctuation">,</span> BUF_LEN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ClientAddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr_size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"客户端发送过来的数据为：%s\n"</span><span class="token punctuation">,</span> Buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 发送数据到客户端 */</span>        <span class="token function">sendto</span><span class="token punctuation">(</span>ServerSock<span class="token punctuation">,</span> Buf<span class="token punctuation">,</span> str_len<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ClientAddr<span class="token punctuation">,</span> addr_size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 清空缓冲区 */</span>        <span class="token function">memset</span><span class="token punctuation">(</span>Buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> BUF_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*如果有退出循环的条件，这里还需要清除对socket库的使用*/</span>    <span class="token comment" spellcheck="true">/* 关闭服务端套接字 */</span>    <span class="token comment" spellcheck="true">//closesocket(ServerSock);</span>    <span class="token comment" spellcheck="true">/* WSACleanup();*/</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>客户端程序udp_client.c：</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;winsock2.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> BUF_LEN  100</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    WSADATA wd<span class="token punctuation">;</span>    SOCKET ClientSock<span class="token punctuation">;</span>    <span class="token keyword">char</span> Buf<span class="token punctuation">[</span>BUF_LEN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    SOCKADDR ServerAddr<span class="token punctuation">;</span>    SOCKADDR_IN  ServerSockAddr<span class="token punctuation">;</span>    <span class="token keyword">int</span> ServerAddrLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 初始化操作sock需要的DLL */</span>    <span class="token function">WSAStartup</span><span class="token punctuation">(</span><span class="token function">MAKEWORD</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>wd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* 创建客户端socket */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token punctuation">(</span>ClientSock <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> IPPROTO_UDP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"socket error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 向服务器发起请求 */</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ServerSockAddr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ServerSockAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ServerSockAddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> PF_INET<span class="token punctuation">;</span>    ServerSockAddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ServerSockAddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">1314</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ServerAddrLen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ServerAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个字符串，发送给服务端："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">gets</span><span class="token punctuation">(</span>Buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 发送数据到服务端 */</span>        <span class="token function">sendto</span><span class="token punctuation">(</span>ClientSock<span class="token punctuation">,</span> Buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>Buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ServerSockAddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ServerSockAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 接受服务端的返回数据 */</span>        <span class="token function">recvfrom</span><span class="token punctuation">(</span>ClientSock<span class="token punctuation">,</span> Buf<span class="token punctuation">,</span> BUF_LEN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ServerAddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ServerAddrLen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"服务端发送过来的数据为：%s\n"</span><span class="token punctuation">,</span> Buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>Buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> BUF_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 重置缓冲区</span>    <span class="token punctuation">}</span>    <span class="token function">closesocket</span><span class="token punctuation">(</span>ClientSock<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 关闭套接字</span>    <span class="token comment" spellcheck="true">// WSACleanup();  </span><span class="token comment" spellcheck="true">/*如果有退出循环的条件，这里还需要清除对socket库的使用*/</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>（2）Linux下的程序</strong></p><p><strong>服务端程序linux_udp_server.c：</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> BUF_LEN  100</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ServerFd<span class="token punctuation">;</span>    <span class="token keyword">char</span> Buf<span class="token punctuation">[</span>BUF_LEN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr ClientAddr<span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_in ServerSockAddr<span class="token punctuation">;</span>    <span class="token keyword">int</span> addr_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> optval <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 创建服务端socket */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token punctuation">(</span>ServerFd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> IPPROTO_UDP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"socket error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 设置服务端信息 */</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ServerSockAddr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ServerSockAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 给结构体ServerSockAddr清零</span>    ServerSockAddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 使用IPv4地址</span>    ServerSockAddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 自动获取IP地址</span>    ServerSockAddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">1314</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 端口</span>    <span class="token comment" spellcheck="true">// 设置地址和端口号可以重复使用  </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setsockopt</span><span class="token punctuation">(</span>ServerFd<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_REUSEADDR<span class="token punctuation">,</span> <span class="token operator">&amp;</span>optval<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>optval<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"setsockopt error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 绑定操作，绑定前加上上面的socket属性可重复使用地址 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token function">bind</span><span class="token punctuation">(</span>ServerFd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ServerSockAddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ServerSockAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bind error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    addr_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ClientAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 接受客户端的返回数据 */</span>        <span class="token keyword">int</span> str_len <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>ServerFd<span class="token punctuation">,</span> Buf<span class="token punctuation">,</span> BUF_LEN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ClientAddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr_size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"客户端发送过来的数据为：%s\n"</span><span class="token punctuation">,</span> Buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 发送数据到客户端 */</span>        <span class="token function">sendto</span><span class="token punctuation">(</span>ServerFd<span class="token punctuation">,</span> Buf<span class="token punctuation">,</span> str_len<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ClientAddr<span class="token punctuation">,</span> addr_size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 清空缓冲区 */</span>        <span class="token function">memset</span><span class="token punctuation">(</span>Buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> BUF_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>ServerFd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>客户端程序linux_udp_client.c：</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> BUF_LEN  100</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ClientFd<span class="token punctuation">;</span>    <span class="token keyword">char</span> Buf<span class="token punctuation">[</span>BUF_LEN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr ServerAddr<span class="token punctuation">;</span>    <span class="token keyword">int</span> addr_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_in  ServerSockAddr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 创建客户端socket */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token punctuation">(</span>ClientFd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> IPPROTO_UDP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"socket error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 向服务器发起请求 */</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ServerSockAddr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ServerSockAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ServerSockAddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> PF_INET<span class="token punctuation">;</span>    ServerSockAddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ServerSockAddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">1314</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    addr_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ServerAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个字符串，发送给服务端："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">gets</span><span class="token punctuation">(</span>Buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 发送数据到服务端 */</span>        <span class="token function">sendto</span><span class="token punctuation">(</span>ClientFd<span class="token punctuation">,</span> Buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>Buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ServerSockAddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ServerSockAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 接受服务端的返回数据 */</span>        <span class="token function">recvfrom</span><span class="token punctuation">(</span>ClientFd<span class="token punctuation">,</span> Buf<span class="token punctuation">,</span> BUF_LEN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ServerAddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr_size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"服务端发送过来的数据为：%s\n"</span><span class="token punctuation">,</span> Buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>Buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> BUF_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 重置缓冲区</span>    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>ClientFd<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 关闭套接字</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>实验现象：</strong></p><p>实验现象如实例1。</p><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>本笔记简单介绍了一些与socket编程相关的一些知识点：IP地址，什么是端口，协议等。重点介绍了TCP、UDP通信的一些原理及其API接口的用法，并给出了windows和linux下的TCP、UDP通信实例。以上就是关于socket编程的一些总结，如有错误，欢迎指出！</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> socket笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> socket </tag>
            
            <tag> 网络编程 </tag>
            
            <tag> TCP </tag>
            
            <tag> UDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于STM32的智能天气预报系统</title>
      <link href="/2019/06/20/zuo-pin-ji-yu-stm32-de-zhi-neng-tian-qi-yu-bao-xi-tong/"/>
      <url>/2019/06/20/zuo-pin-ji-yu-stm32-de-zhi-neng-tian-qi-yu-bao-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="1、作品介绍"><a href="#1、作品介绍" class="headerlink" title="1、作品介绍"></a>1、作品介绍</h2><p>首先，看一下作品的演示视频：</p><div align="center"><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=t0779besn7h" allowfullscreen width="600" height="400" align="center">天气预报系统</iframe></div><p>温馨提示：因为是进行人机对话演示，所以应打开音量观看哈。</p><p>这是本人的毕业设计，一个智能的天气预报系统。显示屏上显示各种天气指标及实时显示时间日期等。可以使用触摸屏输入城市名称搜索天气，也可以使用语音搜索天气。</p><h3 id="1-1-系统功能"><a href="#1-1-系统功能" class="headerlink" title="1.1 系统功能"></a>1.1 系统功能</h3><p>作品包含的的功能有：</p><p>（1）实时天气显示，温湿度显示，日历显示；</p><p>（2）收音机功能；</p><p>（3）人机对话功能。</p><p>系统框图如下：</p><p><a href="https://imgchr.com/i/ZkGtI0" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkGtI0.md.png" alt="ZkGtI0.md.png"></a></p><h3 id="1-2-系统GUI界面"><a href="#1-2-系统GUI界面" class="headerlink" title="1.2 系统GUI界面"></a>1.2 系统GUI界面</h3><p><strong>（1）主界面</strong></p><p><a href="https://imgchr.com/i/ZkG6d1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkG6d1.md.png" alt="ZkG6d1.md.png"></a></p><p>你没有看错，就是99℃，就是星期八。但这不是系统出错，而是本人故意设置的初始值，每当开机收到天气数据之后就可以看出有明显的变化。</p><p><strong>（2）菜单界面</strong></p><p><a href="https://imgchr.com/i/ZkGfzD" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkGfzD.md.png" alt="ZkGfzD.md.png"></a></p><p><strong>（3）wifi设置界面</strong></p><p><a href="https://imgchr.com/i/ZkGILd" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkGILd.md.png" alt="ZkGILd.md.png"></a></p><p>点击文本框会进入键盘界面，输入WiFi信息之后返回，再点击<code>Add</code>按钮即可发送WiFi名称与密码给控制器，控制器控制WiFi模块连接WiFi热点。</p><p><strong>（4）收音机界面</strong></p><p><a href="https://imgchr.com/i/ZkGTeA" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkGTeA.md.png" alt="ZkGTeA.md.png"></a></p><p>通过点击下方频率点跳到相应频率，再通过左右按钮调节频率至所需频率。</p><h2 id="2、作品实现"><a href="#2、作品实现" class="headerlink" title="2、作品实现"></a>2、作品实现</h2><h3 id="2-1-天气数据获取及解析"><a href="#2-1-天气数据获取及解析" class="headerlink" title="2.1 天气数据获取及解析"></a>2.1 天气数据获取及解析</h3><h3 id="2-1-1-天气数据从哪来？"><a href="#2-1-1-天气数据从哪来？" class="headerlink" title="2.1.1 天气数据从哪来？"></a>2.1.1 天气数据从哪来？</h3><p>天气数据可以从一些专门做天气预报的网站获取，如心知天气、和风天气等。本人选择的是心知天气</p><blockquote><p><a href="https://www.seniverse.com/" target="_blank" rel="noopener">https://www.seniverse.com/</a></p></blockquote><p>网站首页如下：</p><p><a href="https://imgchr.com/i/ZkJQFx" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkJQFx.md.png" alt="ZkJQFx.md.png"></a></p><p>我们是通过其<code>API密钥</code>才能获取得到其天气数据，而只有注册的用户才拥有API密钥，所以必须得注册，可以点击右上角进行注册。</p><h3 id="2-1-2-天气数据是什么格式？"><a href="#2-1-2-天气数据是什么格式？" class="headerlink" title="2.1.2 天气数据是什么格式？"></a>2.1.2 天气数据是什么格式？</h3><p>登录<code>心知天气</code>网站之后，点击菜单导航中的<code>数据-&gt;常规数据</code>即可查看<code>API文档</code>。在API文档页面的左侧可看到一些可查看的条目，如：</p><p><img src="https://s2.ax1x.com/2019/06/24/ZkJL7R.png" alt="ZkJL7R.png"></p><p>可点击<code>天气实况</code>查看其相关说明，可以看到其天气数据格式如下图所示：</p><p><a href="https://imgchr.com/i/ZkYS1O" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkYS1O.md.png" alt="ZkYS1O.md.png"></a></p><p>这就是JSON格式的数据，不了解JSON的朋友可查看上一篇笔记：<a href="https://zhengnianli.github.io/2019/06/15/json-de-jian-dan-ren-shi/">JSON的简单认识</a></p><h3 id="2-1-3-如何解析得到有用的数据？"><a href="#2-1-3-如何解析得到有用的数据？" class="headerlink" title="2.1.3 如何解析得到有用的数据？"></a>2.1.3 如何解析得到有用的数据？</h3><p>从上图中的JSON格式天气数据包中我们可以看出：我们需要用到的数据就是<code>冒号后面的字符串数据</code>，这些数据是我们需要获取并显示到屏幕上的数据。</p><p>那么，我们该怎么从这一堆JSON格式数据中解析出冒号后面的字符串呢？并且，这个系统是基于单片机的天气预报系统。而单片机使用C语言进行编程开发的，所以我们得使用C语言对这些JSON天气数据包进行解析。</p><p>其实，有一个专门解析JSON数据包的第三方C语言库。我们可以使用这个库进行解析，这个CJSON库的下载链接为：</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1DQynsdlNyIvsVXmf4W5b8Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1DQynsdlNyIvsVXmf4W5b8Q</a><br>提取码：ww4z </p></blockquote><p>只要把<code>cJSON.c</code>与<code>cJSON.ｈ</code>放到工程主程序所在目录，然后在主程序中包含头文件<code>JSON.ｈ</code>即可引入该库。如：</p><p><img src="https://s2.ax1x.com/2019/06/24/ZkBVlq.png" alt="ZkBVlq.png"></p><p>下面给出一个实例：</p><p><strong>测试代码：</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*----------------------------------------------------------------------------------------    Program Explain：解析JSON天气数据包now.json（天气实况）    Create Date：2017.12.6 by lzn----------------------------------------------------------------------------------------*/</span><span class="token comment" spellcheck="true">//1、数据来源：心知天气（api.seniverse.com）</span><span class="token comment" spellcheck="true">//2、获取方法：GET https://api.seniverse.com/v3/weather/now.json?key=2owqvhhd2dd9o9f9&amp;location=beijing&amp;language=zh-Hans&amp;unit=c</span><span class="token comment" spellcheck="true">//3、返回的数据范例见文件test.txt</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"cJSON.h"</span></span><span class="token comment" spellcheck="true">//函数声明</span><span class="token keyword">int</span> <span class="token function">cJSON_WeatherParse</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/********************************************************************************** Function Name    ： main主函数* Parameter           ： NULL* Return Value     ： 0 * Function Explain ： * Create Date      ： 2017.12.6 by lzn**********************************************************************************/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"now.txt"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Open error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> SEEK_END<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文件指针指向文件末尾</span>    len <span class="token operator">=</span> <span class="token function">ftell</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//求文件长度 </span>    <span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> SEEK_SET<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文件指针指向文件开头</span>    data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fread</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//printf("read file %s complete, len=%d.\n","now.txt",len);</span>    <span class="token function">cJSON_WeatherParse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//解析天气数据</span>    <span class="token function">free</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/********************************************************************************** Function Name    ： cJSON_WeatherParse,解析天气数据* Parameter           ： JSON：天气数据包  results：保存解析后得到的有用的数据* Return Value     ： 0：成功 其他:错误* Function Explain ： * Create Date      ： 2017.12.6 by lzn**********************************************************************************/</span><span class="token keyword">int</span> <span class="token function">cJSON_WeatherParse</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>JSON<span class="token punctuation">)</span><span class="token punctuation">{</span>    cJSON <span class="token operator">*</span>json<span class="token punctuation">,</span><span class="token operator">*</span>arrayItem<span class="token punctuation">,</span><span class="token operator">*</span>object<span class="token punctuation">,</span><span class="token operator">*</span>subobject<span class="token punctuation">,</span><span class="token operator">*</span>item<span class="token punctuation">;</span>    json <span class="token operator">=</span> <span class="token function">cJSON_Parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//解析JSON数据包</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>json <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//检测JSON数据包是否存在语法上的错误，返回NULL表示数据包无效</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error before: [%s]\n"</span><span class="token punctuation">,</span><span class="token function">cJSON_GetErrorPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印数据包语法错误的位置</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arrayItem <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span><span class="token string">"results"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//匹配字符串"results",获取数组内容</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">cJSON_GetArraySize</span><span class="token punctuation">(</span>arrayItem<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//获取数组中对象个数</span>            <span class="token comment" spellcheck="true">//printf("cJSON_GetArraySize: size=%d\n",size); </span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>object <span class="token operator">=</span> <span class="token function">cJSON_GetArrayItem</span><span class="token punctuation">(</span>arrayItem<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取父对象内容</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* 匹配子对象1 */</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>subobject <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token string">"location"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n-------------------------------location-----------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//匹配子对象1成员"id"</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                       <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s : %s\n"</span><span class="token punctuation">,</span>item<span class="token operator">-></span>string<span class="token punctuation">,</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//匹配子对象1成员"name"</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                     <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s : %s\n"</span><span class="token punctuation">,</span>item<span class="token operator">-></span>string<span class="token punctuation">,</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//匹配子对象1成员"country"</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"country"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s : %s\n"</span><span class="token punctuation">,</span>item<span class="token operator">-></span>string<span class="token punctuation">,</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//匹配子对象1成员"timezone"</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"timezone"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s : %s\n"</span><span class="token punctuation">,</span>item<span class="token operator">-></span>string<span class="token punctuation">,</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//匹配子对象1成员"timezone_offset"</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"timezone_offset"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s : %s\n"</span><span class="token punctuation">,</span>item<span class="token operator">-></span>string<span class="token punctuation">,</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">/* 匹配子对象2 */</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>subobject <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token string">"now"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"---------------------------------now-------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//匹配子对象2成员"text"</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s : %s\n"</span><span class="token punctuation">,</span>item<span class="token operator">-></span>string<span class="token punctuation">,</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//匹配子对象2成员"code"</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s : %s\n"</span><span class="token punctuation">,</span>item<span class="token operator">-></span>string<span class="token punctuation">,</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//匹配子对象2成员"temperature"</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"temperature"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                     <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s : %s\n"</span><span class="token punctuation">,</span>item<span class="token operator">-></span>string<span class="token punctuation">,</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//匹配子对象2成员"feels_like"</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"feels_like"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                     <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s : %s\n"</span><span class="token punctuation">,</span>item<span class="token operator">-></span>string<span class="token punctuation">,</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//匹配子对象2成员"pressure"</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"pressure"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                     <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s : %s\n"</span><span class="token punctuation">,</span>item<span class="token operator">-></span>string<span class="token punctuation">,</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//匹配子对象2成员"humidity"</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"humidity"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                     <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s : %s\n"</span><span class="token punctuation">,</span>item<span class="token operator">-></span>string<span class="token punctuation">,</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//匹配子对象2成员"visibility"</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"visibility"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                     <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s : %s\n"</span><span class="token punctuation">,</span>item<span class="token operator">-></span>string<span class="token punctuation">,</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//匹配子对象2成员"wind_direction"</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"wind_direction"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                     <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s : %s\n"</span><span class="token punctuation">,</span>item<span class="token operator">-></span>string<span class="token punctuation">,</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//匹配子对象2成员"wind_speed"</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"wind_speed"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                     <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s : %s\n"</span><span class="token punctuation">,</span>item<span class="token operator">-></span>string<span class="token punctuation">,</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//匹配子对象2成员"wind_scale"</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"wind_scale"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                     <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s : %s\n"</span><span class="token punctuation">,</span>item<span class="token operator">-></span>string<span class="token punctuation">,</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//匹配子对象2成员"clouds"</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"clouds"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                     <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s : %s\n"</span><span class="token punctuation">,</span>item<span class="token operator">-></span>string<span class="token punctuation">,</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//匹配子对象2成员"dew_point"</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>subobject<span class="token punctuation">,</span><span class="token string">"dew_point"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                     <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s : %s\n"</span><span class="token punctuation">,</span>item<span class="token operator">-></span>string<span class="token punctuation">,</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">/* 匹配子对象3 */</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>subobject <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token string">"last_update"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"----------------------------last_update----------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s : %s\n\n"</span><span class="token punctuation">,</span>subobject<span class="token operator">-></span>string<span class="token punctuation">,</span>subobject<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">cJSON_Delete</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//释放cJSON_Parse()分配出来的内存空间</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个测试程序会去读取我们工程目录下的    <code>now.txt</code>件，所以事先我们需要把JSON格式的天气预报数据复制到该文件中：</p><p><img src="https://s2.ax1x.com/2019/06/24/ZkNa79.png" alt="ZkNa79.png"></p><p>把    <code>now.txt</code>里面的数据读出并保存到<code>data</code>指向的动态内存中。然后再把<code>data</code>中的数据传入我们事先编写好的解析天气数据的函数<code>int cJSON_WeatherParse(char *JSON)</code>中进行解析，最后把解析之后的数据给到该函数的返回值即可。</p><p>解析函数里主要用到以下函数：<br><strong>1、cJSON_Parse函数</strong></p><pre class=" language-c"><code class="language-c">cJSON<span class="token operator">*</span><span class="token function">cJSON_Parse</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该函数用来解析JSON数据包，并按照cJSON结构体的结构序列化整个数据包。</p><p><strong>2、cJSON_GetObjectItem函数</strong></p><pre class=" language-c"><code class="language-c"><span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>cJSON <span class="token operator">*</span>object<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该函数可从cJSON结构体中查找某个子节点名称（键名称），如果查找成功可把该子节点序列化到cJSON结构体中。</p><p><strong>3、cJSON_GetArraySize函数</strong></p><pre class=" language-c"><code class="language-c"><span class="token function">cJSON_GetArraySize</span><span class="token punctuation">(</span><span class="token keyword">const</span> cJSON <span class="token operator">*</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该函数可获取数组中元素个数。</p><p><strong>4、cJSON_GetArrayItem函数</strong></p><pre class=" language-c"><code class="language-c"><span class="token function">cJSON_GetArrayItem</span><span class="token punctuation">(</span><span class="token keyword">const</span> cJSON <span class="token operator">*</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该函数可获取数组中的内容。</p><p><strong>5、cJSON_Delete函数</strong></p><pre class=" language-c"><code class="language-c"><span class="token function">cJSON_Delete</span><span class="token punctuation">(</span>cJSON <span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>该函数用来释放<code>cJSON_Parse</code>函数内部申请的堆内存。</p><p>我们的解析函数主要运用多次<code>cJSON_GetObjectItem</code>来匹配各对象成员，然后取出各个键值对的值<code>valuestring</code>。</p><p>该程序的运行结果如下：</p><p><a href="https://imgchr.com/i/ZkUiB4" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkUiB4.md.png" alt="ZkUiB4.md.png"></a></p><p>可见，解析完全正确！解析结果中冒号后面的数据就是我们可以选择使用的数据。这是解析当天的天气实况数据，解析未来几天的天气数据包或是其它天气数据包的方法都是类似的。</p><h2 id="2-2-显示部分"><a href="#2-2-显示部分" class="headerlink" title="2.2 显示部分"></a>2.2 显示部分</h2><h3 id="2-2-1-几类常用的显示屏"><a href="#2-2-1-几类常用的显示屏" class="headerlink" title="2.2.1 几类常用的显示屏"></a>2.2.1 几类常用的显示屏</h3><p>液晶显示屏的接口较为常见的有 3 种类型：<code>RGB 接口</code>，<code>MCU 总线接口</code>，<code>串口 HMI</code>。</p><p><strong>（1）RGB 接口</strong></p><p><a href="https://imgchr.com/i/ZkaSIA" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkaSIA.md.png" alt="ZkaSIA.md.png"></a></p><p>RGB 接口必须用在<code>带有RGB驱动的ARM芯片</code>上，一般的 ARM9 芯片有少许支持 RGB 的，ARM9 以上的芯片多数支持 RGB.但是此类接口的<code>驱动是最复杂</code>的，对<code>硬件要求也是最高</code>的。</p><p><strong>（2）MCU 总线接口</strong></p><p><a href="https://imgchr.com/i/Zkauin" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zkauin.md.png" alt="Zkauin.md.png"></a></p><p>MCU 总线接口驱动比 RGB 简单一些，对硬件也基本没有任何要求，简单的 MCU 就可以驱动。但是界面的显示<code>驱动工作量很大</code>。</p><p>总线型接口的屏只提供点阵的操作。图片，字符等任何显示内容都是通过取模数据，在屏幕上相应的位置把点阵一个一个的打出来。在此基础上再来实现人机界面的逻辑。工作量很大。</p><p><strong>（3）串口 HMI</strong></p><p><a href="https://imgchr.com/i/Zkawz6" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zkawz6.md.png" alt="Zkawz6.md.png"></a></p><p>串口HMI是一种新的显示方案。首先它跟MCU总线屏一样<code>对硬件没有任何要求</code>，其次。它<code>没有速度瓶颈</code>，因为界面的显示是设备内部自己实现的，用户MCU只是发送指令，并不需要底层驱动。</p><p>再次，针对显示的人机界面的布局和大多数的逻辑（比如界面背景，按钮效果，文本显示等）。全部都不需要用户的 MCU 参与，使用设备提供的上位软件，在电脑上点几下鼠标就完成了。制作好资源文件以后下载到屏幕即可自动运行，剩下的就是 USART 交互了。</p><h3 id="2-2-2-本系统的显示方案"><a href="#2-2-2-本系统的显示方案" class="headerlink" title="2.2.2 本系统的显示方案"></a>2.2.2 本系统的显示方案</h3><p>本系统选择的是<code>串口HMI</code>这一显示方案。因为这种方案确实是可以在短时间内设计出比较漂亮的GUI界面。GUI界面设计软件如下图：</p><p><a href="https://imgchr.com/i/Zkacod" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zkacod.md.png" alt="Zkacod.md.png"></a></p><p>这是串口屏商家给的配套的GUI设计软件，该软件的下载链接：</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1uYFhF412WVkk0FuqeOAGCg" target="_blank" rel="noopener">https://pan.baidu.com/s/1uYFhF412WVkk0FuqeOAGCg</a><br>提取码：e70r </p></blockquote><p>我们可以从左侧的工具箱里往工作区里拖拽需要用到的控件，常用的控件有文本控件、文字控件、按钮控件等。可在右侧的属性窗口设置控件的属性。可以通过选择不同的字库来设置不同的字体样式。</p><p>控件、页面的切换或则触发可能会产生相应的事件，可以通过代码来控制。其中，页面、控件的背景是可以上传本地的图片的，所以可以事先通过PS或则其他作图软件设计出精美的背景图片，然后再把控件都设置为透明色，最终地显示效果就可以达到很好的效果。</p><p>总之，可以很方便很容易设计出精美的GUI界面。同时，这个GUI设计软件还具有模拟真实的屏幕的功能，可以很方便地与用户MCU进行联调。仿真界面如图所示：</p><p><a href="https://imgchr.com/i/Zka5y8" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zka5y8.md.png" alt="Zka5y8.md.png"></a></p><p>进入模拟器界面，可在下方选择数据的输入方式为<code>用户MCU输入</code>，然后设置相应的串口号和波特率即可。还可以实时查看用户MCU传给模拟器的数据。</p><h2 id="2-3-与天气服务器通信"><a href="#2-3-与天气服务器通信" class="headerlink" title="2.3 与天气服务器通信"></a>2.3 与天气服务器通信</h2><p>每个问题的解决往往都不能一步到位，要把这个问题的所有关键点找出来，着手去解决这些关键点，最终问题自然会得到解决。</p><p>同样的，虽然我们最终是用单片机控制WiFi模块来获取天气数据的，但是我们首先应该确保在没有单片机的情况下能获取得到天气数据，确保能和天气服务器正常通信。只有这样，在使用单片机获取数据遇到问题时才知道出错的范围在哪，便于我们进行调试。下面，分享windows下与天气服务器通信的测试方法：</p><h3 id="2-3-1-所需的工具"><a href="#2-3-1-所需的工具" class="headerlink" title="2.3.1 所需的工具"></a>2.3.1 所需的工具</h3><p><code>网络调试助手</code>。本人使用的是<code>SocketTool</code>，<code>SocketTool</code>是一款小巧实用且功能强大的<code>TCP/UDP</code>网络通讯调试工具，可以帮助你检查网络应用软件及硬件的通讯情况，可以创建Socket服务器，如创建UDP组播地址及端口、创建UDP Client客户端、创建TCP Client、创建TCP Server。</p><p><a href="https://imgchr.com/i/ZkdbnO" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkdbnO.md.png" alt="ZkdbnO.md.png"></a></p><p>该工具下载链接为：</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1fgarl8xNb6nEAl3Ly0NQ3w" target="_blank" rel="noopener">https://pan.baidu.com/s/1fgarl8xNb6nEAl3Ly0NQ3w</a><br>提取码：np5v </p></blockquote><h3 id="2-3-2-测试方法"><a href="#2-3-2-测试方法" class="headerlink" title="2.3.2 测试方法"></a>2.3.2 测试方法</h3><p>（1）首先，使用<code>SocketTool</code>工具建立一个<code>TCP Client</code>，对方IP设为：<code>116.62.81.138</code>（这是心知天气服务器的IP地址），对方端口设为80。如：</p><p><img src="http://i67.tinypic.com/34eytmr.gif" alt="ZkweCn.md.gif"></p><p>怎么才能知道一个网站的IP呢？在DOS黑窗口下输入<code>ping+域名</code>即可得该域名对应的IP，如我们<code>ping</code>百度：</p><p><img src="https://s2.ax1x.com/2019/06/24/Zk08L8.png" alt="Zk08L8.png"></p><p><code>ping</code>是Windows、Unix和Linux系统下的一个命令，利用ping命令可以检查网络是否连通，可以很好地帮助我们分析和判定网络故障，该命令还可以加许多参数使用，具体是键入Ping按回车即可看到详细说明。</p><p>（2）发送HTTP请求，向心知天气服务器请求天气数据。HTTP有几种请求方法，我们这里使用的是GET请求：</p><blockquote><p>GET请求：从指定的资源请求数据。</p></blockquote><p>具体的请求方法示例为：</p><pre class=" language-c"><code class="language-c">GET https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>api<span class="token punctuation">.</span>seniverse<span class="token punctuation">.</span>com<span class="token operator">/</span>v3<span class="token operator">/</span>weather<span class="token operator">/</span>now<span class="token punctuation">.</span>json<span class="token operator">?</span>key<span class="token operator">=</span>2owqvhhd2dd9o9f9<span class="token operator">&amp;</span>location<span class="token operator">=</span>beijing<span class="token operator">&amp;</span>language<span class="token operator">=</span>zh<span class="token operator">-</span>Hans<span class="token operator">&amp;</span>unit<span class="token operator">=</span>c</code></pre><p>其中，GET后面的URL地址可以上心知天气查看，如：</p><p><a href="https://imgchr.com/i/Zk0EqO" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zk0EqO.md.png" alt="Zk0EqO.md.png"></a></p><p>URL中的几个参数是可以设置的：</p><blockquote><p>key：你的API密钥<br>location：所查询的地点<br>language：语言<br>unit：单位</p></blockquote><p>在<code>SocketTool</code>工具中发送<code>GET请求</code>（首先先得点击<code>连接</code>按钮进行连接），发送格式如下：</p><p><a href="https://imgchr.com/i/Zk0toQ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zk0toQ.md.png" alt="Zk0toQ.md.png"></a></p><p>需要注意的问题就是每个GET请求之后都需要空两行，这两个换行也是GET请求的一部分，所以在编写单片机代码时需要注意的是要在这个请求字符串后添加<code>\r\n\r\n</code>，表示换两行。</p><p>服务器返回的天气数据为：</p><p><a href="https://imgchr.com/i/Zk0dWn" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zk0dWn.md.png" alt="Zk0dWn.md.png"></a></p><p>看看服务器返回的数据，发现中文都是乱码。原因是获取得的天气数据是utf-8格式，必须转换为GBK格式中文才能正常显示。此处，我们只是测试与服务器是否能正常交互，测试结果显示有数据返回，说明通过以上的GET请求时可以获取到数据的。</p><p>在应用到单片机上时，还需要考虑的问题就是怎么把utf-8格式转换为GBK格式的问题，转换后中文才能正常显示在显示屏上。</p><h2 id="2-4-语音对话功能"><a href="#2-4-语音对话功能" class="headerlink" title="2.4 语音对话功能"></a>2.4 语音对话功能</h2><p>本系统人机对话功能采用了两个硬件模块：（1）语音识别模块：采用<code>LD3320</code>语音识别芯片；（2）语音合成模块：采用<code>SYN6288</code>语音合成芯片。</p><h3 id="2-4-1-语音识别"><a href="#2-4-1-语音识别" class="headerlink" title="2.4.1 语音识别"></a>2.4.1 语音识别</h3><p>本系统语音识别模块采用的语音芯片是LD3320。该芯片已经集成了语音识别的处理器，不需要外接其他的辅助芯片如Flash、 RAM 等，直接嵌入在现有的产品中就可以实现语音识别的功能。</p><p>语音识别的过程为：<br>（1）先预存要识别的关键词，如：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//-------------------------搜索天气-----------------------------------</span><span class="token macro property">#<span class="token directive keyword">define</span>  STR00  "xiao tian"                    </span><span class="token comment" spellcheck="true">// 小天</span><span class="token macro property">#<span class="token directive keyword">define</span>  STR01  "sou suo fu zhou tian qi"      </span><span class="token comment" spellcheck="true">// 搜索福州天气</span><span class="token macro property">#<span class="token directive keyword">define</span>  STR02  "sou suo shang hai tian qi"    </span><span class="token comment" spellcheck="true">// 搜索上海天气</span><span class="token macro property">#<span class="token directive keyword">define</span>  STR03  "sou suo shen zhen tian qi"    </span><span class="token comment" spellcheck="true">// 搜索深圳天气</span><span class="token macro property">#<span class="token directive keyword">define</span>  STR04  "sou suo bei jing tian qi"     </span><span class="token comment" spellcheck="true">// 搜索北京天气</span><span class="token macro property">#<span class="token directive keyword">define</span>  STR05  "sou suo guang zhou tian qi"   </span><span class="token comment" spellcheck="true">// 搜索广州天气</span><span class="token macro property">#<span class="token directive keyword">define</span>  STR06  "sou suo nan ning tian qi"     </span><span class="token comment" spellcheck="true">// 搜索南宁天气</span><span class="token macro property">#<span class="token directive keyword">define</span>  STR07  "sou suo xia men tian qi"      </span><span class="token comment" spellcheck="true">// 搜索厦门天气</span><span class="token macro property">#<span class="token directive keyword">define</span>  STR08  "sou suo quan zhou tian qi"    </span><span class="token comment" spellcheck="true">// 搜索泉州天气</span><span class="token macro property">#<span class="token directive keyword">define</span>  STR09  "sou suo pu tian tian qi"      </span><span class="token comment" spellcheck="true">// 搜索莆田天气</span><span class="token macro property">#<span class="token directive keyword">define</span>  STR10  "sou suo nan ping tian qi"     </span><span class="token comment" spellcheck="true">// 搜索南平天气</span></code></pre><p>可以预存50条关键词（关键句），本人已经把关键词写死在程序里了，这显然就不能灵活的面对各种场景。其实可以通过代码编写一个学习功能，即识别之前首先进行学习一些即将要识别的关键词，然后在进行识别演示，这样就可以应对比较多的场景。</p><p>但是，这样还是不够智能，毕竟只能识别已经预存的关键词（关键句），要是没有预存就没办法识别了。所以真正的语音识别应该是在软件算法上下功夫，关于语音识别已然成为热门的一大研究专题，这就属于人工智能的范畴吧。希望以后可以有机会接触这一块，如有接触再做学习分享~</p><p>（2）开始识别，如：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Task_ASR</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">switch</span><span class="token punctuation">(</span>nAsrStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">case</span> LD_ASR_RUNING<span class="token punctuation">:</span>       <span class="token keyword">case</span> LD_ASR_ERROR<span class="token punctuation">:</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token keyword">case</span> LD_ASR_NONE<span class="token punctuation">:</span>     nAsrStatus<span class="token operator">=</span>LD_ASR_RUNING<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">RunASR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//  启动一次ASR识别流程：ASR初始化，ASR添加关键词语，启动ASR运算</span>     <span class="token punctuation">{</span>           nAsrStatus <span class="token operator">=</span> LD_ASR_ERROR<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token keyword">case</span> LD_ASR_FOUNDOK<span class="token punctuation">:</span>     nAsrRes <span class="token operator">=</span> <span class="token function">LD_GetResult</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//  一次ASR识别流程结束，去取ASR识别结果  </span>     <span class="token function">ASRSuccess_Handle</span><span class="token punctuation">(</span>nAsrRes<span class="token punctuation">)</span><span class="token punctuation">;</span>     nAsrStatus <span class="token operator">=</span> LD_ASR_NONE<span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token keyword">case</span> LD_ASR_FOUNDZERO<span class="token punctuation">:</span>   <span class="token keyword">default</span><span class="token punctuation">:</span>     nAsrStatus <span class="token operator">=</span> LD_ASR_NONE<span class="token punctuation">;</span>       <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>nAsrStatus</code>是用来表示语音识别的状态，不是<code>LD3320</code>芯片内部的状态寄存器。<code>nAsrStatus</code>有几种情况。我们比较关注的是<code>LD_ASR_FOUNDOK</code>状态。<code>LD_ASR_FOUNDOK</code>状态为识别成功，识别成功后将调用<code>ASRSuccess_Handle</code>函数进行识别后的操作。</p><p>（3）识别成功则执行相应操作，如</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ASRSuccess_Handle</span><span class="token punctuation">(</span>uint8 asr_code<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n识别码:%d\n"</span><span class="token punctuation">,</span>asr_code<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> asr_code<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"我在，需要我的帮助吗？\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">TTSPlay</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[t3][2]我在,[2]需要[2]我的[3]帮助吗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   RunFlag <span class="token operator">=</span> TRUE<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>RunFlag<span class="token punctuation">)</span> <span class="token punctuation">{</span>   RunFlag <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 识别码0-10为搜索天气识别码 */</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>asr_code<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>asr_code<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>     <span class="token keyword">switch</span><span class="token punctuation">(</span>asr_code<span class="token punctuation">)</span>           <span class="token punctuation">{</span>       <span class="token keyword">case</span> CODE01<span class="token punctuation">:</span>               <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"“福州”命令识别成功\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">TTSPlay</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[t3][2]小天正在为您搜索福州天气"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">memcpy</span><span class="token punctuation">(</span>g_city<span class="token punctuation">,</span><span class="token string">"fujianfuzhou"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>g_place<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> CODE02<span class="token punctuation">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"“上海”命令识别成功\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">TTSPlay</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[t3][2]小天正在为您搜索上海天气"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token function">memcpy</span><span class="token punctuation">(</span>g_city<span class="token punctuation">,</span><span class="token string">"shanghai"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>g_place<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> CODE03<span class="token punctuation">:</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"“深圳”命令识别成功\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">TTSPlay</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[t3][2]小天正在为您搜索深圳天气"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">memcpy</span><span class="token punctuation">(</span>g_city<span class="token punctuation">,</span><span class="token string">"shenzhen"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>g_place<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> CODE04<span class="token punctuation">:</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"“北京”命令识别成功\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">TTSPlay</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[t3][2]小天正在为您搜索北京天气"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">memcpy</span><span class="token punctuation">(</span>g_city<span class="token punctuation">,</span><span class="token string">"beijing"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>g_place<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> CODE05<span class="token punctuation">:</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"“广州”命令识别成功\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">TTSPlay</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[t3][2]小天正在为您搜索广州天气"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">memcpy</span><span class="token punctuation">(</span>g_city<span class="token punctuation">,</span><span class="token string">"guangzhou"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>g_place<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> CODE06<span class="token punctuation">:</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"“南宁”命令识别成功\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">TTSPlay</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[t3][2]小天正在为您搜索南宁天气"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">memcpy</span><span class="token punctuation">(</span>g_city<span class="token punctuation">,</span><span class="token string">"nanning"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>g_place<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> CODE07<span class="token punctuation">:</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"“厦门”命令识别成功\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">TTSPlay</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[t3][2]小天正在为您搜索厦门天气"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">memcpy</span><span class="token punctuation">(</span>g_city<span class="token punctuation">,</span><span class="token string">"xiamen"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>g_place<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> CODE08<span class="token punctuation">:</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"“泉州”命令识别成功\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">TTSPlay</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[t3][2]小天正在为您搜索泉州天气"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">memcpy</span><span class="token punctuation">(</span>g_city<span class="token punctuation">,</span><span class="token string">"quanzhou"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>g_place<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> CODE09<span class="token punctuation">:</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"“莆田”命令识别成功\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">TTSPlay</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[t3][2]小天正在为您搜索莆田天气"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">memcpy</span><span class="token punctuation">(</span>g_city<span class="token punctuation">,</span><span class="token string">"putian"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>g_place<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> CODE10<span class="token punctuation">:</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"“南平”命令识别成功\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">TTSPlay</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[t3][2]小天正在为您搜索南平天气"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">memcpy</span><span class="token punctuation">(</span>g_city<span class="token punctuation">,</span><span class="token string">"nanping"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>g_place<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>weather_data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>weather_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">GET_NowWeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">GET_DailyWeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     GetWeatherTimer <span class="token operator">=</span> TIMER1_HOUR<span class="token punctuation">;</span>       <span class="token function">DisplayWeather</span><span class="token punctuation">(</span>weather_data<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">DisplayWeatherIcon</span><span class="token punctuation">(</span>weather_data<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span>   <span class="token punctuation">{</span>     <span class="token keyword">switch</span><span class="token punctuation">(</span>asr_code<span class="token punctuation">)</span>       <span class="token punctuation">{</span>       <span class="token keyword">case</span> CODE11<span class="token punctuation">:</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"“语音播报天气”命令识别成功\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>g_WeatherText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//          TTSPlay(0, (uint8_t*)g_WeatherText);</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> CODE12<span class="token punctuation">:</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"“今天的气温是多少”命令识别成功\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">default</span><span class="token punctuation">:</span>         <span class="token function">TTSPlay</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"语音识别失败，请对准麦克风说话！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-4-2-语音合成"><a href="#2-4-2-语音合成" class="headerlink" title="2.4.2 语音合成"></a>2.4.2 语音合成</h3><p>本系统的语音合成模块采用SYN6288语音合成芯片，支持文本直接转化为语音。其与单片机的通信方式为串口通信。向该模块发送以下格式的数据包：</p><blockquote><p>5字节帧头+文本+1字节校验，文本字节数小于等于200字节</p></blockquote><p>即可合成语音。代码如：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">TTSPlay</span><span class="token punctuation">(</span>uint8_t Music<span class="token punctuation">,</span>uint8_t <span class="token operator">*</span>Text<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/****************需要发送的文本**********************************/</span>  uint8_t DataPacket<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//</span> uint8_t Text_Len<span class="token punctuation">;</span>   uint8_t ecc  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义校验字节</span> uint8_t i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   Text_Len <span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//需要发送文本的长度</span> <span class="token comment" spellcheck="true">/*****************帧固定配置信息**************************************/</span>            DataPacket<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xFD</span> <span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//构造帧头FD</span> DataPacket<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x00</span> <span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//构造数据区长度的高字节</span> DataPacket<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> Text_Len <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//构造数据区长度的低字节</span> DataPacket<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x01</span> <span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//构造命令字：合成播放命令          </span> DataPacket<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x01</span> <span class="token operator">|</span> Music<span class="token operator">&lt;&lt;</span><span class="token number">4</span> <span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//构造命令参数：背景音乐设定</span> <span class="token comment" spellcheck="true">/*******************校验码计算***************************************/</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">//依次发送构造好的5个帧头字节</span> <span class="token punctuation">{</span>     ecc<span class="token operator">=</span>ecc<span class="token operator">^</span><span class="token punctuation">(</span>DataPacket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对发送的字节进行异或校验  </span> <span class="token punctuation">}</span> <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>Text_Len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//依次发送待合成的文本数据</span> <span class="token punctuation">{</span>     ecc<span class="token operator">=</span>ecc<span class="token operator">^</span><span class="token punctuation">(</span>Text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//对发送的字节进行异或校验    </span> <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/*******************发送帧信息***************************************/</span>       <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>DataPacket<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Text_Len<span class="token punctuation">)</span><span class="token punctuation">;</span> DataPacket<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">+</span>Text_Len<span class="token punctuation">]</span><span class="token operator">=</span>ecc<span class="token punctuation">;</span> <span class="token function">UART4_SendStr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>DataPacket<span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">+</span>Text_Len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>调用方式如：</p><pre class=" language-c"><code class="language-c"><span class="token function">TTSPlay</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"[t3][2]小天正在为您搜索福州天气"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3、最后"><a href="#3、最后" class="headerlink" title="3、最后"></a>3、最后</h2><p>以上就是关于该作品比较重要的一些内容的分享，由于篇幅太长其他功能不做介绍，有兴趣的朋友可以查看源码。源码链接：</p><blockquote><p><a href="https://github.com/zhengnianli/stm32_weather" target="_blank" rel="noopener">https://github.com/zhengnianli/stm32_weather</a></p></blockquote><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p><p>我的博客即将同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=oeilcfscuui4" target="_blank" rel="noopener">https://cloud.tencent.com/developer/support-plan?invite_code=oeilcfscuui4</a></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> STM32 </tag>
            
            <tag> 作品 </tag>
            
            <tag> 天气预报 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON的简单认识</title>
      <link href="/2019/06/15/json-de-jian-dan-ren-shi/"/>
      <url>/2019/06/15/json-de-jian-dan-ren-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="1、什么是JSON？"><a href="#1、什么是JSON？" class="headerlink" title="1、什么是JSON？"></a>1、什么是JSON？</h2><p><code>JSON（JavaScript Object Notation）</code>：JavaScript 对象表示法。其是一种<code>轻量级的数据交换格式</code>，简洁和清晰的层次结构使得其成为理想的<code>数据交换语言</code>。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。通常用于与服务端交换数据。如心知天气服务器中的一份JSON格式数据包为：</p><p><a href="https://imgchr.com/i/V5dsVf" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5dsVf.md.png" alt="V5dsVf.md.png"></a></p><p>JSON格式数据的例子如上图，重点注意其中有几种重要的符号如大括号<code>{}</code>、中括号<code>[]</code>、冒号与引号。下面详细介绍JSON格式数据的结构。JSON大致有三种结构：<code>JSON对象、JSON数组和JSON对象和数组嵌套</code>。</p><h2 id="2、JSON对象"><a href="#2、JSON对象" class="headerlink" title="2、JSON对象"></a>2、JSON对象</h2><p>JSON对象简单而言便是大括号<code>{}</code>里的<code>键值对</code>或<code>名值对</code>，而<code>值</code>可以是数值、字符串和布尔类型等。一个{}表示一个对象。</p><pre class=" language-c"><code class="language-c"><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"Fuzhou"</span></code></pre><p>这就是一个键值对，其中键为<code>name</code>，值为字符串<code>Fuzhou</code>，键和值使用冒号隔开。由此JSON对象格式可大致归纳为（图片来源于网络）：</p><p><a href="https://imgchr.com/i/V5dWxs" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5dWxs.md.png" alt="V5dWxs.md.png"></a></p><p>一个对象中可以有一个键值对，也可有多个键值对。如：</p><pre class=" language-c"><code class="language-c"><span class="token punctuation">{</span><span class="token string">"text"</span><span class="token punctuation">:</span><span class="token string">"Sunny"</span><span class="token punctuation">,</span><span class="token string">"code"</span><span class="token punctuation">:</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"temperature"</span><span class="token punctuation">:</span><span class="token string">"20"</span><span class="token punctuation">}</span></code></pre><p>这个对象中有三个键值对，每个键值对之间使用逗号隔开。对象里的键值对小编将其称作对象成员。</p><h2 id="3、JSON数组"><a href="#3、JSON数组" class="headerlink" title="3、JSON数组"></a>3、JSON数组</h2><p>JOSN数组的标志是中括号<code>[]</code>，<code>[]</code>中的对象就是数组元素。如</p><p><a href="https://imgchr.com/i/V5d7IU" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5d7IU.md.png" alt="V5d7IU.md.png"></a></p><p>这是一个JSON数组，其有一个对象（对象用{}包含起来），也即该数组有一个元素。</p><p>JSON格式的数据包就是由JSON对象与JSON数组互相嵌套组成的，即每个键值对中的值可能是数组也可能是对象，数组中有可能嵌套着对象，对象中又可能嵌套着键值对。</p><p>此外，从JSON的全称（JavaScript Object Notation）中就可以看得出来其主要应用于前端中的JavaScript之中。想更全面地了解JSON可移步至<a href="http://www.runoob.com/json/json-tutorial.html进行学习。同时推荐一篇关于JSON的CSDN博文：https://blog.csdn.net/xukai871105/article/details/32346797" target="_blank" rel="noopener">http://www.runoob.com/json/json-tutorial.html进行学习。同时推荐一篇关于JSON的CSDN博文：https://blog.csdn.net/xukai871105/article/details/32346797</a></p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSON </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】关于数组的一个陷阱！</title>
      <link href="/2019/06/03/c-yu-yan-bi-ji-guan-yu-shu-zu-de-yi-ge-xian-jing/"/>
      <url>/2019/06/03/c-yu-yan-bi-ji-guan-yu-shu-zu-de-yi-ge-xian-jing/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>两个数组元素的地址相减得到什么？</p></blockquote><p>先看一段代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;a[0] = %d, &amp;a[2] = %d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这段代码以十进制的形式打印出第0号元素的地址和第2号元素的地址，输出结果为：</p><pre class=" language-c"><code class="language-c"><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2686760</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2686768</span></code></pre><p>所以，<code>&amp;a[2] - &amp;a[0]</code>的结果是8？但是，事实不是这样的！！让我们把其结果打印出来：<br><a href="https://imgchr.com/i/VqAEbd" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/18/VqAEbd.md.png" alt="VqAEbd.md.png"></a><br>竟然是<code>2</code>！我们把<code>&amp;a[5] - &amp;a[2]</code>的结果输出来看看有什么规律：<br><a href="https://imgchr.com/i/VqA1Kg" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/18/VqA1Kg.md.png" alt="VqA1Kg.md.png"></a></p><h2 id="陷阱"><a href="#陷阱" class="headerlink" title="陷阱"></a>陷阱</h2><p>事实证明，两个数组元素的地址相减，其值并不是等于两个地址数值上的差，而是等于这两个地址之间内存单元的个数。本例中数组的类型是int类型，并且在32bit编译环境下编译，因此这里的内存单元的大小是4字节。所以本例中<code>&amp;a[2] - &amp;a[0]</code>的值为:</p><pre class=" language-c"><code class="language-c"><span class="token punctuation">(</span><span class="token number">2686768</span> <span class="token operator">-</span> <span class="token number">2686760</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4</span></code></pre><p>当然，若是低号元素地址减去高号元素地址，得到的结果是负数：<br><a href="https://imgchr.com/i/VqAUP0" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/18/VqAUP0.md.png" alt="VqAUP0.md.png"></a><br>网上看到了一篇博客也是印证了这一点：</p><pre class=" language-c"><code class="language-c">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span>harvic880925<span class="token operator">/</span>article<span class="token operator">/</span>details<span class="token operator">/</span><span class="token number">8953854</span></code></pre><p>这是个很容易出错的问题，需要特别注意！</p><h2 id="学以致用"><a href="#学以致用" class="headerlink" title="学以致用"></a>学以致用</h2><p>我们的<a href="https://zhengnianli.github.io/2019/06/01/c-bian-cheng-lian-xi-004/">C编程练习004</a>中的题目是</p><blockquote><p>寻找数组元素第一次出现的位置</p></blockquote><p>之前已经提供了两种方法，函数的返回值都是要寻找的元素的下标。这里可以稍微修改一下得到第三种方法，我们的第三种方法返回的是寻找的元素的指针：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 函数返回找到元素的指针</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">serch</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 已知数表的首元指针</span>          <span class="token keyword">int</span> n<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 数表中元素个数</span>          <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 要寻找的值</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> arr<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> arr<span class="token operator">+</span>n<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">==</span> key<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回找到元素的指针</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 未查找到key</span><span class="token punctuation">}</span></code></pre><h2 id="完整的验证代码为"><a href="#完整的验证代码为" class="headerlink" title="完整的验证代码为"></a>完整的验证代码为</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/********************************************************************************************************* 题    目: 同一个数组中两个元素的地址相减********************************************************************************************************/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment" spellcheck="true">// 函数返回找到元素的指针</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">serch</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 已知数表的首元指针</span>          <span class="token keyword">int</span> n<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 数表中元素个数</span>          <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 要寻找的值</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> arr<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> arr<span class="token operator">+</span>n<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">==</span> key<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回找到元素的指针</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 未查找到key</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义一个全局数组</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">999</span><span class="token punctuation">,</span><span class="token number">666</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 主函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> key<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p_a<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The elements of array a is:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\nPlease input the key number you want to search:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    p_a <span class="token operator">=</span> <span class="token function">serch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nThe index of the key number %d in the array is: %d."</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> p_a<span class="token operator">-</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>可见，得到的结果与我们的<a href="https://zhengnianli.github.io/2019/06/01/c-bian-cheng-lian-xi-004/">C编程练习004</a>中的验证结果一样。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux笔记】Windows与Linux文件互享</title>
      <link href="/2019/05/27/linux-bi-ji-windows-yu-linux-wen-jian-hu-chuan/"/>
      <url>/2019/05/27/linux-bi-ji-windows-yu-linux-wen-jian-hu-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h1><p>之前分享了Linux下vim编译器简单的使用方法：<a href="https://zhengnianli.github.io/2019/04/29/linux-bi-ji-vim-bian-ji-qi/">【Linux笔记】Vi/Vim编辑器</a>。如果觉得不习惯的话，也可以不用vim进行编辑。我们可以使用Windows上的一些编辑器先编辑好代码，然后再传到Linux下进行编译即可。那么，怎么实现Windows与Linux的文件互传呢?可以使用<code>samba</code>，也可以使用一些工具。本篇笔记分享的是一个可以实现Windows与Linux文件互传的工具：<code>WinSCP</code>。</p><h1 id="2、WinSCP工具"><a href="#2、WinSCP工具" class="headerlink" title="2、WinSCP工具"></a>2、WinSCP工具</h1><p><img src="https://s2.ax1x.com/2019/07/01/ZGp7xU.png" alt="ZGp7xU.png"></p><p>WinSCP是是一款开源的<code>SFTP</code>客户端，运行于系统下，遵照<code>GPL</code>发布。WinSCP除了SFTP，还支持<code>SSH、SCP</code>。WinSCP具有<code>FTP</code>的文件传输功能，又比FTP更加具有安全性。用户可在<code>SourceForge</code>网站下载。</p><p>也可在以下百度云链接进行下载：</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/12_qdcxiNkSI0nHgsW0yWWg" target="_blank" rel="noopener">https://pan.baidu.com/s/12_qdcxiNkSI0nHgsW0yWWg</a><br>提取码：szcb </p></blockquote><h1 id="3、Windows往Linux互传文件"><a href="#3、Windows往Linux互传文件" class="headerlink" title="3、Windows往Linux互传文件"></a>3、Windows往Linux互传文件</h1><p>Windows与Linux互传文件的前提是要保证Windows要能ping通Linux。首先，使用 <code>ifconfig</code>命令 查看Linux的IP：</p><p><img src="https://s2.ax1x.com/2019/07/01/ZG9eit.png" alt="ZG9eit.png"></p><p>然后在<code>Windows</code>命令行<code>ping</code>这个ip:</p><p><img src="http://i63.tinypic.com/kdvqiu.gif" alt></p><p>可以<code>ping</code>得通，说明网络是通的。如果ping不通，则可能是Linux的防火墙没有关，可以使用命令：</p><pre class=" language-c"><code class="language-c"><span class="token operator">/</span>etc<span class="token operator">/</span>init<span class="token punctuation">.</span>d<span class="token operator">/</span>iptables stop</code></pre><p>关闭防火墙。确保网络没问题之后，就可以使用<code>WinSCP</code>软件进行文件互传了。打开<code>WinSCP</code>软件，需要我们输入登录信息：<code>File protocol</code>选的是<code>SFTP</code>，<code>Host name</code>输入的是我们Linux系统的ip，<code>User name</code>和<code>Password</code>填的是登录Linux系统的用户，可以是普通用户，也可以是超级用户。</p><p><img src="https://s2.ax1x.com/2019/07/01/ZG9NWV.png" alt="ZG9NWV.png"></p><p>设置完成之后，就可以点击<code>Login</code>按钮进行登录：</p><p><img src="https://s2.ax1x.com/2019/07/01/ZG9wyF.png" alt="ZG9wyF.png"></p><p>可以看到，左边是我们的<code>Windows</code>目录，右边是我们的<code>Linux</code>目录，然后就可以使用拖拽的方式传输文件了，例如我们把<code>WindowsToLinux.txt</code>这个文件从Windows传到Linux下：</p><p><img src="http://i68.tinypic.com/14tvg2e.gif" alt></p><p><img src="https://s2.ax1x.com/2019/07/01/ZG9LSf.png" alt="ZG9LSf.png"></p><p>可见，已经传输成功。Linux往Windows传文件也是类似的。以上就是关于Windows与Linux互传的笔记，如有错误，欢迎指出！</p><hr><p>我的公众号：嵌入式大杂烩</p><p><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> Linux </tag>
            
            <tag> WinSCP </tag>
            
            <tag> 文件互享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux笔记】make工程管理工具（二）</title>
      <link href="/2019/05/18/linux-bi-ji-make-gong-cheng-guan-li-gong-ju-er/"/>
      <url>/2019/05/18/linux-bi-ji-make-gong-cheng-guan-li-gong-ju-er/</url>
      
        <content type="html"><![CDATA[<h1 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h1><p>上一篇笔记分享了使用make工具编译C程序的方法（<a href="https://zhengnianli.github.io/2019/05/15/linux-bi-ji-make-gong-cheng-guan-li-gong-ju-yi/">【Linux笔记】make工程管理工具（一）</a>），但是还未分享make工具是什么，本篇笔记就来看一下make工具是什么吧。</p><p>make和Makefile（或者makefile）文件提供了一种简单有效的工程管理方式。Makefile文件是一个决定着如何编译工程的文本，有一定的书写规则。make是一个GNU命令工具，用来解释Makefile文件中的命令来编译我们的工程。</p><h1 id="2、make工具"><a href="#2、make工具" class="headerlink" title="2、make工具"></a>2、make工具</h1><p><code>make</code> 是一个命令工具，是一个解释 <code>Makefile</code> 中指令的命令工具，一般来说，大多数的 IDE（集成开发环境） 都有这个命令，比如：<code>Delphi</code> 的 make，<code>Visual C++</code>的 nmake。但是在<code>Linux</code> 下一般不具有IDE，所以我们需要学会如何使用make工具来编译。</p><h1 id="2、Makefile文件的书写规范"><a href="#2、Makefile文件的书写规范" class="headerlink" title="2、Makefile文件的书写规范"></a>2、Makefile文件的书写规范</h1><p><code>Makefile</code>文件中最重要的是规则。规则的格式如下：</p><pre class=" language-c"><code class="language-c">target<span class="token punctuation">:</span>prerequisites     command</code></pre><p>其中，<code>target</code> 为目标，<code>prerequisites</code> 为依赖。<code>command</code> 为make需要执行的命令。</p><ul><li><p>目标：往往是程序的中间或者最终生成的文件名，比如目标文件、可执行文件等。</p></li><li><p>依赖：是指用来产生目标文件的输入文件名，一个目标往往依赖于一个或多个文件。</p></li><li><p>命令：是指任何一个文件发生改动之后，需要重新生成目标文件需要执行的命令，这里可以有多条命令，但是每个命令必须单独占一行，且需要注意的是，每个命令的前面必须有一个<code>&lt;tab键&gt;</code>，因为make是用过<tab>来识别命令行的，进而完成相应的动作。</tab></p></li></ul><p>例如，上一篇我们的笔记中为编译<code>hello.c</code>书写的<code>Makefile</code>文件如下：</p><p><img src="https://s2.ax1x.com/2019/07/01/Z87FtH.png" alt="Z87FtH.png"></p><p>其中，第<code>1、2</code>行为一条规则，第<code>4、5</code>行为一条规则，第<code>7、8</code>行为一条规则，第<code>10、11</code>行为一条规则，第<code>13、14</code>行为一条规则。</p><p>拿第<code>1、2</code>行这一条规则来举例说明， <code>hello</code> 为目标文件， <code>hello.o</code> 为依赖文件， <code>gcc hello.o -o hello</code> 为命令。除此之外，这个文件中， <code>#</code>符号后面是注释， <code>clean</code> 是一个特殊的目标，它没有依赖，称为<code>伪目标</code>。</p><p>规则是Makefile文件中的最基本的、也是最核心的部分。Makefile中还有其他内容。</p><p>Makefile文件主要包含5个方面内容：显示规则、隐式规则、变量、文件指示、注释、实目标与伪目标等。</p><p>（1）<code>显式规则</code>。显式规则说明了，如何生成一个或多的的目标文件。这是由 Makefile 的书写者明显指出，要生成的文件，文件的依赖文件，生成的命令。如</p><pre class=" language-c"><code class="language-c">hello<span class="token punctuation">:</span>hello<span class="token punctuation">.</span>o    gcc hello<span class="token punctuation">.</span>o <span class="token operator">-</span>o hello</code></pre><p>这就是一条显示规则。</p><p>（2）<code>隐式规则</code>。隐含规则是系统或用户预先定义好的一些特殊规则，主要是一些常用的依赖关系和更新命令。一般规则使用文件的全名，而隐含规则中出现的目标文件和依赖文件都只使用文件的扩展名。</p><p>如果Makefile 文件里面没有显式给出文件的依赖关系的时候，make 就会根据文件的扩展名找到相应的隐含规则，然后按照隐含规则来更新目标。隐式规则的例子是：</p><pre class=" language-c"><code class="language-c">hello<span class="token punctuation">:</span>hello<span class="token punctuation">.</span>o    $<span class="token punctuation">(</span>CC<span class="token punctuation">)</span> $<span class="token operator">^</span> <span class="token operator">-</span>o $@</code></pre><p>（3）<code>变量定义</code>。在 Makefile 中我们要定义一系列的变量，变量一般都是字符串，这个有点像 C 语言中的宏，当 Makefile 被执行时，其中的变量都会被扩展到相应的引用位置上。如：</p><p><img src="https://s2.ax1x.com/2019/07/01/Z87uB8.png" alt="Z87uB8.png"></p><p>其中 <code>CC</code> 为变量的定义， <code>$(CC)</code> 为变量的调用。 <code>$^</code>、 <code>$@</code>也是变量的调用，这两个变量是Makefile文件中最常用的变量（不需要自己定义），<code>$^</code> 代表当前规则中所有的依赖文件， <code>$@</code> 代表当前规则的目标文件。</p><p>（4）<code>文件指示</code>。其包括了三个部分，一个是在一个 Makefile 中引用另一个 Makefile，就像 C 语言中的 <code>include</code> 一样；另一个是指根据某些情况指定 Makefile 中的有效部分，就像 C 语言中的预编译<code>#if</code> 一样；还有就是定义一个多行的命令。</p><p>（5）<code>注释</code>。Makefile 中只有行注释，和 UNIX 的 <code>Shell</code> 脚本一样，其注释是用 <code>#</code> 字符，这个就像<code>C/C++</code>中的<code>//</code>一样。如果你要在你的Makefile 中使用<code>#</code>字符，可以用反斜框进行转义，如：<code>\#</code>。</p><p>（6）<code>实目标与伪目标</code>。Makefile 文件中的目标分为两类：实目标和伪目标。</p><p>实目标是真正要生成的以文件形式存放在磁盘上的目标。如：</p><pre class=" language-c"><code class="language-c">hello<span class="token punctuation">:</span>hello<span class="token punctuation">.</span>o    $<span class="token punctuation">(</span>CC<span class="token punctuation">)</span> $<span class="token operator">^</span> <span class="token operator">-</span>o $@ # 链接</code></pre><p>其中，<code>hello</code> 文件就是实目标；</p><p>而伪目标不要求生成实际的文件，它主要是用于完成一些辅助操作。如：</p><pre class=" language-c"><code class="language-c">clean<span class="token punctuation">:</span>    rm <span class="token operator">-</span>rf hello<span class="token punctuation">.</span>i hello<span class="token punctuation">.</span>s hello<span class="token punctuation">.</span>o hello # 删除编译生成文件</code></pre><p>其中的 <code>clean</code> 就是一个伪目标。我们在命令里面输入命令： <code>make clean</code> 就可以执行删除操作： <code>rm -rf hello.i hello.s hello.o hello</code> 。</p><p>但是这种书写形式不是很严谨，因为可能在当前目录下面存在文件名为 clean 的文件，因为这时候， 后面没有依赖文件，所以make 就认为这个文件是最新的，所以就不会执行 <code>rm -rf hello.i hello.s hello.o hello</code> 。所以为了避免这种情况的发生，所以建议使用这种写法：</p><pre class=" language-c"><code class="language-c"><span class="token punctuation">.</span>PHONY<span class="token punctuation">:</span>cleanclean<span class="token punctuation">:</span>    rm <span class="token operator">-</span>rf hello<span class="token punctuation">.</span>i hello<span class="token punctuation">.</span>s hello<span class="token punctuation">.</span>o hello # 删除编译生成文件</code></pre><p>使用 <code>.PHONY</code> 说明clean是一个伪目标。</p><h1 id="3、make是如何工作的？"><a href="#3、make是如何工作的？" class="headerlink" title="3、make是如何工作的？"></a>3、make是如何工作的？</h1><p>当我们只输入<code>make</code> 命令。那么：</p><p>（1）make 会在当前目录下找名字叫<code>Makefile</code>或<code>makefile</code>的文件。</p><p>（2）如果找到，它会找文件中的第一个目标文件（<code>target</code>），在上面的例子中，它会找到<code>hello</code>这个文件，并把这个文件作为最终的目标文件 。</p><p>（3）如果 <code>hello</code>文件不存在，或是<code>hello</code> 所依赖的后面的 <code>.o</code>文件，的文件修改时间要比 <code>hello</code> 这个文件新，那么，他就会执行后面所定义的命令来生成 hello 这个文件。<br>（4）如果<code>hello</code>所依赖的 <code>.o</code> 文件也存在，那么<code>make</code>会在当前文件中找目标为<code>.o</code>文件的依赖性，如果找到则再根据那一个规则生成<code>.o</code>文件。（这有点像一个堆栈的过程）<br>（5）当然，我们的<code>c</code>文件和<code>h</code> 文件是存在的啦，于是 <code>make</code> 会生成 <code>.o</code>文件，然后再用 <code>.o</code> 文件生命<code>make</code> 的终极任务，也就是执行文件 <code>hello</code>了。</p><p>这就是整个<code>make</code> 的依赖性，<code>make</code> 会一层又一层地去找文件的依赖关系，直到最终编译出第一个目标文件。在找寻的过程中，如果出现错误，比如最后被依赖的文件找不到，那么 make 就会直接退出，并报错，而对于所定义的命令的错误，或是编译不成功，make 根本不理。 </p><p>像<code>clean</code> 这种伪目标，没有被第一个目标文件直接或间接关联，那么它后面所定义的命令将不会被自动执行。</p><p>以上就是本次的笔记分享，主要介绍make工具、Makefile文件大概有哪些内容、make是如何工作的。如有错误，欢迎指出！</p><p>参考资料：</p><pre class=" language-c"><code class="language-c">《嵌入式Linux上的C语言编程实践》、https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>segmentfault<span class="token punctuation">.</span>com<span class="token operator">/</span>a<span class="token operator">/</span><span class="token number">1190000003756084</span>#articleHeader4、https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span>haoel<span class="token operator">/</span>article<span class="token operator">/</span>details<span class="token operator">/</span><span class="token number">2886</span></code></pre><p>如果你觉得对你有用的话，麻烦帮忙点个赞。如果你觉得对你的同学与朋友也有用的话，欢迎转发。</p><hr><p>我的公众号：嵌入式大杂烩</p><p><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> Linux </tag>
            
            <tag> make工具 </tag>
            
            <tag> makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux笔记】make工程管理工具（一）</title>
      <link href="/2019/05/15/linux-bi-ji-make-gong-cheng-guan-li-gong-ju-yi/"/>
      <url>/2019/05/15/linux-bi-ji-make-gong-cheng-guan-li-gong-ju-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="1、如何编译具有多个源码（-c文件）的工程"><a href="#1、如何编译具有多个源码（-c文件）的工程" class="headerlink" title="1、如何编译具有多个源码（.c文件）的工程"></a>1、如何编译具有多个源码（.c文件）的工程</h1><p>上一篇笔记写了如何使用<code>gcc</code>的编译命令编译：<a href="https://zhengnianli.github.io/2019/05/13/linux-bi-ji-linux-xia-bian-yi-c-yu-yan-cheng-xu/">【Linux笔记】Linux下编译C程序</a>。当源文件较少时，使用gcc编译命令编译就比较方便，在gcc编译命令中依次列出各个源文件就好，比如：</p><pre class=" language-c"><code class="language-c">gcc src1<span class="token punctuation">.</span>c src2<span class="token punctuation">.</span>c src3<span class="token punctuation">.</span>c src4<span class="token punctuation">.</span>c <span class="token operator">-</span>o src</code></pre><p>把<code>src1.c、src2.c、src3.c、src4.c</code>编译生成可执行文件<code>src</code> 。在Linux环境下，一般不具有集成开发环境（IDE），一般都是使用命令来编译。当源文件较少时，可以使用上面的方式进行编译。但是，如果我们的项目代码工程源文件很多，几十个，上百个，甚至上千上万个呢，那么该怎么进行编译呢？这时候，就可以使用工程管理文件——<code>Makefile（makefile）</code>文件对你的工程进行管理，然后使用<code>make</code>工具解释Makefile（makefile）文件中的指令（编译指令）进行我们的项目编译。</p><h1 id="2、怎么使用make工具来编译我们的C工程呢"><a href="#2、怎么使用make工具来编译我们的C工程呢" class="headerlink" title="2、怎么使用make工具来编译我们的C工程呢"></a>2、怎么使用make工具来编译我们的C工程呢</h1><p>平常，在技术的学习时，我习惯于先把要学的技术、原理用起来，再进一步去了解这个技术、原理，有进一步的学习之后，然后再进一步的去进行应用，即<code>用-&gt;学-&gt;用</code>。</p><p>所以，我们先看怎么用make工具的问题。当然，首先得想办法编写Makefile文件。在这之前，我们可以使用<code>make -v</code>命令查看我们当前系统是否具有make工具（本文使用的Linux发行版为红帽6）：</p><p><img src="https://s2.ax1x.com/2019/07/01/Z8IRHg.png" alt="Z8IRHg.png"></p><p>可见，我们系统的make工具版本是<code>3.81</code>。我们还是以上一篇笔记的例子，这次我们使用make编译我们的<code>hello</code>文件（输出<code>Hello World</code>是我们千年不变的目标，哈哈~）如下是我们编写的<code>Makefile</code>文件中的内容：</p><p><img src="https://s2.ax1x.com/2019/07/01/Z8I7vV.png" alt="Z8I7vV.png"></p><p>有了<code>Makefile</code>文件，我们就可以编译我们的<code>hello.c</code>文件了，如：</p><p><img src="https://s2.ax1x.com/2019/07/01/Z8IbuT.png" alt="Z8IbuT.png"></p><p>要注意的是我们Makefile文件中的命令前面空白是一个<code>【Tab】键</code>的长度，不能使用空格键代替，否则是会出错的，如：</p><p><img src="https://s2.ax1x.com/2019/07/01/Z8IXE4.png" alt="Z8IXE4.png"></p><p>再或者，想看到我们平时所说的“编译”各个过程，我们可以把Makefile文件修改成：</p><p><img src="https://s2.ax1x.com/2019/07/01/Z8oS81.png" alt="Z8oS81.png"></p><p>然后使用make工具进行解释：</p><p><img src="https://s2.ax1x.com/2019/07/01/Z8o9v6.png" alt="Z8o9v6.png"></p><p>其中，关于关于源文件至生成可执行文件经过哪几个过程，可查看往期笔记：</p><p><a href="https://zhengnianli.github.io/2018/10/14/c-yu-yan-bi-ji-c-yu-yan-bian-yi-de-guo-cheng/">【C语言笔记】C语言编译的过程</a></p><p>以上就是本篇笔记的分享，主要介绍如何使用make工具来编译我们的c工程如有错误，欢迎指出！关于make的内容很多，在之后的笔记中再具体地进行介绍！欢迎大家持续关注！如果你觉得对你有用的话，麻烦帮忙点个赞。如果你觉得对你的同学与朋友也有用的话，欢迎转发。</p><hr><p>我的公众号：嵌入式大杂烩</p><p><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> Linux </tag>
            
            <tag> make工具 </tag>
            
            <tag> makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux笔记】Linux下编译C语言程序</title>
      <link href="/2019/05/13/linux-bi-ji-linux-xia-bian-yi-c-yu-yan-cheng-xu/"/>
      <url>/2019/05/13/linux-bi-ji-linux-xia-bian-yi-c-yu-yan-cheng-xu/</url>
      
        <content type="html"><![CDATA[<p>在上一篇笔记中有分享Linux下的vi/vim编辑器的使用方法（<a href="https://zhengnianli.github.io/2019/04/29/linux-bi-ji-vim-bian-ji-qi/">【Linux笔记】Vi/Vim编辑器</a>），现在我们就可以使用vi/vim编辑器编写C代码了。那么写完代码该怎么进行编译呢？其实，和在Windows下使用命令行编译的方法是一样的。关于在Windows命令行下编译C程序的方法可查看往期笔记：<a href="https://zhengnianli.github.io/2018/12/23/c-yu-yan-bi-ji-windows-ming-ling-xing-xia-bian-yi-c-cheng-xu/">【C语言笔记】windows命令行下编译C程序</a>、<a href="https://zhengnianli.github.io/2018/10/05/c-yu-yan-bi-ji-shi-yong-notepad-mingw-lai-kai-fa-c-cheng-xu/">【C语言笔记】使用notepad++、MinGW来开发C程序</a>。</p><p>首先，使用命令<code>gcc -v</code>查看当前的Linux发行版是否有安装gcc编译器（PS：本文使用的Linux发行版是红帽6）：</p><p><img src="https://s2.ax1x.com/2019/07/01/Z84dKO.png" alt="Z84dKO.png"></p><p>使用vi/vim编辑器写代码并保存为<code>hello.c</code>：</p><p><img src="https://s2.ax1x.com/2019/07/01/Z84cGt.png" alt="Z84cGt.png"></p><p>然后使用<code>gcc</code>进行编译：</p><p><img src="https://s2.ax1x.com/2019/07/01/Z85kQK.png" alt="Z85kQK.png"></p><p>其中，编译生成的可执行文件默认为 <code>a.out</code> 。其中编译生成的 <code>a.out</code> 有时候是不具备可执行权限的，若是不具备执行权限，则可使用命令 <code>chmod 777 a.out</code> 。关于文件的权限修改的具体的方法可以查看往期笔记：<a href="https://zhengnianli.github.io/2019/04/29/linux-bi-ji-wen-jian-de-quan-xian/">【Linux笔记】文件的权限</a></p><p>编译时可以使用 <code>-o</code> 参数修改编译生成的可执行文件的名称。如：</p><p><img src="https://s2.ax1x.com/2019/07/01/Z85mod.png" alt="Z85mod.png"></p><p>以上就是在Linux下编译C程序的基本方法，适用于源文件不多的情况。后续的笔记中还会分享其他编译方法，欢迎持续关注！如果你觉得对你有用的话，麻烦帮忙点个赞。如果你觉得对你的同学与朋友也有用的话，欢迎转发。</p><p>在Linux下进行C语言编程的学习可能会增加学习的成本，但是从长远来看仍然是有必要的。若不想安装Linux系统，也想适应一下Linux环境，则可参考往期笔记：<a href="https://zhengnianli.github.io/2018/12/23/c-yu-yan-bi-ji-windows-xia-ti-yan-linux-huan-jing/">【C语言笔记】Windows下体验Linux环境</a>。</p><hr><p>我的公众号：嵌入式大杂烩</p><p><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】#运算符与##运算符</title>
      <link href="/2019/05/07/c-yu-yan-bi-ji-yun-suan-fu-yu-yun-suan-fu/"/>
      <url>/2019/05/07/c-yu-yan-bi-ji-yun-suan-fu-yu-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<h3 id="1、-运算符"><a href="#1、-运算符" class="headerlink" title="1、#运算符"></a>1、#运算符</h3><p>我们平时使用带参宏时，字符串中的宏参数是没有被替换的。例如：</p><p><a href="https://imgchr.com/i/VbbRo9" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/18/VbbRo9.md.png" alt="VbbRo9.md.png"></a></p><p>输出结果为：</p><p><a href="https://imgchr.com/i/VbbqdH" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/18/VbbqdH.md.png" alt="VbbqdH.md.png"></a></p><p>然而，我们期望输出的结果是：</p><pre class=" language-c"><code class="language-c"><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">20</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token number">13</span> <span class="token operator">+</span> <span class="token number">14</span> <span class="token operator">=</span> <span class="token number">27</span></code></pre><p>这该怎么做呢？其实，C语言允许在字符串中包含宏参数。在类函数宏（带参宏）中，<code>#号</code>作为一个<code>预处理运算符</code>，可以<code>把记号转换成字符串</code>。例如，如果A是一个宏形参，那么#A就是转换为字符串”A”的形参名。这个过程称为<code>字符串化（stringizing）</code>。以下程序演示这个过程：</p><p><a href="https://imgchr.com/i/Vbq9OS" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/18/Vbq9OS.md.png" alt="Vbq9OS.md.png"></a></p><p>输出结果为：</p><p><a href="https://imgchr.com/i/VbqiwQ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/18/VbqiwQ.md.png" alt="VbqiwQ.md.png"></a></p><p>这就达到我们想要的结果了。所以，<code>#运算符</code>可以完成<code>字符串化（stringizing）</code>的过程。</p><h3 id="2、-运算符"><a href="#2、-运算符" class="headerlink" title="2、##运算符"></a>2、##运算符</h3><p>与#运算符类似，<code>##运算符</code>可用于类函数宏（带参宏）的替换部分。<code>##运算符</code>可以把两个记号组合成一个记号。例如，可以这样做：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> XNAME(n) x##n</span></code></pre><p>然后，宏XNAME(4)将展开x4。以下程序演示##运算符的用法：</p><p><a href="https://imgchr.com/i/VbqEYn" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/18/VbqEYn.md.png" alt="VbqEYn.md.png"></a></p><p>输出结果为：</p><p><a href="https://imgchr.com/i/VbqdmD" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/18/VbqdmD.md.png" alt="VbqdmD.md.png"></a></p><p>注意：<code>PRINT_XN()</code>宏用<code>#运算符</code>组合字符串，<code>##运算符</code>把记号组合为一个新的标识符。</p><p>其实，<code>##运算符</code>在这里看来并没有起到多大的便利，反而会让我们感觉到不习惯。但是，使用<code>##运算符</code>有时候是可以提高封装性及程序的可读性的。如跑实时操作系统的stm32程序中，关于gpio的硬件驱动中有如下代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> __STM32_PIN(index, gpio, gpio_index) \{ \index, GPIO##gpio##_CLK_ENABLE, GPIO##gpio, GPIO_PIN_##gpio_index \}</span></code></pre><p>假设这样使用该宏：</p><pre class=" language-c"><code class="language-c"><span class="token function">__STM32_PIN</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> C<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span></code></pre><p>该宏将展开为：</p><pre class=" language-c"><code class="language-c"><span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> GPIOC_CLK_ENABLE<span class="token punctuation">,</span> GPIOC<span class="token punctuation">,</span> GPIO_PIN_13<span class="token punctuation">}</span></code></pre><p>然后这就可以很方便的将要使用的硬件引脚这么一一列出来，然后再拿去进行配置：</p><p><a href="https://imgchr.com/i/ZC60ij" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/23/ZC60ij.md.png" alt="ZC60ij.md.png"></a></p><p>以上就是关于#运算符与##运算符的笔记，用#运算符组合字符串，##运算符把记号组合为一个新的标识符。如有错误欢迎指出。资料：『RT-Thread-IoT代码』、『C Primer Plus』。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux笔记】系统目录结构</title>
      <link href="/2019/05/05/linux-bi-ji-xi-tong-mu-lu-jie-gou/"/>
      <url>/2019/05/05/linux-bi-ji-xi-tong-mu-lu-jie-gou/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 Linux 或 Unix 操作系统中，所有的文件和目录都被组织成以一个根节点开始的倒置的树状结构。文件系统的最顶层是由根目录开始的，系统使用 / 来表示根目录。在根目录之下的既可以是目录，也可以是文件，而每一个目录中又可以包含子目录文件。如此反复就可以构成一个庞大的文件系统。</p><p>在超级用户下，在根目录<code>/</code>下输入 <code>ls</code>命令，输出如下（本文演示使用的Linux发型版为：红帽企业版6）：</p><p><a href="https://imgchr.com/i/Zk6RYD" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zk6RYD.md.png" alt="Zk6RYD.md.png"></a></p><h3 id="bin目录"><a href="#bin目录" class="headerlink" title="/bin目录"></a>/bin目录</h3><p>bin是Binary的缩写, 这个目录存放着最经常使用的命令。如：</p><p><a href="https://imgchr.com/i/Zk6hSH" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zk6hSH.md.png" alt="Zk6hSH.md.png"></a></p><p>我们常用的 cat 、cp 、find等命令就是在这个目录下。/bin下的命令可以被root与一般账号所使用。</p><h3 id="cgroup目录"><a href="#cgroup目录" class="headerlink" title="/cgroup目录"></a>/cgroup目录</h3><p>rhel6为内核准备了一个新特性：资源控制。此服务的软件包是libcgroup。有了这个，我们就可以分配资源，例如：CPU time,系统内存, 网络带宽等。如：</p><p><a href="https://imgchr.com/i/ZkckhF" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkckhF.md.png" alt="ZkckhF.md.png"></a></p><h3 id="etc目录"><a href="#etc目录" class="headerlink" title="/etc目录"></a>/etc目录</h3><p>这个目录用来存放所有的系统管理所需要的配置文件和子目录。如：</p><p><a href="https://imgchr.com/i/Zkc1hD" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zkc1hD.md.png" alt="Zkc1hD.md.png"></a></p><p>用户的的账户文件、 各种服务的启始档等配置文件就是在这个目录下。一般来说，这个目录下的各文件属性是可以让一般使用者查阅的，但是只有 root 有权力修改。</p><h3 id="lib目录"><a href="#lib目录" class="headerlink" title="/lib目录"></a>/lib目录</h3><p>这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。如：</p><p><a href="https://imgchr.com/i/Zkc44U" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zkc44U.md.png" alt="Zkc44U.md.png"></a></p><h3 id="media目录"><a href="#media目录" class="headerlink" title="/media目录"></a>/media目录</h3><p>media是的英文意思是『媒体』，顾名思义，/media底下存放的就是可移除的设备，例如U盘、光驱等等，当识别后，Linux会把识别的设备挂载到这个目录下。这个目录默认是空的。</p><h3 id="mnt目录"><a href="#mnt目录" class="headerlink" title="/mnt目录"></a>/mnt目录</h3><p>如果想要暂时挂载某些额外的设备，一般建议可以存放到这个目录中。 在早些时候，这个目录的用途与/media相同，只是有了/media之后，这个目录就用来暂时挂载用了。这个目录默认是空的。</p><h3 id="opt目录"><a href="#opt目录" class="headerlink" title="/opt目录"></a>/opt目录</h3><p>这是给主机额外安装软件（第三方软件）所摆放的目录。什么是第三方软件？第三方软件就是非原系统提供的。比如你要安装KDE这个桌面管理系统，则KDE桌面管理系统就安装到这个目录下。这个目录默认是空的。</p><h3 id="root目录"><a href="#root目录" class="headerlink" title="/root目录"></a>/root目录</h3><p>该目录为系统管理员（超级用户）的用户主目录。</p><p><a href="https://imgchr.com/i/ZkcICF" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkcICF.md.png" alt="ZkcICF.md.png"></a></p><h3 id="selinux目录"><a href="#selinux目录" class="headerlink" title="/selinux目录"></a>/selinux目录</h3><p>/selinux是Secure Enhance Linux(SELinux)的执行目录，这是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，这个目录就是存放selinux相关的文件的。</p><p><a href="https://imgchr.com/i/ZkcTgJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkcTgJ.md.png" alt="ZkcTgJ.md.png"></a></p><h3 id="sys目录"><a href="#sys目录" class="headerlink" title="/sys目录"></a>/sys目录</h3><p>这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs ，这是一个虚拟的文件系统，主要是记录与内核相关的信息。 包括目前已加载的内核模块与内核侦测到的硬件设备信息等。这个目录下的数据都是在内存当中， 所以本身不占任何硬盘空间。</p><p><a href="https://imgchr.com/i/ZkcqD1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkcqD1.md.png" alt="ZkcqD1.md.png"></a></p><h3 id="usr目录"><a href="#usr目录" class="headerlink" title="/usr目录"></a>/usr目录</h3><p>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下。usr 并不是user的缩写，而是Unix Software Resource的缩写， 也就是『Unix操作系统软件资源』所存放的目录。类似于windows下的program files目录。这个目录有点类似Windows系统的『C:\Windows\ + C:\Program files\』这两个目录的综合体，这个目录会占用最多的硬盘容量。</p><p><a href="https://imgchr.com/i/ZkcXE6" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkcXE6.md.png" alt="ZkcXE6.md.png"></a></p><h3 id="boot目录"><a href="#boot目录" class="headerlink" title="/boot目录"></a>/boot目录</h3><p>这里存放的是启动Linux时使用的一些核心文件，包括Linux核心文件以及开机选单与开机所需配置文件等等。Linux kernel常用的文件名为：vmlinuz，如果使用的是grub这个开机管理程序，则还会存在/boot/grub/这个目录。如：</p><p><a href="https://imgchr.com/i/ZkcjUK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkcjUK.md.png" alt="ZkcjUK.md.png"></a></p><h3 id="dev目录"><a href="#dev目录" class="headerlink" title="/dev目录"></a>/dev目录</h3><p>dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。 我们只要通过存取这个目录底下的某个文件，就等于存取某个设备。</p><p><a href="https://imgchr.com/i/Zkcv4O" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zkcv4O.md.png" alt="Zkcv4O.md.png"></a></p><h3 id="home目录"><a href="#home目录" class="headerlink" title="/home目录"></a>/home目录</h3><p>用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。如：</p><p><a href="https://imgchr.com/i/ZkgS8e" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkgS8e.md.png" alt="ZkgS8e.md.png"></a></p><h3 id="lost-found目录"><a href="#lost-found目录" class="headerlink" title="/lost+found目录"></a>/lost+found目录</h3><p>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p><h3 id="misc目录"><a href="#misc目录" class="headerlink" title="/misc目录"></a>/misc目录</h3><p>misc是 miscellaneous 的缩写，即混杂的。默认为空，供管理员堆放公共杂物，默认权限是全部用户可读取、可执行文件，但只有管理员才能写入文件。</p><h3 id="proc目录"><a href="#proc目录" class="headerlink" title="/proc目录"></a>/proc目录</h3><p>/proc 这个目录本身是一个虚拟文件系统(virtual filesystem)，他存放的 数据都是在内存当中， 例如系统内核、进程信息(process)、周边设备的状态及网络状态等。因为这个目录下的数据都是在内存当中， 所以本身不占任何硬盘空间。</p><p><a href="https://imgchr.com/i/ZkgAVP" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkgAVP.md.png" alt="ZkgAVP.md.png"></a></p><h3 id="sbin目录"><a href="#sbin目录" class="headerlink" title="/sbin目录"></a>/sbin目录</h3><p>sbin就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</p><p><a href="https://imgchr.com/i/Zkgn2Q" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zkgn2Q.md.png" alt="Zkgn2Q.md.png"></a></p><p>如关机命令poweroff、重启命令reboot等命令就是在这个目录下。</p><h3 id="srv目录"><a href="#srv目录" class="headerlink" title="/srv目录"></a>/srv目录</h3><p>srv是 service 的缩写，是一些网络服务启动之后，这些服务所需要取用的数据目录。</p><h3 id="tmp目录"><a href="#tmp目录" class="headerlink" title="/tmp目录"></a>/tmp目录</h3><p>这个目录是用来存放一些临时文件的，所以需要经常清理。</p><p><a href="https://imgchr.com/i/Zkg3V0" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zkg3V0.md.png" alt="Zkg3V0.md.png"></a></p><h3 id="var目录"><a href="#var目录" class="headerlink" title="/var目录"></a>/var目录</h3><p>这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p><p><a href="https://imgchr.com/i/ZkgdM9" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkgdM9.md.png" alt="ZkgdM9.md.png"></a></p><p>以上就是关于红帽企业版6的系统目录结构的笔记，如有错误欢迎指出。不同的Linux发行版的目录结构会有微小的差异，但大部分目录都是一样的。</p><hr><p><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png">](<a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener">https://imgchr.com/i/VcSFJJ</a>)</p>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux笔记】文件的权限</title>
      <link href="/2019/04/29/linux-bi-ji-wen-jian-de-quan-xian/"/>
      <url>/2019/04/29/linux-bi-ji-wen-jian-de-quan-xian/</url>
      
        <content type="html"><![CDATA[<p>Linux是多用户操作系统，不同的用户对于文件的操作拥有不同的权限。我们可以使用 <code>ls -l</code> 命令列出当前目录下的文件及目录的详细信息：<br><a href="https://imgchr.com/i/ZkWS8U" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkWS8U.md.png" alt="ZkWS8U.md.png"></a></p><p>我们重点看前10个字符，如<code>hello</code>文件详细信息中的前10个字符为 <code>-rw-rw-rw-</code> 。这10个字符的说明为：<br><a href="https://imgchr.com/i/ZkWPKJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkWPKJ.md.png" alt="ZkWPKJ.md.png"></a></p><p>其中，第一个字符表示这个对象的类型，如：</p><pre class=" language-c"><code class="language-c">为 d 则是目录为 <span class="token operator">-</span> 则是文件；为 l 则是链接文档<span class="token punctuation">(</span>link file<span class="token punctuation">)</span>；为 b 则表示为装置文件里面的可供储存的接口设备<span class="token punctuation">(</span>可随机存取装置<span class="token punctuation">)</span>；为 c 则表示为装置文件里面的串行端口设备，例如键盘、鼠标<span class="token punctuation">(</span>一次性读取装置<span class="token punctuation">)</span>。</code></pre><p>后面的9个字符，每3个字符为一组，且为 『rwx』的组合，且权限的顺序是固定的。其中<code>r</code>代表读权限，<code>w</code>代表写权限，<code>x</code>代表执行权限，若没有哪一个权限，则用<code>-</code> 替代相应的位置。</p><p>第2-4个字符确定属主（该文件的所有者）拥有该文件的权限。第5-7个字符确定属组（所有者的同组用户）拥有该文件的权限。第8-10个字符确定其他用户拥有该文件的权限。</p><p>所以以上的<code>hello</code>的前10个字符<code>-rw-rw-rw-</code>代表的意思为：<code>hello</code>是个文件；<code>hello</code>的属主具有读、写权限，没有执行权限；<code>hello</code>的属组具有读、写权限，没有执行权限；其他用户组对与<code>hello</code>文件有读、写权限，没有执行权限。</p><h3 id="1、更改权限"><a href="#1、更改权限" class="headerlink" title="1、更改权限"></a>1、更改权限</h3><p>权限是可以更改的，我们可以使用 <code>chmod</code> (change mode) 命令来改变文件或目录的访问权限。有两种表示方式，一种是使用符号的方式，另一种是使用数字的方式。</p><p>Linux文件的基本权限就有九个，分别是<code>user/group/others</code>三种身份各有自己的<code>read/write/execute</code>权限。</p><p><strong>（1）使用符号改变文件权限</strong></p><pre class=" language-c"><code class="language-c">格式为：chmod <span class="token punctuation">[</span>身份<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">+</span>、<span class="token operator">-</span>、<span class="token operator">=</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>r、w、x<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件或目录<span class="token punctuation">]</span></code></pre><p>其中，使用<code>u、g、o</code>三种用户身份，除此，还可以使用<code>a</code>表示所有身份。符号<code>+</code>表示增加权限，符号 <code>-</code> 表示删除权限，符号<code>=</code>表示指定权限。如：</p><p><a href="https://imgchr.com/i/ZkWFbR" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkWFbR.md.png" alt="ZkWFbR.md.png"></a></p><p>我们的<code>hello</code>文件是由<code>hello.c</code>编译生成的可执行文件，但是当前用户身份并没有可执行权限，因此运行该文件是出现“权限不够”的警告。我们可以使用命令：</p><pre class=" language-c"><code class="language-c">chmod u<span class="token operator">+</span>x hello</code></pre><p>来增加当前用户对<code>hello</code>文件的执行权限。结果如下：</p><p><a href="https://imgchr.com/i/ZkW3VI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkW3VI.md.png" alt="ZkW3VI.md.png"></a></p><p><strong>（2）使用数字改变文件权限</strong></p><p>除了使用符号来表示权限，还可以使用数字来表示文件或目录权限。其中：</p><pre class=" language-c"><code class="language-c">r：用数字 <span class="token number">4</span> 表示w：用数字 <span class="token number">2</span> 表示x：用数字 <span class="token number">1</span> 表示</code></pre><p>每个身份的权限都是这三个数字相加，如当前<code>hello</code>文件的权限为 <code>-rwxrw-rw-</code> ，那么就是：</p><pre class=" language-c"><code class="language-c">u<span class="token operator">=</span>rwx<span class="token operator">=</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">7</span>g<span class="token operator">=</span>rw<span class="token operator">-</span><span class="token operator">=</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">=</span><span class="token number">6</span>o<span class="token operator">=</span>rwx<span class="token operator">=</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">=</span><span class="token number">6</span></code></pre><p>使用数字的方式改变文件或目录属性的命令格式为：</p><pre class=" language-c"><code class="language-c">chmod ugo <span class="token punctuation">[</span>文件或目录<span class="token punctuation">]</span></code></pre><p>这里的 <code>ugo</code> 就是我们每一身份权限的数字表示。</p><p>例如：当我们要把<code>hello</code>文件所有身份的权限都改为可读、可写、可执行时，可以执行以下命令：</p><pre class=" language-c"><code class="language-c">chmod <span class="token number">777</span> hello</code></pre><p><a href="https://imgchr.com/i/ZkWtG8" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkWtG8.md.png" alt="ZkWtG8.md.png"></a></p><h3 id="2、更改文件所有者与所属组"><a href="#2、更改文件所有者与所属组" class="headerlink" title="2、更改文件所有者与所属组"></a>2、更改文件所有者与所属组</h3><p>文件的所有者与所属组是可以更改的，使用的命令分别是<code>chown</code>（change owner）、<code>chgrp</code>（change group）。格式为：</p><pre class=" language-c"><code class="language-c">更改所有者：chown <span class="token punctuation">[</span>参数选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件<span class="token punctuation">]</span>更改所属组：chgrp <span class="token punctuation">[</span>参数选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件<span class="token punctuation">]</span></code></pre><p><a href="https://imgchr.com/i/ZkWUxg" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkWUxg.md.png" alt="ZkWUxg.md.png"></a></p><p>例如：把<code>hello</code>文件的所有者与所属组都改为 <code>win</code>：</p><p><a href="https://imgchr.com/i/ZkWsI0" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkWsI0.md.png" alt="ZkWsI0.md.png"></a></p><p>以上命令就是关于文件权限的一点笔记，如有错误，欢迎指出。</p><hr><p><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png">](<a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener">https://imgchr.com/i/VcSFJJ</a>)</p>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux笔记】Vi/Vim编辑器</title>
      <link href="/2019/04/29/linux-bi-ji-vim-bian-ji-qi/"/>
      <url>/2019/04/29/linux-bi-ji-vim-bian-ji-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="1、什么是vi-vim？"><a href="#1、什么是vi-vim？" class="headerlink" title="1、什么是vi/vim？"></a>1、什么是vi/vim？</h2><p>vi编辑器是Linux和Unix上最基本的文本编辑器（所有版本的 Linux 都带有 vi 编辑器），工作在字符模式下。由于不需要图形界面，vi是效率很高的文本编辑器。尽管在Linux上也有很多图形界面的编辑器可用，但vi在系统和服务器管理中的功能是那些图形编辑器所无法比拟的。Vim 是<code>Vi improved</code>的缩写，是 vi 的改进版。</p><p>学习vi/vim编辑器的使用是很有必要的。正如vim官网（<a href="https://www.vim.org/）中有一张很形象的说明：" target="_blank" rel="noopener">https://www.vim.org/）中有一张很形象的说明：</a></p><p><a href="https://imgchr.com/i/ZkfcTI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkfcTI.md.png" alt="ZkfcTI.md.png"></a></p><p>其配图说明为：<code>Vim: The power tool for everyone!</code>意在说明vim是一个很有用的工具。确实，小编当初在找工作时，某次技术面试的第二次面试的形式为：给你一台电脑：环境是Linux环境，要求是使用Vim编辑器进行编码。当时，若是不会使用vim那就尴尬了。所以，这些通用性的工具，很有必要掌握。</p><h2 id="2、vi-vim的使用"><a href="#2、vi-vim的使用" class="headerlink" title="2、vi/vim的使用"></a>2、vi/vim的使用</h2><p>在Linux终端中输入<code>vim -v 或 vi -v</code>查看当前的vim版本（本文使用的Linux发型版为：红帽企业版6）：</p><p><a href="https://imgchr.com/i/ZkfTmj" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkfTmj.md.png" alt="ZkfTmj.md.png"></a></p><p>首先，<code>vi/vim</code>编辑器有三种模式：<code>命令模式（Command mode）</code>，<code>输入模式（Insert mode）</code>和<code>底行命令模式（Last line mode）</code>。</p><ul><li><p>命令模式：控制光标移动，可对文本进行复制、粘贴、删除和查找等工作。</p></li><li><p>输入模式：正常的文本录入。</p></li><li><p>底行命令模式：保存或退出文档，以及设置编辑环境。</p></li></ul><p>下图为三种模式之间的切换方法（图片来源于菜鸟教程）：</p><p><a href="https://imgchr.com/i/ZkhpnJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkhpnJ.md.png" alt="ZkhpnJ.md.png"></a></p><p>下面按照这张图的思路走：</p><p>在Linux终端中输入<code>vim test</code>并回车则可打开vim编辑器并编辑一个新文件：<code>test</code>。此时为命令模式：</p><p><a href="https://imgchr.com/i/ZkhiA1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkhiA1.md.png" alt="ZkhiA1.md.png"></a></p><p>接着我们按下键盘上的<code>i</code>或者<code>a</code>或者<code>o</code>即可进入输入模式：</p><p><a href="https://imgchr.com/i/Zkh14P" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zkh14P.md.png" alt="Zkh14P.md.png"></a></p><p>此时按下键盘上的『Esc』键即可由输入模式切换至命令模式：</p><p><a href="https://imgchr.com/i/ZkhNuQ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkhNuQ.md.png" alt="ZkhNuQ.md.png"></a></p><p>此时输入<code>:</code>即可由命令模式切换至底行输入模式。再输入<code>wq 并按下回车键</code>则可保存当前的文本并退出至命令终端（在命令模式下输入<code>ZZ</code>也可以退回至命令终端中，这个方式用起来更方便）：</p><p><a href="https://imgchr.com/i/ZkhrCV" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkhrCV.md.png" alt="ZkhrCV.md.png"></a></p><p>这个此时在命令终端中输入<code>cat test</code>即可查看我们刚才输入的信息：</p><p><a href="https://imgchr.com/i/ZkhygU" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkhygU.md.png" alt="ZkhygU.md.png"></a></p><p>cat是一个文本文件查看命令，关于其它几个常用的文本文件查看命令可查看往期笔记：<a href="https://blog.csdn.net/zhengnianli/article/details/89857683" target="_blank" rel="noopener">【Linux笔记】文本文件查看命令</a></p><p>以上就是<code>vi/vim</code>编辑器的基本使用方法，要想更好的使用<code>vi/vim</code>当然就需要记更多的命令了，比如复制、粘贴、删除等操作都是有对应的命令的。其中命令模式与底行命令模式分别有不同的命令：</p><p>（1）命令模式的常用命令（图片来源：《Linux就该这么学》）：</p><p><a href="https://imgchr.com/i/Zkh44x" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zkh44x.md.png" alt="Zkh44x.md.png"></a></p><p>（2）底行命令模式的常用命令（图片来源：《Linux就该这么学》）：</p><p><a href="https://imgchr.com/i/ZkhbKe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkhbKe.md.png" alt="ZkhbKe.md.png"></a></p><p>掌握这些命令就可以进行基本的操作了。若想要把<code>vi/vim</code>用到得心应手的地步就需要熟悉<code>vi/vim</code>的快捷键了。这不，某位大佬总结出了如下一副图：</p><p><a href="https://imgchr.com/i/Zkhv5t" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zkhv5t.md.png" alt="Zkhv5t.md.png"></a></p><p>该图来源于：</p><pre class=" language-c"><code class="language-c">作者：卢钧轶<span class="token punctuation">(</span>cenalulu<span class="token punctuation">)</span>来自：http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>cenalulu<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token operator">/</span>linux<span class="token operator">/</span>all<span class="token operator">-</span>vim<span class="token operator">-</span>cheatsheat<span class="token operator">/</span></code></pre><p>以上就是关于<code>vi/vim</code>编辑器的一些笔记，如有错误，欢迎指出。相关资料：《Linux就该这么学》、百度百科、菜鸟教程、C语言中文网。</p><hr><p><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png">](<a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener">https://imgchr.com/i/VcSFJJ</a>)</p>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> Linux </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux笔记】文本文件查看命令</title>
      <link href="/2019/04/27/linux-bi-ji-wen-ben-wen-jian-cha-kan-ming-ling/"/>
      <url>/2019/04/27/linux-bi-ji-wen-ben-wen-jian-cha-kan-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>我们要查看一些文本文件的内容时，要使用文本编辑器来查看。在Linux下，可以使用一些命令预览文本文件中的内容，而不必使用文本编辑器打开查看。这篇笔记分享几个常用的文本查看命令。分别是：</p><pre class=" language-c"><code class="language-c">cat：从第一行开始显示文本内容（适用于内容较少的）tac：从最后一行开始显示，是 cat 的逆顺序more：一页一页的显示文本内容（适用于内容较多的）less：与 more 类似，但是比 more 更好的是，它可以往前翻页！head：只看文本的前面几行tail：只看文本的后面几行nl：显示文本内容与行号</code></pre><h2 id="1、cat命令"><a href="#1、cat命令" class="headerlink" title="1、cat命令"></a>1、cat命令</h2><p>cat命令常常用于查看内容较少的文件。很多人把这个命令叫做<code>小猫咪</code>命令，但cat其实是 <code>concatenate（连续）</code> 的缩写，即连续显示文本内容。</p><pre class=" language-c"><code class="language-c">格式为：cat <span class="token punctuation">[</span>参数选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件<span class="token punctuation">]</span></code></pre><p><a href="https://imgchr.com/i/Zk26wq" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zk26wq.md.png" alt="Zk26wq.md.png"></a></p><p>其中，加上参数 <code>-n</code> 用可以显示行数。cat的更多的参数选项可以输入 <code>man cat</code> 进行查看。以下列举的其他命令的详细介绍也可以输入<code>man 命令</code>进行查看。</p><h2 id="2、tac命令"><a href="#2、tac命令" class="headerlink" title="2、tac命令"></a>2、tac命令</h2><p>tac命令的正好与cat命令相反，是从文件末尾开始显示。</p><h2 id="3、more命令"><a href="#3、more命令" class="headerlink" title="3、more命令"></a>3、more命令</h2><p>more命令适用于查看内容较多的文件。因为他可以实时显示百分比以提示现在已经阅读了多少内容。</p><pre class=" language-c"><code class="language-c">格式为：more <span class="token punctuation">[</span>参数选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件<span class="token punctuation">]</span></code></pre><p><a href="https://imgchr.com/i/Zk2OfO" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zk2OfO.md.png" alt="Zk2OfO.md.png"></a></p><p>可以使用<code>空格键</code>或者<code>回车键</code>往下翻页查看后面的内容。</p><h2 id="4、less命令"><a href="#4、less命令" class="headerlink" title="4、less命令"></a>4、less命令</h2><p>less也适用于查看内容较多的文件。less比more更为灵活，因为less可以往上、往下翻页。按下键盘上 <code>PgUp</code> 键可以往上翻页，按下 <code>PgDn</code> 可以往下翻页。但是less命令不会实时显示当前阅读的百分比。</p><pre class=" language-c"><code class="language-c">格式为：less <span class="token punctuation">[</span>参数选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件<span class="token punctuation">]</span></code></pre><h2 id="5、head命令"><a href="#5、head命令" class="headerlink" title="5、head命令"></a>5、head命令</h2><p>head命令用于查看文件的前n行。如使用命令</p><pre class=" language-c"><code class="language-c">head <span class="token operator">-</span>n <span class="token number">20</span> <span class="token operator">/</span>etc<span class="token operator">/</span>profile</code></pre><p>查看<code>/etc</code>目录下<code>profile</code>文件的前20行内容：</p><p><a href="https://imgchr.com/i/ZkRpnA" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkRpnA.md.png" alt="ZkRpnA.md.png"></a></p><h2 id="6、tail命令"><a href="#6、tail命令" class="headerlink" title="6、tail命令"></a>6、tail命令</h2><p>tail命令与head命令相反，tail命令用于查看文件<code>后n行</code>内容。如：</p><p><a href="https://imgchr.com/i/ZkRC7t" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkRC7t.md.png" alt="ZkRC7t.md.png"></a></p><h2 id="7、nl命令"><a href="#7、nl命令" class="headerlink" title="7、nl命令"></a>7、nl命令</h2><p>nl命令可以显示内容的同时显示行号，与 <code>cat -n</code> 命令的作用差不多：<br><a href="https://imgchr.com/i/ZkRkh8" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkRkh8.md.png" alt="ZkRkh8.md.png"></a></p><p>以上命令就是Linux下的一些文本查看命令，虽说作用都一样，都是用来查看文本的，但是可以根据不同的情况来选择不同的命令来查看可以让我们更好地进行预览文件。另外，我们Windows下的黑窗口也有类似的文本查看命令：</p><p><a href="https://imgchr.com/i/ZkRE9S" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkRE9S.md.png" alt="ZkRE9S.md.png"></a></p><hr><p><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png">](<a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener">https://imgchr.com/i/VcSFJJ</a>)</p>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux笔记】文件及目录管理命令</title>
      <link href="/2019/04/21/linux-bi-ji-wen-jian-ji-mu-lu-guan-li-ming-ling/"/>
      <url>/2019/04/21/linux-bi-ji-wen-jian-ji-mu-lu-guan-li-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>之前分享的<code>Cygwin</code>是一个在windows平台上运行的Linux（类UNIX）模拟环境（关于Cygwin的介绍，可移步至往期笔记：<a href="https://zhengnianli.github.io/2018/12/23/c-yu-yan-bi-ji-windows-xia-ti-yan-linux-huan-jing/">【C语言笔记】Windows下体验Linux环境</a>），但毕竟与真实的Linux环境还是有所不同的。我们学习Linux也应在真实的环境中进行学习。</p><p>掌握Linux的一些常用命令是学习Linux的基础，本文主要分享关于Linux文件及目录管理的一些命令。Linux系统可以安装在真机上，也可以装在虚拟机上。本文使用的Linux的发行版是<code>RedHat7</code>，装在虚拟机<code>vmware12.1.1</code>中。</p><h2 id="文件及目录管理命令"><a href="#文件及目录管理命令" class="headerlink" title="文件及目录管理命令"></a>文件及目录管理命令</h2><p>Linux命令的格式为：</p><pre class=" language-c"><code class="language-c">命令名称 <span class="token punctuation">[</span>命令参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>命令对象<span class="token punctuation">]</span></code></pre><p>其中，命令名称、命令参数、命令对象之间需用空格分隔。</p><p>命令对象一般是指要处理的文件、目录、用户等资源，而命令参数可以用长格式（完整的选项名称）， 也可以用短格式（单个字母的缩写）。参数长格式、短格式示例：</p><p><a href="https://imgchr.com/i/ZPBoin" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/23/ZPBoin.md.png" alt="ZPBoin.md.png"></a></p><p>Linux的目录结构为树状结构，最顶级的目录为根目录<code>/</code>。路径有绝对路径与相对路径之分。</p><ul><li><p>绝对路径：由根目录<code>/</code>写起，例如：<code>/usr/share/doc</code> 这个目录。</p></li><li><p>相对路径：不是由<code>/</code> 写起，例如由<code>/usr/share/doc</code>要到<code>/usr/share/man</code>底下时，可以写成：<code>cd ../man</code> 这就是相对路径的写法啦！</p></li></ul><p>接下来我们就来看几个常见的处理目录的命令吧：</p><pre class=" language-c"><code class="language-c">ls<span class="token punctuation">:</span> 列出目录cd：切换目录pwd：显示目前的目录mkdir：创建一个新的目录rmdir：删除一个空的目录cp：复制文件或目录rm：移除文件或目录mv：移动文件与目录，或修改文件与目录的名称touch：创建文件</code></pre><p>你可以使用 man [命令] 来查看各个命令的使用文档，如：<code>man ls</code>。</p><h3 id="1、man命令"><a href="#1、man命令" class="headerlink" title="1、man命令"></a>1、man命令</h3><p>man命令是Linux下的帮助指令，通过man指令可以查看Linux中的指令帮助、配置文件帮助和编程帮助等信息。</p><p>man命令使用示例：<code>man man</code></p><p>在终端中键入该示例命令即可查看帮助手册：</p><p><a href="https://imgchr.com/i/ZPDX1P" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/23/ZPDX1P.md.jpg" alt="ZPDX1P.md.jpg"></a></p><p>其中，按下键盘上的<code>PgUp键</code>可向上翻一页、按下<code>PgDn键</code>可向下翻一页。</p><h3 id="2、ls命令"><a href="#2、ls命令" class="headerlink" title="2、ls命令"></a>2、ls命令</h3><p>ls命令用于显示目录中的文件信息。如：</p><p><img src="https://s2.ax1x.com/2019/06/23/ZPrrgP.png" alt="ZPrrgP.png"></p><p>其中，加上<code>-a</code>参数可查看当前目录下的全部文件（包括隐藏文件），加上<code>-l</code>参数把文件的详细信息（文件大小、文件属性等）列出来。如：</p><p><img src="https://s2.ax1x.com/2019/06/23/ZPrf4s.jpg" alt="ZPrf4s.jpg"></p><p>在Linux下，以 . 开头的文件及目录是隐藏的。关于ls的其他参数及ls命令的其他信息可以查看帮助手册，执行<code>man ls</code>命令即可查看关于ls命令的帮助说明：</p><p><a href="https://imgchr.com/i/ZPrX59" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/23/ZPrX59.md.jpg" alt="ZPrX59.md.jpg"></a></p><h3 id="3、cd命令"><a href="#3、cd命令" class="headerlink" title="3、cd命令"></a>3、cd命令</h3><p><code>cd</code>命令是<code>Change Directory</code>的缩写，用于切换工作路径。</p><pre class=" language-c"><code class="language-c">格式：cd <span class="token punctuation">[</span>相对路径或绝对路径<span class="token punctuation">]</span></code></pre><p>cd的其他常用用法：</p><pre class=" language-c"><code class="language-c">cd <span class="token punctuation">.</span><span class="token punctuation">.</span> #返回上一级目录cd <span class="token operator">~</span> #切换至当前用户的家目录cd <span class="token operator">-</span> #返回上一次所处的目录cd <span class="token operator">/</span> #切换至根目录cd <span class="token operator">~</span>user #切换至user用户的家目录</code></pre><h3 id="4、pwd命令"><a href="#4、pwd命令" class="headerlink" title="4、pwd命令"></a>4、pwd命令</h3><p>pwd命令是<code>Print Working Directory</code>的缩写，也就是显示目前所在目录的命令。</p><p><img src="https://s2.ax1x.com/2019/06/23/ZPsuKf.png" alt="ZPsuKf.png"></p><h3 id="5、mkdir命令"><a href="#5、mkdir命令" class="headerlink" title="5、mkdir命令"></a>5、mkdir命令</h3><p>mkdir 命令用于创建空白的目录。 </p><pre class=" language-c"><code class="language-c">格式为：mkdir <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>目录<span class="token punctuation">]</span></code></pre><p><img src="https://s2.ax1x.com/2019/06/23/ZPs7RI.png" alt="ZPs7RI.png"></p><p>其中，加上<code>-p</code>参数表示递归创建目录。注意：需要切换至超级用户才能创建目录。</p><h3 id="6、rmdir命令"><a href="#6、rmdir命令" class="headerlink" title="6、rmdir命令"></a>6、rmdir命令</h3><p>与mkdir命令相反，rmdir命令用于删除空白文件夹。</p><p><a href="https://imgchr.com/i/ZPyVwF" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/23/ZPyVwF.md.png" alt="ZPyVwF.md.png"></a></p><p>要删除非空目录可用rm命令，关于rm命令的介绍请往下看。</p><h3 id="7、cp命令"><a href="#7、cp命令" class="headerlink" title="7、cp命令"></a>7、cp命令</h3><p>cp命令用于拷贝文件或目录。</p><p><a href="https://imgchr.com/i/ZPy1OK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/23/ZPy1OK.md.png" alt="ZPy1OK.md.png"></a></p><h3 id="8、rm命令"><a href="#8、rm命令" class="headerlink" title="8、rm命令"></a>8、rm命令</h3><p>rm命令用于删除文件或目录。</p><pre class=" language-c"><code class="language-c">格式：rm <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件或目录<span class="token punctuation">]</span></code></pre><p>选项：</p><blockquote><p>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</p><p>-i ：互动模式，在删除前会询问使用者是否动作</p><p>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！</p></blockquote><p>我们可以使用<code>rm -rf</code>删除任何删不掉的东西。删库到跑路用的就是这个命令与这两个参数。所以要谨慎使用这组参数！</p><h3 id="9、mv命令"><a href="#9、mv命令" class="headerlink" title="9、mv命令"></a>9、mv命令</h3><p><code>mv</code> 命令用于剪切文件或将文件重命名 。</p><p><a href="https://imgchr.com/i/ZPWil9" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/23/ZPWil9.md.png" alt="ZPWil9.md.png"></a></p><h3 id="10、touch命令"><a href="#10、touch命令" class="headerlink" title="10、touch命令"></a>10、touch命令</h3><p><code>touch</code> 命令创建文件。</p><p><img src="https://s2.ax1x.com/2019/06/23/ZPWQld.png" alt="ZPWQld.png"></p><hr><p><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png">](<a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener">https://imgchr.com/i/VcSFJJ</a>)</p>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于合泰单片机的高校公寓远程能源监控系统</title>
      <link href="/2019/04/16/zuo-pin-ji-yu-he-tai-dan-pian-ji-de-gao-xiao-gong-yu-yuan-cheng-neng-yuan-jian-kong-xi-tong/"/>
      <url>/2019/04/16/zuo-pin-ji-yu-he-tai-dan-pian-ji-de-gao-xiao-gong-yu-yuan-cheng-neng-yuan-jian-kong-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>合泰半导体隶属台湾盛群半导体集团，合泰杯单片机应用设计竞赛的比赛形式为：作品自由发挥，要在几个月之内完成，且必须使用合泰单片机。比赛分为三个环节：初赛、复赛、决赛，每一环节都会刷掉一部分队伍。</p><h2 id="2、作品分享"><a href="#2、作品分享" class="headerlink" title="2、作品分享"></a>2、作品分享</h2><h3 id="2-1-作品简介"><a href="#2-1-作品简介" class="headerlink" title="2.1 作品简介"></a>2.1 作品简介</h3><p>这是我们团队2017年合泰杯省一等奖作品。本作品以合泰<code>HT32F1656</code>为终端主控，采集公寓当前用电用水数据，并将采集到的数据通过终端无线<code>WIFI</code>发送至云端服务器，通过电脑Web端或手机APP远程查看数据，并可通过电脑Web端或手机APP随时随地远程控制公寓开关水电。通过测试结果证明本作品很好的解决了上述公寓用水用电的诸多诟病，实现了智能的公寓生活。并且，设备终端也配备有显示屏，可实时显示一些用水用电等数据。</p><h3 id="2-2-作品模块构成图及系统框图"><a href="#2-2-作品模块构成图及系统框图" class="headerlink" title="2.2 作品模块构成图及系统框图"></a>2.2 作品模块构成图及系统框图</h3><h3 id="2-2-1-系统框图"><a href="#2-2-1-系统框图" class="headerlink" title="2.2.1 系统框图"></a>2.2.1 系统框图</h3><p>本系统主要由<code>电源模块</code>、<code>存储模块</code>、<code>继电器控制模块</code>、<code>无线WiFi模块</code>、<code>显示控制模块</code>、<code>环境温度采集模块</code>、<code>电能信息采集模块</code>和<code>用水采集模块</code>组成，系统控制芯片为<code>HT32F1656</code>。该系统方框图如下图所示：</p><p><a href="https://imgchr.com/i/ZkmOu6" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkmOu6.md.png" alt="ZkmOu6.md.png"></a></p><h3 id="2-2-2-模块构成图"><a href="#2-2-2-模块构成图" class="headerlink" title="2.2.2 模块构成图"></a>2.2.2 模块构成图</h3><p><a href="https://imgchr.com/i/ZkmxED" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkmxED.md.png" alt="ZkmxED.md.png"></a></p><h2 id="3、人机交互过程图及云端监测"><a href="#3、人机交互过程图及云端监测" class="headerlink" title="3、人机交互过程图及云端监测"></a>3、人机交互过程图及云端监测</h2><h3 id="3-1-人机交互过程图"><a href="#3-1-人机交互过程图" class="headerlink" title="3.1 人机交互过程图"></a>3.1 人机交互过程图</h3><p>电脑Web端、手机APP端是基于中移动ONENET云平台搭建的，基于ONENET提供的接入协议和平台功能，用户终端与电脑Web端、手机APP、云服务器共同构建了一套完整的能源测控系统。用户终端即时的将数据推送至云平台，云平台根据推送的数据进行云端和手机APP端同步更新。电脑Web端、手机APP端通过发送指令控制终端。如图所示：</p><p><a href="https://imgchr.com/i/Zkn1K0" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zkn1K0.md.png" alt="Zkn1K0.md.png"></a></p><h3 id="3-2-云端监测过程图"><a href="#3-2-云端监测过程图" class="headerlink" title="3.2 云端监测过程图"></a>3.2 云端监测过程图</h3><p><a href="https://imgchr.com/i/Zkn8bT" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zkn8bT.md.png" alt="Zkn8bT.md.png"></a></p><h2 id="4、程序流程图"><a href="#4、程序流程图" class="headerlink" title="4、程序流程图"></a>4、程序流程图</h2><h3 id="4-1-主流程图"><a href="#4-1-主流程图" class="headerlink" title="4.1 主流程图"></a>4.1 主流程图</h3><p><a href="https://imgchr.com/i/ZknDr6" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZknDr6.md.png" alt="ZknDr6.md.png"></a></p><h3 id="4-2-与云端通信流程图"><a href="#4-2-与云端通信流程图" class="headerlink" title="4.2 与云端通信流程图"></a>4.2 与云端通信流程图</h3><p><a href="https://imgchr.com/i/ZknfxI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZknfxI.md.png" alt="ZknfxI.md.png"></a></p><h2 id="5、作品图片"><a href="#5、作品图片" class="headerlink" title="5、作品图片"></a>5、作品图片</h2><h3 id="5-1-设备终端实物图"><a href="#5-1-设备终端实物图" class="headerlink" title="5.1 设备终端实物图"></a>5.1 设备终端实物图</h3><p><a href="https://imgchr.com/i/ZkuFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkuFJJ.md.png" alt="ZkuFJJ.md.png"></a></p><p><a href="https://imgchr.com/i/ZkuVQ1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkuVQ1.md.png" alt="ZkuVQ1.md.png"></a></p><h3 id="5-2-Onenet云端监测图"><a href="#5-2-Onenet云端监测图" class="headerlink" title="5.2 Onenet云端监测图"></a>5.2 Onenet云端监测图</h3><p>在WEB端显示采集的用水用电情况，及断水断电开关进行控制如下图所示：</p><p><a href="https://imgchr.com/i/ZkuKoD" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkuKoD.md.png" alt="ZkuKoD.md.png"></a></p><h3 id="5-3-设备终端UI界面"><a href="#5-3-设备终端UI界面" class="headerlink" title="5.3 设备终端UI界面"></a>5.3 设备终端UI界面</h3><p>我们的设备终端屏幕使用的是串口屏，关于串口屏在往期笔记中已经有分享：<a href="https://zhengnianli.github.io/2018/11/21/zuo-pin-ji-yu-stm32-de-zhi-neng-tian-qi-yu-bao-xi-tong/">基于STM32的智能天气预报系统</a></p><h3 id="5-3-1-UI界面方案一："><a href="#5-3-1-UI界面方案一：" class="headerlink" title="5.3.1 UI界面方案一："></a>5.3.1 UI界面方案一：</h3><p><a href="https://imgchr.com/i/ZkKxET" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkKxET.md.png" alt="ZkKxET.md.png"></a><br><a href="https://imgchr.com/i/ZkMJVf" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkMJVf.md.png" alt="ZkMJVf.md.png"></a><br><a href="https://imgchr.com/i/ZkMaGQ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkMaGQ.md.png" alt="ZkMaGQ.md.png"></a><br><a href="https://imgchr.com/i/ZkM6aT" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkM6aT.md.png" alt="ZkM6aT.md.png"></a><br><a href="https://imgchr.com/i/ZkQne0" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkQne0.md.png" alt="ZkQne0.md.png"></a><br><a href="https://imgchr.com/i/ZkQ8SJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkQ8SJ.md.png" alt="ZkQ8SJ.md.png"></a><br><a href="https://imgchr.com/i/ZkQy6A" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkQy6A.md.png" alt="ZkQy6A.md.png"></a></p><h3 id="5-3-2-UI界面方案二："><a href="#5-3-2-UI界面方案二：" class="headerlink" title="5.3.2 UI界面方案二："></a>5.3.2 UI界面方案二：</h3><p><a href="https://imgchr.com/i/Zklm1H" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zklm1H.md.png" alt="Zklm1H.md.png"></a><br><a href="https://imgchr.com/i/ZklMnI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZklMnI.md.png" alt="ZklMnI.md.png"></a></p><h3 id="5-3-3-自拍图"><a href="#5-3-3-自拍图" class="headerlink" title="5.3.3 自拍图"></a>5.3.3 自拍图</h3><p>最后放个自恋的自拍图，哈哈~</p><p><a href="https://imgchr.com/i/ZklXDI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZklXDI.md.png" alt="ZklXDI.md.png"></a></p><h2 id="6、代码获取"><a href="#6、代码获取" class="headerlink" title="6、代码获取"></a>6、代码获取</h2><blockquote><p><a href="https://github.com/zhengnianli/EnergyMonitor" target="_blank" rel="noopener">https://github.com/zhengnianli/EnergyMonitor</a></p></blockquote><p>该代码工程是在keil下创建的，但是要安装合泰单片机相关插件（可能会存在兼容性问题），可在我的微信公众号后台回复关键词：能源监控，即可获取该作品代码及keil插件。若安装插件打不开，可使用source insight代码阅读器进行阅读，关于source insight的介绍可查看往期分享：<a href="https://zhengnianli.github.io/2018/11/12/gong-ju-zhe-me-hao-yong-de-dai-ma-yue-du-qi-ni-zhuang-liao-ma/">这么好用的代码阅读器你装了吗？</a></p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 作品 </tag>
            
            <tag> 合泰单片机 </tag>
            
            <tag> 远程监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于STM32+ATT7022的单相用电器分析监测装置</title>
      <link href="/2019/04/07/zuo-pin-ji-yu-stm32-att7022-de-dan-xiang-yong-dian-qi-fen-xi-jian-ce-zhuang-zhi/"/>
      <url>/2019/04/07/zuo-pin-ji-yu-stm32-att7022-de-dan-xiang-yong-dian-qi-fen-xi-jian-ce-zhuang-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>大学期间，电子类的比赛比较重要的比赛应该就是每年暑假的省/国家级大学生电子设计竞赛吧，其中省赛是偶数年，国赛是奇数年，小编都有参加过，上一篇分享了我们团队参加2016年省赛做的循迹小车，感兴趣的朋友可移步至<a href="https://zhengnianli.github.io/2019/04/02/zuo-pin-ji-yu-stm32-ldc1000-de-xun-ji-xiao-che/">基于STM32+LDC1000的循迹小车</a></p><p>本文分享的是我们团队参加2017年国赛做的单相用电器分析监测装置，这个比赛我们团队同样也获得了省一等奖。</p><h2 id="2、竞赛题目"><a href="#2、竞赛题目" class="headerlink" title="2、竞赛题目"></a>2、竞赛题目</h2><p>每年的TI杯电子设计竞赛都会出好几个题，这次比赛我们选的是题目——单相用电器分析监测装置。该题题目及要求如下：</p><p><a href="https://imgchr.com/i/Zki2PP" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zki2PP.md.png" alt="Zki2PP.md.png"></a><br><a href="https://imgchr.com/i/ZkifxS" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkifxS.md.png" alt="ZkifxS.md.png"></a></p><h2 id="3、方案的选择及比较"><a href="#3、方案的选择及比较" class="headerlink" title="3、方案的选择及比较"></a>3、方案的选择及比较</h2><h3 id="3-1-系统框图"><a href="#3-1-系统框图" class="headerlink" title="3.1 系统框图"></a>3.1 系统框图</h3><p><a href="https://imgchr.com/i/Zki5rQ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/Zki5rQ.md.png" alt="Zki5rQ.md.png"></a></p><p>该系统有两部分组成：<code>主机</code>及<code>从机</code>。</p><p><code>主机</code>以<code>STM32</code>为主控制器，通过SPI与<code>ATT7022电能采集模块</code>进行通信。ATT7022模块负责采集用电器的一些电源参数，如电压，电流，有功功率，无功功率等。我们判断用电器状态需要用到的参数是有功功率，经过一定的判断算法判断用电器的工作状态，然后将判断好的用电器的状态通过<code>ZigBee无线模块</code>发送给从机。</p><p><code>从机</code>也是以一片<code>STM32</code>为主控制器，将主机发送过来的用电器的工作状态发送至串口屏上进行显示。</p><p>我们采用主从结构的原因是因为题目的发挥部分有要求：</p><p><a href="https://imgchr.com/i/ZkiLGV" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkiLGV.md.png" alt="ZkiLGV.md.png"></a></p><h3 id="3-2-电能计量芯片的选择"><a href="#3-2-电能计量芯片的选择" class="headerlink" title="3.2 电能计量芯片的选择"></a>3.2 电能计量芯片的选择</h3><p><code>【1】</code>电能信息采集模块主要是由电能采集芯片 <code>ATT7022</code>、<code>电压互感器</code>、<code>电流互感器</code>三部分组成。主要负责采集电压、电流数据，并转化为功率、电能信息，将用电信息存储于 ATT7022 的寄存器。</p><p><code>【2】</code>该芯片即可用于三相交流电的采集也可用于单相交流电的采集， ATT7022E 集成了 7 路 Sigma-delta ADC、参考电压电路以及所有功率、能量、有效值、功率因数及频率测量的数字信号处理等电路，能够测量各相以及合相的有功功率、无功功率、视在功率、有功能量及无功能量，同时还能测量各相电流、电压有效值、功率因数、相角、频率等参数，充分满足单相用电器监测装置的需求。</p><p><code>【3】</code>在输入 220V 交流电压经 6 个 22k 电阻进行分压，经电压互感器后接的精密检流电阻接入 ATT7022E 检测引脚，输入电流经电流互感器进行 1000： 1 分流经检流电阻接入 ATT7022E 的检流引脚。电压互感器和电流互感器将高电压进行隔离，很好的起到保护作用。 ATT7022E 模块由外部晶振及基本的外围配置电阻电容组成最小系统。</p><h3 id="3-3-用电器状态判断"><a href="#3-3-用电器状态判断" class="headerlink" title="3.3 用电器状态判断"></a>3.3 用电器状态判断</h3><p><code>【1】</code>题意的要求电器的电流范围为<code>0.005A-10.0A</code>通过公式P=UI计算知，我们选择电器的功率范围<code>1.1-2200W</code>。</p><p><code>【2】</code>对于可识别的工作电器总数不低于7，且电流小于5mA的大于5件，我们通过ATT7022电能芯片采集并传输得到各个用电器的工作状态。</p><p><code>【3】</code>我们将收到的电器参数通过Zigbee传输显示在液晶界面（time&lt;=2s）。</p><p><code>【4】</code>第四点也是我们重点实现的步骤，由于需要实时指示当前用电器的情况，我们通过单片机读回的总功率去匹配不同用电器使用的功率和从而得出结果。通过对比了罗列法，穷举法，以及二进制模拟法：</p><p>（1）罗列法的实现太过于复杂，需将所有组合罗列并放在一个数组里面，太耗时间，太过繁琐。</p><p>（2）穷举法，通过算法能够快速得到我们所需要的结果，但是在相同功率不同用电器使用数的情况下，它并不能反应出我们实际的电器使用数。</p><p>（3）二进制模拟法，通过该方法我们将用电器的打开，关闭，分别对应二进制的0与1。通过C语言for循环遍历数组，从而得出我们预期的结果。如图所示我们通过二进制模拟，可以很清楚的看到用电器状态。</p><p><a href="https://imgchr.com/i/ZkFudA" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkFudA.md.png" alt="ZkFudA.md.png"></a></p><h3 id="3-4-主、从机之间的通信"><a href="#3-4-主、从机之间的通信" class="headerlink" title="3.4 主、从机之间的通信"></a>3.4 主、从机之间的通信</h3><p>主从机之间通过ZigBee无线模块进行通信，ZigBee模块与主控之间通过串口连接。主机通过ZigBee模块往从机发送特定格式的字符串数据，从机使用中断的方式进行接收数据，然后在后台解析数据并刷新数据至串口屏上。</p><p><strong>主机发送数据</strong>：</p><p><a href="https://imgchr.com/i/ZkFQit" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkFQit.md.png" alt="ZkFQit.md.png"></a></p><p><strong>从机接收数据</strong>：</p><p><a href="https://imgchr.com/i/ZkF3z8" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkF3z8.md.png" alt="ZkF3z8.md.png"></a></p><p><strong>从机解析并显示数据</strong>：</p><p><a href="https://imgchr.com/i/ZkFwiq" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkFwiq.md.png" alt="ZkFwiq.md.png"></a></p><h2 id="4、实物图"><a href="#4、实物图" class="headerlink" title="4、实物图"></a>4、实物图</h2><p><a href="https://imgchr.com/i/ZkF2w9" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkF2w9.md.png" alt="ZkF2w9.md.png"></a></p><p>这是我们的屏幕界面，用的是串口屏，串口屏我们用得很多，因为很方便地进行显示，而且显示效果也比较好。我的毕业设计也是用串口屏来显示的，有兴趣的朋友可移步至：<a href="https://zhengnianli.github.io/2018/11/21/zuo-pin-ji-yu-stm32-de-zhi-neng-tian-qi-yu-bao-xi-tong/">基于STM32的智能天气预报系统</a>。</p><h2 id="5、代码获取"><a href="#5、代码获取" class="headerlink" title="5、代码获取"></a>5、代码获取</h2><blockquote><p><a href="https://github.com/zhengnianli/SingleDeviceMonitor" target="_blank" rel="noopener">https://github.com/zhengnianli/SingleDeviceMonitor</a></p></blockquote><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> STM32 </tag>
            
            <tag> 作品 </tag>
            
            <tag> 电能采集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于STM32+LDC1000的循迹小车</title>
      <link href="/2019/04/02/zuo-pin-ji-yu-stm32-ldc1000-de-xun-ji-xiao-che/"/>
      <url>/2019/04/02/zuo-pin-ji-yu-stm32-ldc1000-de-xun-ji-xiao-che/</url>
      
        <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>这是2016年TI杯电子设计竞赛的作品，并获得了省一等奖。</p><h2 id="2、竞赛题目"><a href="#2、竞赛题目" class="headerlink" title="2、竞赛题目"></a>2、竞赛题目</h2><p>每年的TI杯电子设计竞赛都会出A题~G题共七个题，我们团队平时主要做控制的多，所以这次竞赛我们选择控制类题目——<code>自动循迹小车</code>。该题题目及要求如下：</p><p><a href="https://imgchr.com/i/ZFg6tU" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/23/ZFg6tU.md.png" alt="ZFg6tU.md.png"></a></p><h2 id="3、方案的选择及比较"><a href="#3、方案的选择及比较" class="headerlink" title="3、方案的选择及比较"></a>3、方案的选择及比较</h2><p><a href="https://imgchr.com/i/ZFg50x" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/23/ZFg50x.md.png" alt="ZFg50x.md.png"></a></p><p>一些功能的实现、方案选择的分析如下：</p><h3 id="3-1-主控芯片的选择"><a href="#3-1-主控芯片的选择" class="headerlink" title="3.1 主控芯片的选择"></a>3.1 主控芯片的选择</h3><p>我们选用STM32系列单片机中的<code>STM32F103RBT6</code>作为主控芯片。大学期间的参加的两次TI杯都没有用TI的MSP430作为主控，哈哈。因为比赛规则没有说禁止使用其他厂商的控制芯片，那我们当然选用我们相对熟悉的STM32来作为控制芯片。</p><p>本以为毕业后可以做STM32或者其他ARM内核芯片作为开发平台的工作，没想到还是与TI挂上了勾，现在工作用的是TI的某双核DSP芯片，正好也可以学习TI的产品。在这一方面学的知识越来越多，就感觉平台只是基础，关键还是应用，关键还是看使用芯片平台开发什么产品。这一段时间的学习，给我的感觉就是TI官方写的代码没ST官方写的代码漂亮~</p><h3 id="3-2-电机驱动方案"><a href="#3-2-电机驱动方案" class="headerlink" title="3.2 电机驱动方案"></a>3.2 电机驱动方案</h3><p>采用专用芯片<code>L298N</code>作为电机驱动芯片。L298N是一个具有高电压大电流的全桥驱动芯片，它相应频率高，一片L298N可以分别控制两个直流电机，而且还带有控制使能端。用该芯片作为电机驱动，操作方便，稳定性好，性能优良。L298N结合单片机可实现对小车速度的精确控制。</p><h3 id="3-3-传感器的选择"><a href="#3-3-传感器的选择" class="headerlink" title="3.3 传感器的选择"></a>3.3 传感器的选择</h3><p><code>方案1</code>：采用一片TI公司配发的<code>LDC1314</code>。LDC1314提供匹配良好的通道， 可实现差分测量与比率测量。LDC1314具有多通道且支持远程感测并且还具备有高分辨率。高分辨率通道可支持更大的感测范围，在两倍线圈直径范围外依然可保持良好的性能。 良好匹配的通道支持差分与比率测量。LDC1314与单片机通信方式为I2C方式。</p><p><code>方案2</code>：采用一片TI公司配发的<code>LDC1000</code>。LDC1000的通信方式为SPI通信，通道个数为1。LDC1000除了通信方式与通道个数与LDC1314不同之外，其他部分几乎与LDC1314兼容。</p><p>由于当时比赛时LCD1314的数量有限，所以我们选用方案2的LDC1000传感器来寻迹。因为LDC1000只有一路通道，线圈无论左偏还是右偏，检测回来的值都变小，但是我们可以使用软件的方式来弥补它的这一缺点，同样可以达到准确寻迹的目的。</p><h3 id="3-4-LCD1000的测量方案分析"><a href="#3-4-LCD1000的测量方案分析" class="headerlink" title="3.4 LCD1000的测量方案分析"></a>3.4 LCD1000的测量方案分析</h3><p><code>方案1</code>：采用一片电子开关（<code>CD4052</code>）作为辅助让LDC1000可以对两个线圈进行切换控制，以趋近与双通道的效果。</p><p><code>方案2</code>：采用一片<code>LDC1000</code>单独检测铁丝，让线圈绕着铁丝走倒V形、Z形或S形的方式让线圈沿着铁丝左右切割前进。</p><p>由于考虑到程序算法的问题，因此我们采用方案2测量。</p><h3 id="3-5-小车转向的方案分析"><a href="#3-5-小车转向的方案分析" class="headerlink" title="3.5 小车转向的方案分析"></a>3.5 小车转向的方案分析</h3><p><code>方案1</code>：使用舵机转向。可以输入一个周期性的正向脉冲信号来控制舵机，这个周期性脉冲信号的高电平时间通常在<code>1ms—2ms</code>之间，而低电平时间应在<code>5ms到20ms</code>之间，并不很严格，典型的20ms周期性脉冲的正脉冲宽度与微型伺服马达的输出臂位置的关系：输入正脉冲宽度为0.5ms时对应的输出臂为-90°，输入正脉冲宽度为1.0ms时对应的输出臂为-45°，输入正脉冲宽度为1.5ms时对应的输出臂为0°，输入正脉冲宽度为2.0ms时对应的输出臂为45°，输入正脉冲宽度为2.5ms时对应的输出臂为90°。所以使用舵机在小角度转弯时灵敏度并不高。</p><p><code>方案2</code>：利用电机的速度差转向。它具有调速范围广、起动转矩大、控制功率小等一系列优点。</p><p>由于考虑到舵机小角度转弯灵敏度低的问题，因此我们采用方案2测量。</p><h3 id="3-6-电机的选择"><a href="#3-6-电机的选择" class="headerlink" title="3.6 电机的选择"></a>3.6 电机的选择</h3><p><code>方案1</code>：采用直流电机。直流电机转动力矩大，响应快速，体积小，重量轻，直流电动机具有优良的调速特性，调速平滑、方便，调整范围广；过载能力强，能承受频繁的冲击负载，可实现频繁的无级快速启动、制动和反转,能满足各种不同的特殊运行要求，价格便宜。我们选用减速比为<code>1：74</code>的直流电机，减速后电机的转速为<code>100r/min</code>。</p><p><code>方案2</code>：采用步进电机。步进电机是一种将电脉冲信号转换成角位移或线位移的精密执行原件。控制方便，体积小，灵活性和可靠性高，具有瞬时启动和急速停止的优越性，比较适合本系统控制精度高的特点。但步进电机的抖动比较大，输出力矩较低，随转速的升高而下降，且在较高转速时会急剧下降，其转速较低，不适用于小车等有一定速度要求的系统，价格还比较昂贵，所以这里不采用此方案。</p><p>由于直流电机价格便宜、控制简单。而且选用车轮直径为6cm的电机时，最大速度可以达到<code>V=2πr·v=2*3.14*0.03*100/60=0.314m/s</code>，能够较好的满足系统的要求。因此选用方案1。</p><h2 id="4、软件及解决的算法分析"><a href="#4、软件及解决的算法分析" class="headerlink" title="4、软件及解决的算法分析"></a>4、软件及解决的算法分析</h2><h3 id="4-1-循迹算法分析"><a href="#4-1-循迹算法分析" class="headerlink" title="4.1 循迹算法分析"></a>4.1 循迹算法分析</h3><p>我们软件实现的整体思路很简单，首先看一下分析图：</p><p><a href="https://imgchr.com/i/ZF208e" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/23/ZF208e.md.png" alt="ZF208e.md.png"></a></p><p>我们我们记<code>LDC1000</code>读回来的数字量为 <code>Ldc_Val</code>， 根据我们自己铺的轨道，当线圈中心置于铁丝正上方时（在图中3号位置）的 Ldc_Val约为 11000， 当线圈中心置于偏离铁丝一小段距离（图中4号位置）的 Ldc_Val 约为 9000，当线圈正好与铁丝相切时（图中1、4号位置）的 Ldc_Val 约为 5000。</p><p>我们设置了三种情况来控制小车循迹，一是当 <code>9000&lt;Ldc_Val&lt;11000</code>（当然，因为上限值与下限值都是一个大概值，所以这两个值可以根据实际测试需要修改)时，小车稍微往右偏一个小角度，小车右偏的条件左边电机转速大于右边电机转速（偏离的程度根据实际测试调整）。二是当 <code>5000&lt;Ldc_Val&lt;9000</code>（当然，因为上限值与下限值都是一个大概值，所以这个值可以根据实际测试需要修改)时，小车稍微往左偏一个小角度，小车左偏的条件右边电机转速大于左边电机转速（偏离的程度根据实际测试调整）。三是当 <code>Ldc_Val=9000</code>（这个值根据前面两种情况的修改而修改）时，小车稍微往左偏一个小角度，小车左偏的条件右边电机转速大于左边电机转速（偏离的程度根据实际测试调整）。如此反复（过弯的情况也是一样的），小车就会沿着铁丝做<code>Z 形</code>对铁丝做切割运动循迹前行。</p><h3 id="4-2-硬币的检测"><a href="#4-2-硬币的检测" class="headerlink" title="4.2 硬币的检测"></a>4.2 硬币的检测</h3><p>在除了上述三种情况下，再添加第四种范围，当<code>Ldc_Val&gt;12000</code>（此值根据实际测试调节）时，就是检测到硬币在铁丝边缘，此时蜂鸣器发声提示。但是，有些时候会导致蜂鸣器频繁发声，这种情况是因为蜂鸣器发声的 Ldc_Val 值太低，导致铁线处于线圈正下方时 Ldc_Val 值也会处于蜂鸣器发声的 Ldc_Val 范围内，这时可以把蜂鸣器发声的临界值调高些。</p><p>还有一种情况就是线圈会在没有硬币的地方会偶尔产生一个异常的数值，该数值处于蜂鸣器发声的 Ldc_Val 值范围导致蜂鸣器发声，对于这种情况，我们首先想到的是在程序上采用连续读取多个检测回来的数字量去除最大最小值的再求平均值的方法来滤除掉这些偶尔的异常值。</p><h3 id="4-3-程序主流程图"><a href="#4-3-程序主流程图" class="headerlink" title="4.3 程序主流程图"></a>4.3 程序主流程图</h3><p><a href="https://imgchr.com/i/ZkPbcD" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkPbcD.md.png" alt="ZkPbcD.md.png"></a></p><h2 id="5、实物图"><a href="#5、实物图" class="headerlink" title="5、实物图"></a>5、实物图</h2><p>小车共有三个轮子，其中车头两个轮子，车位一个万向轮（方便转弯），LDC1000安装在车头正前方。</p><p><a href="https://imgchr.com/i/ZkiK3T" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZkiK3T.md.png" alt="ZkiK3T.md.png"></a></p><h2 id="6、代码获取"><a href="#6、代码获取" class="headerlink" title="6、代码获取"></a>6、代码获取</h2><blockquote><p><a href="https://github.com/zhengnianli/LDC1000_Track_Car" target="_blank" rel="noopener">https://github.com/zhengnianli/LDC1000_Track_Car</a></p></blockquote><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> STM32 </tag>
            
            <tag> 作品 </tag>
            
            <tag> 循迹小车 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】带参宏定义（二）</title>
      <link href="/2019/03/26/c-yu-yan-bi-ji-dai-can-hong-ding-yi-er/"/>
      <url>/2019/03/26/c-yu-yan-bi-ji-dai-can-hong-ding-yi-er/</url>
      
        <content type="html"><![CDATA[<p>带参宏在我们的嵌入式编程中使用得非常多，其定义如下：</p><pre class=" language-c"><code class="language-c">define 标识符<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> 字符序列</code></pre><p>其中参数列表中的参数之间用逗号分隔，字符序列中应包含参数表中的参数。在定义带参数的宏时，宏名标识符与左圆括号之间不允许有空白符，应紧接在一起，否则变成了无参数的宏定义。</p><p>并且，字符序列与其每一个参数必须用括号扩起来，否则该宏定义可能会产生<code>二义性</code> 。下面举个简单的例子，定义一个求平方的宏函数：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> SQUARE(a) a*a </span><span class="token comment" spellcheck="true">// 不严谨的写法</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  res <span class="token operator">=</span> <span class="token function">SQUARE</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"res = %d\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果如下：<br><a href="https://imgchr.com/i/VbO7LT" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/18/VbO7LT.md.png" alt="VbO7LT.md.png"></a><br><code>res</code>变量的输出结果为17，与我们期望的<code>res = 49;</code>相差甚远！这就是因为我们不给字符序列中的宏参数加括号的原因，产生了歧义。程序生成可执行程序之前的预处理过程中把SQUARE(x+2)替换成了<code>x+2*x+2</code>，因此当<code>x=5</code>时res的结果为17。我们可以使用命令<code>gcc -E hello.c -o hello.i</code>进行预处理，然后查看经过预处理得到的文件<code>hello.i</code>的内容，<code>hello.i</code>里的内容如下：<br><a href="https://imgchr.com/i/VbOqwF" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/18/VbOqwF.md.png" alt="VbOqwF.md.png"></a><br><code>hello.i</code>里的内容与我们上面分析的一致！关于C程序的编译原理可查看往期笔记：<a href="https://zhengnianli.github.io/2018/10/14/c-yu-yan-bi-ji-c-yu-yan-bian-yi-de-guo-cheng/">【C语言笔记】C语言编译的过程</a>关于windows系统下使用<code>gcc编译器</code>的方法可参考往期笔记：<a href="https://zhengnianli.github.io/2018/10/05/c-yu-yan-bi-ji-shi-yong-notepad-mingw-lai-kai-fa-c-cheng-xu/">【C语言笔记】使用notepad++、MinGW来开发C程序</a></p><p>以上程序严谨的求平方的宏函数的定义如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> SQUARE(a) ((a)*(a)) </span><span class="token comment" spellcheck="true">// 严谨的做法</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  res <span class="token operator">=</span> <span class="token function">SQUARE</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"res = %d\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序输出结果如下：<br><a href="https://imgchr.com/i/VbjPcq" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/18/VbjPcq.md.png" alt="VbjPcq.md.png"></a><br>可见，这才是我们要的正确结果。</p><p>带参宏到底有多重要，看看TI的一些官方例程就知道，其把很多算法使用带参宏封装起来，用户就可以很方便的使用。</p><h5 id="带参宏——-clarke变换算法："><a href="#带参宏——-clarke变换算法：" class="headerlink" title="带参宏—— clarke变换算法："></a>带参宏—— clarke变换算法：</h5><p><a href="https://imgchr.com/i/VbjABT" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/18/VbjABT.md.png" alt="VbjABT.md.png"></a></p><h5 id="带参宏——-PI调节器算法："><a href="#带参宏——-PI调节器算法：" class="headerlink" title="带参宏—— PI调节器算法："></a>带参宏—— PI调节器算法：</h5><p><a href="https://imgchr.com/i/VbjEHU" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/18/VbjEHU.md.png" alt="VbjEHU.md.png"></a></p><h5 id="这些-h文件都使用宏来封装各种算法："><a href="#这些-h文件都使用宏来封装各种算法：" class="headerlink" title="这些.h文件都使用宏来封装各种算法："></a>这些.h文件都使用宏来封装各种算法：</h5><p><a href="https://imgchr.com/i/VbjeN4" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/18/VbjeN4.md.png" alt="VbjeN4.md.png"></a></p><p>同样，ST官方固件库中也大量使用带参宏：<br><a href="https://imgchr.com/i/Vbj8HO" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/18/Vbj8HO.md.png" alt="Vbj8HO.md.png"></a><br><a href="https://imgchr.com/i/Vbjrb8" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/18/Vbjrb8.md.png" alt="Vbjrb8.md.png"></a><br><a href="https://imgchr.com/i/Vbj5rV" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/18/Vbj5rV.md.png" alt="Vbj5rV.md.png"></a><br>可见带参宏定义的重要性！除此之外，通过以上宏定义，可发现很多宏定义分行时，其行后都加上反斜杠<code>\</code>进行分隔，这也是需要注意的细节。</p><h3 id="带参宏与函数的区别"><a href="#带参宏与函数的区别" class="headerlink" title="带参宏与函数的区别"></a>带参宏与函数的区别</h3><p>查看以上带参宏，我们发现带参宏似乎与函数似乎长得很像，它们之间有什么区别和联系呢？TI为什么要使用宏来对一些算法进行封装呢，难道使用函数来封装不可以吗？答案是可以的：<br><a href="https://imgchr.com/i/VbjIbT" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/18/VbjIbT.md.png" alt="VbjIbT.md.png"></a><br>TI也说了，使用者可以很方便地把这些算法宏转换成一些函数。换句话说就是你可以使用宏定义，也可以使用函数。那么，什么时候封装成宏定义比较好，什么时候封装成函数比较好呢？</p><p>以下内容参考文章：<br><a href="http://blog.sina.com.cn/s/blog_861912cd0100tc94.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_861912cd0100tc94.html</a><br>下面，先看一下带参宏与函数的一些区别，举个例子，比较两个数或者表达式大小：</p><p>（1）带参宏的方式：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAX(a,b) ((a)>(b)?(a):(b))</span></code></pre><p>（2）函数封装的方式：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>　　<span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b <span class="token operator">?</span> a <span class="token punctuation">:</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>很显然，我们不会选择用函数来完成这个任务，原因有两个：</p><p>（1）首先，函数调用会带来额外的开销，它需要开辟一片栈空间，记录返回地址，将形参压栈，从函数返回还要释放堆栈。这种开销不仅会降低代码效率，而且代码量也会大大增加，而使用宏定义则在代码规模和速度方面都比函数更胜一筹；</p><p>（2）其次，函数的参数必须被声明为一种特定的类型，所以它只能在类型合适的表达式上使用，我们如果要比较两个浮点型的大小，就不得不再写一个专门针对浮点型的比较函数。反之，上面的那个宏定义可以用于整形、长整形、单浮点型、双浮点型以及其他任何可以用“&gt;”操作符比较值大小的类型，也就是说，宏是与类型无关的。</p><p>除此之外，宏与函数的不同点还有：宏是在预处理阶段展开，占用的是编译时间，函数实在程序运行时调用的，占用的是程序运行的时间；宏参数没有类型说明，也没有返回值的概念。</p><p>和使用函数相比，使用宏的不利之处在于每次使用宏时，一份宏定义代码的拷贝都会插入到程序中。除非宏非常短，否则使用宏会大幅度增加程序的长度。</p><p>还有一些任务根本无法用函数实现，但是用宏定义却很好实现。比如参数类型没法作为参数传递给函数，但是可以把参数类型传递给带参的宏。</p><p>看下面的例子：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MALLOC（n, type）\　　（(type *) malloc（（n）* sizeof（type）））</span></code></pre><p>利用这个宏，我们就可以为任何类型分配一段我们指定的空间大小，并返回指向这段空间的指针。我们可以观察一下这个宏确切的工作过程：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>ptr <span class="token operator">=</span> <span class="token function">MALLOC</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>将这宏展开以后的结果：</p><pre class=" language-c"><code class="language-c">ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个例子是宏定义的经典应用之一，完成了函数不能完成的功能，但是宏定义也不能滥用，通常，如果相同的代码需要出现在程序的几个地方，更好的方法是把它实现为一个函数。</p><h3 id="宏的缺点"><a href="#宏的缺点" class="headerlink" title="宏的缺点"></a>宏的缺点</h3><ul><li>宏可能会大幅度增加程序的长度。</li><li>宏是没法调试的。</li><li>宏由于与类型无关，也就不够严谨。</li><li>宏可能会带来运算符的优先级问题，即二义性。</li></ul><p>以上就是关于带参宏的一些总结，如有错误，欢迎指出！</p><hr><p>我的微信公众号如下，欢迎扫码关注查看更多分享：<br><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】带参宏定义（一）</title>
      <link href="/2019/03/23/c-yu-yan-bi-ji-dai-can-hong-ding-yi-yi/"/>
      <url>/2019/03/23/c-yu-yan-bi-ji-dai-can-hong-ding-yi-yi/</url>
      
        <content type="html"><![CDATA[<p>公司某项目用到<code>DSP+FPGA</code>架构（当然不是著名的ARM+DSP+FPGA点灯项目,哈哈），我的发展方向为DSP方向。其中DSP与FPGA通过两个带参宏进行数据交互（DSP与FPGA通过一块共享内存来实现数据交互，我这边的DSP只要往共享内存中写入数据即为往FPGA中写数据，往共享内存中读取数据就是读取FPGA发送过来的数据），如下图：</p><p><a href="https://imgchr.com/i/VbYz7t" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VbYz7t.md.png" alt="VbYz7t.md.png"></a></p><p>也即：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">define</span> FPGA_WRITE(data_out, base_addr, offset)  \((((volatile uint32*)base_addr)[(offset)]) = (data_out))</span><span class="token macro property">#<span class="token directive keyword">define</span> FPGA_READ(data_in, base_addr, offset)    \((data_in) = (((volatile uint32*)base_addr)[(offset)]))</span></code></pre><p>带参宏也称做<code>宏函数</code>，宏函数<code>FPGA_WRITE(data_out, base_addr, offset)</code>用于往FPGA发送数据。其中</p><ul><li><p><strong>参数data_out：</strong>要写入的数据。</p></li><li><p><strong>参数base_addr：</strong>基地址。</p></li><li><p><strong>参数offset：</strong>相对于基地址的偏移量。</p></li></ul><p>该宏函数实体为：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> uint32<span class="token operator">*</span><span class="token punctuation">)</span>base_addr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>data_out<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>我们先看等号左边，从最里层的括号开始看，<code>(volatile uint32*)base_addr</code>的意思是把<code>base_addr</code>强制转换为<code>(volatile uint32*)</code>类型的数据，其中加volatile关键字的作用是确保本条指令不会因编译器的优化而省略。volatile在嵌入式编程中用得很多，如在Cortex-M3内核MCU的内核文件的C函数内嵌汇编中使用了大量的volatile关键字：</p><p><a href="https://imgchr.com/i/VbtpAP" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VbtpAP.md.png" alt="VbtpAP.md.png"></a></p><p>关于volatile关键字更多的介绍可查看往期分享：<br><a href="https://zhengnianli.github.io/2018/10/17/%E3%80%90C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%E3%80%91volatile%E5%85%B3%E9%94%AE%E5%AD%97/">【C语言笔记】volatile关键字</a></p><p><code>((volatile uint32*)base_addr)[(offset)]</code>的意思是相对于base_addr偏移offset个内存单元后所占的空间，此时已经转变为了<code>base_addr[offset]</code>，这就可以看做数组base_addr的第offset个元素，所以可以给它赋值。等号右边的数据data_out就是给数组元素base_addr[offset]进行赋值的。数组和指针在此处其实是可以等价的，所以</p><pre class=" language-cpp"><code class="language-cpp"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> uint32<span class="token operator">*</span><span class="token punctuation">)</span>base_addr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>其实可以等价为：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> uint32<span class="token operator">*</span><span class="token punctuation">)</span>base_addr<span class="token punctuation">)</span> <span class="token operator">+</span> offset<span class="token punctuation">)</span></code></pre><p>宏函数<code>FPGA_READ(data_in, base_addr, offset)</code>用于读取FPGA发送过来的数据，其实体为：</p><pre class=" language-CPP"><code class="language-CPP">((data_in) = (((volatile uint32*)base_addr)[(offset)]))</code></pre><p>同写函数的分析方法类似，此处从等号右边的最里层括号开始看，分析过程省略，具体的可查看写数据函数<code>FPGA_WRITE</code>的分析过程。此处等号右边的</p><pre class=" language-cpp"><code class="language-cpp"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> uint32<span class="token operator">*</span><span class="token punctuation">)</span>base_addr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>可以等价于：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> uint32<span class="token operator">*</span><span class="token punctuation">)</span>base_addr<span class="token punctuation">)</span> <span class="token operator">+</span> offset<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>为什么要在宏函数实体的参数的两边加上括号呢？为什么要在宏函数实体的两边加上括号呢？</p><p>答：虽然有时候不加括号也没什么问题，但是，更严格的做法是给参数加括号、给宏函数实体加括号，这样可以避免<strong><code>二义性</code></strong>。关于宏函数的二义性将在下一篇笔记中分享，欢迎阅读！</p><h3 id="以上两个带参宏的测试用例"><a href="#以上两个带参宏的测试用例" class="headerlink" title="以上两个带参宏的测试用例"></a>以上两个带参宏的测试用例</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/********************************************************************************* 宏函数FPGA_WRITE、FPGA_READ测试用例******************************************************************************/</span>#include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">></span>#define uint32 unsigned <span class="token keyword">int</span>#<span class="token keyword">if</span> <span class="token number">1</span><span class="token comment" spellcheck="true">// 调用这两个宏可往共享内存中读写数据</span>#define <span class="token function">FPGA_WRITE</span><span class="token punctuation">(</span>data_out<span class="token punctuation">,</span> base_addr<span class="token punctuation">,</span> offset<span class="token punctuation">)</span> \<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> uint32<span class="token operator">*</span><span class="token punctuation">)</span>base_addr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>data_out<span class="token punctuation">)</span><span class="token punctuation">)</span>#define <span class="token function">FPGA_READ</span><span class="token punctuation">(</span>data_in<span class="token punctuation">,</span> base_addr<span class="token punctuation">,</span> offset<span class="token punctuation">)</span> \<span class="token punctuation">(</span><span class="token punctuation">(</span>data_in<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> uint32<span class="token operator">*</span><span class="token punctuation">)</span>base_addr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>#<span class="token keyword">else</span><span class="token comment" spellcheck="true">// 以上宏等效的写法</span>#define <span class="token function">FPGA_WRITE</span><span class="token punctuation">(</span>data_out<span class="token punctuation">,</span> base_addr<span class="token punctuation">,</span> offset<span class="token punctuation">)</span> \<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> uint32<span class="token operator">*</span><span class="token punctuation">)</span>base_addr<span class="token punctuation">)</span> <span class="token operator">+</span> offset<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>data_out<span class="token punctuation">)</span><span class="token punctuation">)</span>#define <span class="token function">FPGA_READ</span><span class="token punctuation">(</span>data_in<span class="token punctuation">,</span> base_addr<span class="token punctuation">,</span> offset<span class="token punctuation">)</span> \<span class="token punctuation">(</span><span class="token punctuation">(</span>data_in<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> uint32<span class="token operator">*</span><span class="token punctuation">)</span>base_addr<span class="token punctuation">)</span> <span class="token operator">+</span> offset<span class="token punctuation">)</span><span class="token punctuation">)</span>#endif<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 变量定义</span>  uint32 arr<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  uint32 <span class="token operator">*</span>ptr <span class="token operator">=</span> arr<span class="token punctuation">;</span>  uint32 data_write <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">;</span>  uint32 data_read <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 验证宏函数FPGA_WRITE</span>  <span class="token function">FPGA_WRITE</span><span class="token punctuation">(</span>data_write<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时arr[3]的值会被data_write的值覆盖</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"arr[3] = %d\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data_write <span class="token operator">==</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"宏函数FPGA_WRITE验证成功！\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 验证宏函数FPGA_READ</span>  <span class="token function">FPGA_READ</span><span class="token punctuation">(</span>data_read<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时data_read的值会被arr[5]的值覆盖</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"data_read = %d\n"</span><span class="token punctuation">,</span> data_read<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data_read <span class="token operator">==</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"宏函数FPGA_READ验证成功！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>以上的测试方法是：</strong>定义一个数组arr，定义一个基地址ptr（指针变量），基地址ptr指向arr，此时ptr就可以与数组arr相关联起来了，即相对于ptr偏移offset个内存单元其实就是等价于arr[offset]。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token function">FPGA_WRITE</span><span class="token punctuation">(</span>data_write<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这条语句的意思就是往ptr往后第3个内存单元写入数据data_write，即<code>arr[3] = data_write;</code>，arr[3]由原来的3变成了520。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token function">FPGA_READ</span><span class="token punctuation">(</span>data_read<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> 这条语句的意思就是把ptr往后第5个内存单元中的数据赋给data_read变量，即data_read = arr[5];，data_read由原来的0变成了5。程序运行结果如下：<br><img src="https://s2.ax1x.com/2019/06/17/Vbti9S.png" alt="Vbti9S.png"></p><p>可见，程序输出结果与我们分析的一致！带参宏很重要，在一定程度上可以帮助我们防止出错，<strong><code>提高代码的可移植性和可读性</code></strong>等，应重点掌握。下一篇笔记我们将分享更多的带参宏的笔记，欢迎阅读。</p><hr><p>我的微信公众号如下，欢迎扫码关注查看更多分享：<br><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】指定初始化器</title>
      <link href="/2019/02/16/c-yu-yan-bi-ji-zhi-ding-chu-shi-hua-qi/"/>
      <url>/2019/02/16/c-yu-yan-bi-ji-zhi-ding-chu-shi-hua-qi/</url>
      
        <content type="html"><![CDATA[<p> <code>C99</code>增加了一个新特性：<code>指定初始化器(designated initializer)</code>。利用该特性可以初始化指定的数组元素，也可以初始化指定的结构体变量（往期笔记<a href="https://zhengnianli.github.io/2019/01/22/c-yu-yan-bi-ji-jie-gou-ti/">【C语言笔记】结构体</a>有用到这个特性对结构体变量进行初始化）。</p><p>本笔记主要分享：使用指定初始化器初始化数组。</p><blockquote><p>例如，只初始化数组中的最后一个元素。</p></blockquote><p>对于传统的C初始化语法，必须初始化最后一个元素所有元素，才能初始化它：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">212</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//传统的语法</span></code></pre><p>而<code>C99</code>规定，可以在初始化列表中使用带方括号的下标指明待初始化的元素：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">212</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把arr[5]初始化为212</span></code></pre><p>对于一般的初始化，在初始化一个元素后，未初始化的元素都会被设置为0。</p><p>下面看一段程序：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/* designate.c--使用指定初始化器 */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MONTHS 12</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> days<span class="token punctuation">[</span>MONTHS<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">29</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MONTHS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2d  %d\n"</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> days<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>该程序在支持<code>C99</code>的编译器中输出如下：</p><pre class=" language-cpp"><code class="language-cpp"> <span class="token number">1</span>  <span class="token number">31</span> <span class="token number">2</span>  <span class="token number">29</span> <span class="token number">3</span>  <span class="token number">0</span> <span class="token number">4</span>  <span class="token number">0</span> <span class="token number">5</span>  <span class="token number">31</span> <span class="token number">6</span>  <span class="token number">30</span> <span class="token number">7</span>  <span class="token number">31</span> <span class="token number">8</span>  <span class="token number">0</span> <span class="token number">9</span>  <span class="token number">0</span><span class="token number">10</span>  <span class="token number">0</span><span class="token number">11</span>  <span class="token number">0</span><span class="token number">12</span>  <span class="token number">0</span></code></pre><p>以上输出揭示了指定初始化器的两个重要特性：</p><p>【第一】如果指定初始化器后面有更多的值，如该例中的初始化列表中的片段： <code>[4] =31, 30, 31</code>，那么后面这些值将被用于初始化指定元素后面的元素。也就是说，在<code>days[4]</code>被初始化为31后，<code>days[5]</code>和<code>days[6]</code>将分别被初始化为30和31；</p><p>【第二】，如果再次初始化指定的元素，那么最后的初始化将会取代之前的初始化。本例中，初始化列表开始时把<code>days[1]</code>初始化为28，但是days[1]又被后面的指定初始化<code>[1] = 29</code>初始化为29。</p><p>如果未指定元素大小会怎样?</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> stuff<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//会发生什么?</span><span class="token keyword">int</span> staff<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//会发生什么?</span></code></pre><p>编译器会把数组的大小设置为足够装得下初始化的值。所以，<code>stuff</code>数组有7个元素，编号为0~6；<code>staff</code>数组的元素比<code>stuff</code>数组多两个(即有9个元素)。</p><p>以上就是指定初始化器的笔记。</p><p>参考摘抄：《C Primer Plus第六版》</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】操作位的技巧</title>
      <link href="/2019/02/15/c-yu-yan-bi-ji-cao-zuo-wei-de-ji-qiao/"/>
      <url>/2019/02/15/c-yu-yan-bi-ji-cao-zuo-wei-de-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h3 id="一、操作位的方法"><a href="#一、操作位的方法" class="headerlink" title="一、操作位的方法"></a>一、操作位的方法</h3><p>操作位有两种方法，一种是<code>位字段</code>，另一种是使用<code>按位运算符</code>。位字段的方法可查看往期笔记：<a href="https://zhengnianli.github.io/2019/02/14/c-yu-yan-bi-ji-wei-yu/">【C语言笔记】位域</a>。本文介绍使用按位运算符操作位的方法。下表为几种位操作符及其含义：</p><p><a href="https://imgchr.com/i/VH0Pit" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VH0Pit.md.png" alt="VH0Pit.md.png"></a></p><h3 id="二、不改变其他位的值的状况下，对某几个位进行设值。"><a href="#二、不改变其他位的值的状况下，对某几个位进行设值。" class="headerlink" title="二、不改变其他位的值的状况下，对某几个位进行设值。"></a>二、不改变其他位的值的状况下，对某几个位进行设值。</h3><p>在<code>嵌入式编程</code>中，常常需要对一些寄存器进行配置，有的情况下需要改变一个字节中的某一位或者几位，但是又不想改变其它位原有的值，这时就可以使用按位运算符进行操作。下面进行举例说明，假如有一个8位的TEST寄存器：</p><p><a href="https://imgchr.com/i/VH0QJ0" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VH0QJ0.md.png" alt="VH0QJ0.md.png"></a></p><p>当我们要设置第0位bit0的值为1时，可能会这样进行设置：</p><pre class=" language-cpp"><code class="language-cpp">TEST <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span></code></pre><p>但是，这样设置是不够准确的，因为这时候已经同时操作到了高7位：<code>bit1~bit7</code>，如果这高7位没有用到的话，这么设置没有什么影响；但是，如果这7位正在被使用，结果就不是我们想要的了。</p><p>在这种情况下，我们就可以借用<code>&amp;</code>和<code>|</code>进行配置。</p><p>对于二进制位操作来说，不管该位原来的值是0还是1，它跟0进行&amp;运算，得到的结果都是0，而跟1进行&amp;运算，将保持原来的值不变；不管该位原来的值是0还是1，它跟1进行|运算，得到的结果都是1，而跟0进行|运算，将保持原来的值不变。</p><p>所以，此时可以设置为：</p><pre class=" language-cpp"><code class="language-cpp">TEST <span class="token operator">=</span> TEST <span class="token operator">|</span> <span class="token number">0x01</span><span class="token punctuation">;</span></code></pre><p>其意义为：<code>TEST寄存器</code>的高7位均不变，最低位变成1了。在实际编程中，常改写为：</p><pre class=" language-cpp"><code class="language-cpp">TEST <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span></code></pre><p>这种写法可以一定程度上简化代码，是 C 语言常用的一种编程风格。</p><p>同样的，要给<code>TEST</code>的低4位清0，高4位保持不变，可以进行如下配置：</p><pre class=" language-cpp"><code class="language-cpp">TEST <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0xF0</span><span class="token punctuation">;</span></code></pre><p>这个场景<code>嵌入式开发</code>中经常使用，方法就是先对需要设置的位用<code>&amp;</code>操作符进行清零操作，然后用|操作符设值。比如我要改变<code>GPIOA</code>的状态,可以先对寄存器的值进行<code>&amp;</code>清零操作：</p><pre class=" language-cpp"><code class="language-cpp">GPIOA<span class="token operator">-</span><span class="token operator">></span>CRL <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0XFFFFFF0F</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将第4-7位清0</span></code></pre><p>然后再与需要设置的值进行|或运算：</p><pre class=" language-cpp"><code class="language-cpp">GPIOA<span class="token operator">-</span><span class="token operator">></span>CRL <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0X00000040</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置相应位的值，不改变其他位的值</span></code></pre><p>移位操作提高代码的可读性。</p><p>移位操作在单片机开发中也非常重要，下面让我们看看固件库的<code>GPIO</code>初始化的函数里面的一行代码：</p><pre class=" language-cpp"><code class="language-cpp">GPIOx<span class="token operator">-</span><span class="token operator">></span>BSRR <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span><span class="token number">0x01</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> pinpos<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个操作就是将<code>BSRR</code>寄存器的第<code>pinpos</code>位设置为<code>1</code>，为什么要通过左移而不是直接设置一个固定的值呢？其实，这是为了提高代码的可读性以及可重用性。这行代码可以很直观明了的知道，是将第<code>pinpos</code>位设置为<code>1</code>。如果你写成：</p><pre class=" language-cpp"><code class="language-cpp">GPIOx<span class="token operator">-</span><span class="token operator">></span>BSRR <span class="token operator">=</span> <span class="token number">0x0030</span><span class="token punctuation">;</span></code></pre><p>这样的代码就不好看也不好重用了。<br>类似这样的代码很多:</p><pre class=" language-cpp"><code class="language-cpp">GPIOA<span class="token operator">-</span><span class="token operator">></span>ODR <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//PA.5输出高,不改变其他位</span></code></pre><p>这样我们一目了然，5告诉我们是第5位也就是第6个端口，1告诉我们是设置为1了。</p><h3 id="三、-取反操作使用技巧"><a href="#三、-取反操作使用技巧" class="headerlink" title="三、~取反操作使用技巧"></a>三、~取反操作使用技巧</h3><p><code>SR寄存器</code>的每一位都代表一个状态，某个时刻我们希望去设置某一位的值为0，同时其他位都保留为1，简单的作法是直接给寄存器设置一个值：</p><pre class=" language-cpp"><code class="language-cpp">TIMx<span class="token operator">-</span><span class="token operator">></span>SR <span class="token operator">=</span> <span class="token number">0xFFF7</span>；</code></pre><p>这样的作法设置第3位为0，但是这样的作法同样不好看，并且可读性很差。看看库函数代码中怎样使用的：</p><pre class=" language-cpp"><code class="language-cpp">TIMx<span class="token operator">-</span><span class="token operator">></span>SR <span class="token operator">=</span> <span class="token punctuation">(</span>uint16_t<span class="token punctuation">)</span><span class="token operator">~</span>TIM_FLAG<span class="token punctuation">;</span></code></pre><p>而TIM_FLAG 是通过宏定义定义的值：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">define</span> TIM_FLAG_Update  ((uint16_t)0x0001)</span><span class="token macro property">#<span class="token directive keyword">define</span> TIM_FLAG_CC1     ((uint16_t)0x0002)</span><span class="token macro property">#<span class="token directive keyword">define</span> TIM_FLAG_CC2     ((uint16_t)0x0004)</span><span class="token macro property">#<span class="token directive keyword">define</span> TIM_FLAG_CC3     ((uint16_t)0x0008)</span><span class="token macro property">#<span class="token directive keyword">define</span> TIM_FLAG_CC4     ((int16_t)0x0010)</span><span class="token macro property">#<span class="token directive keyword">define</span> TIM_FLAG_COM     ((uint16_t)0x0020)</span><span class="token macro property">#<span class="token directive keyword">define</span> TIM_FLAG_Trigger ((uint16_t)0x0040)</span><span class="token macro property">#<span class="token directive keyword">define</span> TIM_FLAG_Break   ((uint16_t)0x0080)</span><span class="token macro property">#<span class="token directive keyword">define</span> TIM_FLAG_CC1OF   ((uint16_t)0x0200)</span><span class="token macro property">#<span class="token directive keyword">define</span> TIM_FLAG_CC2OF   ((uint16_t)0x0400)</span><span class="token macro property">#<span class="token directive keyword">define</span> TIM_FLAG_CC3OF   ((uint16_t)0x0800)</span><span class="token macro property">#<span class="token directive keyword">define</span> TIM_FLAG_CC4OF   ((uint16_t)0x1000)</span></code></pre><p>即设置<code>SR</code>第3位为0时可设置为：</p><pre class=" language-cpp"><code class="language-cpp">TIMx<span class="token operator">-</span><span class="token operator">></span>SR <span class="token operator">=</span> <span class="token punctuation">(</span>uint16_t<span class="token punctuation">)</span><span class="token operator">~</span>TIM_FLAG_CC3<span class="token punctuation">;</span></code></pre><p>以上就是关于位操作在嵌入式编程中的一些技巧，如有错误，欢迎指出！</p><h3 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h3><p>《STM32F1开发指南-库函数版本_V3.1 》</p><p>《手把手教你学51单片机》</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】位域</title>
      <link href="/2019/02/14/c-yu-yan-bi-ji-wei-yu/"/>
      <url>/2019/02/14/c-yu-yan-bi-ji-wei-yu/</url>
      
        <content type="html"><![CDATA[<h3 id="位域的概念"><a href="#位域的概念" class="headerlink" title="位域的概念"></a>位域的概念</h3><p>有些数据在存储时并不需要占用一个完整的字节，只需要占用一个或几个二进制位即可。例如开关只有通电和断电两种状态，用 0 和 1 表示足以，也就是用一个二进位。正是基于这种考虑，C语言又提供了一种数据结构，叫做<code>位域</code>或<code>位段</code>。</p><p>位域是操控位的一种方法（操控位的另一种方法是使用按位运算符，按位运算符将在之后的笔记中做介绍）。</p><p>位域通过一个结构声明来建立：该结构声明为每个字段提供标签，并确定该字段的宽度。例如，下面的声明建立了个4个1位的字段：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token punctuation">{</span>   <span class="token keyword">unsigned</span> <span class="token keyword">int</span> autfd<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">unsigned</span> <span class="token keyword">int</span> bldfc<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">unsigned</span> <span class="token keyword">int</span> undin<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">unsigned</span> <span class="token keyword">int</span> itals<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>prnt<span class="token punctuation">;</span></code></pre><p>根据该声明， prnt包含4个1位的字段。现在，可以通过普通的结构成员运算符<code>.</code>单独给这些字段赋值：</p><pre class=" language-cpp"><code class="language-cpp">prnt<span class="token punctuation">.</span>itals <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">:</span>prnt<span class="token punctuation">.</span>undin <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>由于每个字段恰好为1位，所以只能为其赋值<code>1或0</code>。变量<code>prnt</code>被储存在<code>int</code>大小的内存单元中，但是在本例中只使用了其中的4位。</p><p> <code>:</code>后面的数字用来限定成员变量占用的位数。位域的宽度不能超过它所依附的数据类型的长度。通俗地讲，成员变量都是有类型的，这个类型限制了成员变量的最大长度，<code>:</code>后面的数字不能超过这个长度。</p><p>如上述结构中<code>autfd、bldfc、undin、itals</code>后面的数字不能超过<code>unsigned int</code>的位数，即在<code>32bi</code>t环境中就是不能超过32。</p><p>位域的取值范围非常有限，数据稍微大些就会发生溢出，请看下面的例子：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">struct</span> pack<span class="token punctuation">{</span> <span class="token keyword">unsigned</span> a<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 取值范围为：0~3</span> <span class="token keyword">unsigned</span> b<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 取值范围为：0~15</span> <span class="token keyword">unsigned</span> c<span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 取值范围为：0~63</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">struct</span> pack pk1<span class="token punctuation">;</span> <span class="token keyword">struct</span> pack pk2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 给pk1各成员赋值并打印输出</span> pk1<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> pk1<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> pk1<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, %d, %d\n"</span><span class="token punctuation">,</span> pk1<span class="token punctuation">.</span>a<span class="token punctuation">,</span> pk1<span class="token punctuation">.</span>b<span class="token punctuation">,</span> pk1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 给pk2各成员赋值并打印输出</span> pk2<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> pk2<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> pk2<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">66</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, %d, %d\n"</span><span class="token punctuation">,</span> pk2<span class="token punctuation">.</span>a<span class="token punctuation">,</span> pk2<span class="token punctuation">.</span>b<span class="token punctuation">,</span> pk2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序输出结果为：</p><pre class=" language-cpp"><code class="language-cpp">pk1<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> pk1<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> pk1<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">5</span>pk2<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> pk2<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> pk2<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">2</span></code></pre><p>显然，结构体变量<code>pk1</code>的各成员都没有超出限定的位数，能够正常输出。而结构体变量<code>pk2</code>的各成员超出了限定的位数，并发生了<code>上溢</code>（溢出中的一种），关于溢出的概念可查看往期笔记：<a href="https://zhengnianli.github.io/2019/01/10/c-yu-yan-bi-ji-zheng-shu-yi-chu-wen-ti/">【C语言笔记】整数溢出</a></p><p>C语言标准规定，只有有限的几种数据类型可以用于位域。在<code>ANSI C</code> 中，这几种数据类型是<code>signed int</code>和<code>unsigned int</code>；到了<code>C99、C11</code>新增了<code>_Bool</code>的位字段。关于C语言的几套标准可查看往期笔记：<a href="https://zhengnianli.github.io/2018/12/06/c-yu-yan-bi-ji-shi-me-shi-ansi-c-biao-zhun/">【C语言笔记】什么是ANSI C标准？</a></p><h3 id="位域的存储"><a href="#位域的存储" class="headerlink" title="位域的存储"></a>位域的存储</h3><p>位域的存储同样遵循结构体内存对齐的规则，关于结构体内存对齐的问题可查看往期笔记：<a href="https://zhengnianli.github.io/2018/10/20/c-yu-yan-bi-ji-jie-gou-ti-nei-cun-dui-qi/">【C语言笔记】C语言结构体内存对齐问题</a></p><p>看一个例子：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">struct</span> pack<span class="token punctuation">{</span> <span class="token keyword">unsigned</span> a<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span>   <span class="token keyword">unsigned</span> b<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> c<span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(struct pack) = %d"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> pack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序输出结果为：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> pack<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">4</span></code></pre><p>这是因为，a、b、c成员所占的位长之和在一个存储单元（此处为unsigned类型所占的字节数）内，即4个字节内，所以struct pack类型的变量所占的字节长度为4个字节（实际a、b、c一共占用12bit,还有20bit空间为保留的空白）。</p><p>可能有人有疑问，此处a、b、c加起来一共才12bit，两个字节都不到，那么只需要，2个字节不就好了吗。这就是因为内存对齐搞的鬼，此处要将内存对齐到 4 个字节（unsigned类型所占的字节数），以便提高存取效率。</p><p>假如把该结构声明改为：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> pack<span class="token punctuation">{</span> <span class="token keyword">unsigned</span> a<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">;</span>   <span class="token keyword">unsigned</span> b<span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> c<span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>那么，输出结构应该为什么呢？</p><p>输出结果为：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> pack<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">8</span></code></pre><p>因为此时a成员单独占一个内存单元（4字节），b、c成员紧挨着占下一个内存单元（4字节），所以结果为8字节，这也是因为内存对齐。a、b、c占用内存的示意图如：</p><p><a href="https://imgchr.com/i/VHBRuF" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VHBRuF.md.png" alt="VHBRuF.md.png"></a></p><p>其中，空白部分为保留的空白填充内存。这里的空白内存是系统自动留出的，同时，我们也可以自己留出填充内存。如<code>无名位域</code>就可以用来作填充：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> pack<span class="token punctuation">{</span><span class="token keyword">unsigned</span> a<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">;</span>  <span class="token keyword">unsigned</span>  <span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//该位域成员不能使用，用于填充</span><span class="token keyword">unsigned</span> c<span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><code>无名位域一般用来作填充或者调整成员位置。</code>因为没有名称，无名位域不能使用。<br>上面的例子中，如果没有位宽为 20 的无名成员，a、c 将会挨着存储，<code>sizeof(struct pack)</code> 的结果为 4；有了这 20 位作为填充，a、c将分开存储，<code>sizeof(struct pack)</code>的结果为 8。</p><p>位域也是个很重要的知识点，如在<code>DSP2803X</code>的固件库的一些结构封装中普遍用到这样的写法：</p><p><a href="https://imgchr.com/i/VHBWB4" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VHBWB4.md.png" alt="VHBWB4.md.png"></a></p><p>以上就是关于位域的一些笔记，如有错误，欢迎指出！</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【RT-Thread笔记】RT-Thread启动过程</title>
      <link href="/2019/01/23/rt-thread-bi-ji-rt-thread-qi-dong-guo-cheng/"/>
      <url>/2019/01/23/rt-thread-bi-ji-rt-thread-qi-dong-guo-cheng/</url>
      
        <content type="html"><![CDATA[<p>我们学习编程，特别是嵌入式编程，不仅仅要多写代码进行练习，还要多看看一些例程。最近在学习RT-Thread，原子的某例程的的主函数如下（这是在<code>keil5</code>下的截图）：</p><p><a href="https://postimg.cc/1grPLcsK" target="_blank" rel="noopener"><img src="https://i.postimg.cc/FK2RkD6w/001.png" alt="001.png"></a></p><p>这是主函数中的全部代码，主要是创建一个led线程并启动。那么问题来了，要点个灯，怎么也要进行led的硬件初始化吧？但是，在主函数中并没有发现有相关的初始化操作。那么其在哪进行初始化呢？按照我们以往的习惯，主函数就是用户程序的入口啊。难道还有其他入口？还真的有其他入口！这就涉及到RT-Thread的启动过程。</p><p>我们可以借助<code>jlink仿真器</code>进行硬件单步调试就可以知道程序的执行流程了。</p><p>首先，进入调试界面，并点击复位按钮光标就可以跳到程序开始运行的地方。如：</p><p><img src="https://s2.ax1x.com/2019/07/02/ZG8NQS.png" alt="ZG8NQS.png"></p><p>再次，一直点击单步运行按钮，直至光标运行到</p><pre><code>BX      R0</code></pre><p>这一行代码。此时，再点击单步运行按钮，并不会跳转到<code>main.c</code>中的<code>main</code>函数，而是会跳到<code>component.c</code>中的<code>$Sub$$main</code>函数，该函数如下所示：</p><p><img src="https://s2.ax1x.com/2019/07/02/ZG8Bon.png" alt="ZG8Bon.png"></p><p><code>$Sub$$main</code>函数里主要是系统中断失能及调用系统启动函数（系统初始化）。</p><p><code>$Sub$$</code>与<code>$Super$$</code>这两个符号是什么意思呢？在<code>《RT-Thread内核实现与应用开发实战指南》</code>这本书中有解释到：</p><blockquote><p><code>RTThread</code> 使用编译器（这里仅讲解 KEIL， IAR 或者 GCC 稍微有点区别，但是原理是一样的）自带的<code>$Sub$$</code>和<code>$Super$$</code>这两个符号来扩展了 <code>main</code> 函数，使用<code>$Sub$$main</code> 可以在执行main 之前先执行<code>$Sub$$main</code>，在<code>$Sub$$main</code> 函数中我们可以先执行一些预操作，当做完这些预操作之后最终还是要执行 main 函数，这个就通过调用<code>$Super$$main</code> 来实现。 </p></blockquote><p>简单来说，<code>$Sub$$和$Super$$</code>具有补丁功能，可以给一些函数打上<code>补丁</code>，如RT-Thread的内核文件<code>component.c</code>中就给我们的用户主函数main打上了”补丁“。</p><p>在<code>rtthread_startup</code>函数中：主要实现了板级初始化（如led的初始化，串口初始化就是在这里边调用的）；打印RT-Thread的logo和版本信息；初始化系统定时器；初始化调度器；创建application初始化线程(这里将用户main函数作为一个线程，用户main里面是空的）；初始化软件定时器；创建空闲线程；启动系统调度（启用调度后，main函数就会参与调度开始运行）。如：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">rtthread_startup</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* board level initialization    * NOTE: please initialize heap inside board initialization.    */</span>   <span class="token function">rt_hw_board_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* show RT-Thread version */</span>   <span class="token function">rt_show_version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* timer system initialization */</span>   <span class="token function">rt_system_timer_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* scheduler system initialization */</span>   <span class="token function">rt_system_scheduler_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_SIGNALS</span>   <span class="token comment" spellcheck="true">/* signal system initialization */</span>   <span class="token function">rt_system_signal_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>   <span class="token comment" spellcheck="true">/* create init_thread */</span>   <span class="token function">rt_application_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* timer thread initialization */</span>   <span class="token function">rt_system_timer_thread_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* idle thread initialization */</span>   <span class="token function">rt_thread_idle_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_SMP</span>   <span class="token function">rt_hw_spin_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_cpus_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">/*RT_USING_SMP*/</span>   <span class="token comment" spellcheck="true">/* start scheduler */</span>   <span class="token function">rt_system_scheduler_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* never reach here */</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>rt_application_init</code>函数中创建了一个<code>main线程</code>：</p><p><img src="https://s2.ax1x.com/2019/07/02/ZG86zT.png" alt="ZG86zT.png"></p><p><code>main线程</code>的线程函数为：</p><p><img src="https://s2.ax1x.com/2019/07/02/ZG8gQU.png" alt="ZG8gQU.png"></p><p>总结：<code>$Sub$$和$Super$$</code>是成对使用的。可以使用如下结构给函数进行扩展（打补丁）：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">ExtraFunc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 用户自己实现的外部函数*/</span><span class="token keyword">void</span> $Sub$<span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">ExtraFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 做一些其它的设置工作 */</span> $Super$<span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 回到原始的 function 函数 */</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 函数实体 */</span><span class="token punctuation">}</span></code></pre><p>在执行 <code>function</code> 函数会先执行 <code>function</code> 的扩展函数<code>$Sub$$function</code>，在扩展函数里面执行一些扩展的操作，当扩展操作完成后，最后必须调用<code>$Super$$function</code> 函数通过它回到我们原始的 <code>function</code> 函数。</p><p>以上就是关于RT-Thread启动过程的一点总结，如有错误欢迎指出！谢谢</p><p>相关资料：</p><blockquote><p>《RT-Thread内核实现与应用开发实战指南》、</p><p><a href="https://blog.csdn.net/yang1111111112/article/details/80913001" target="_blank" rel="noopener">https://blog.csdn.net/yang1111111112/article/details/80913001</a></p></blockquote><hr><p>我的微信公众号：嵌入式大杂烩</p><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> RTOS </tag>
            
            <tag> RT-Thread </tag>
            
            <tag> 物联网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】结构体</title>
      <link href="/2019/01/22/c-yu-yan-bi-ji-jie-gou-ti/"/>
      <url>/2019/01/22/c-yu-yan-bi-ji-jie-gou-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="一、同时定义多个变量"><a href="#一、同时定义多个变量" class="headerlink" title="一、同时定义多个变量"></a>一、同时定义多个变量</h3><p>我们都知道C语言中变量的类型决定了变量存储占用的空间。当我们要使用一个变量保存年龄时可以将其声明为<code>int</code>类型，当我们要使用一个变量保存某一科目的考试成绩时可以将其声明为<code>float</code>。</p><p>那么，当我们要做一个学生信息管理系统时，需要保存学生的姓名、学号、年龄等信息，该怎么做呢？</p><p>如当要保存三个学生的信息时，</p><h4 id="方法一是："><a href="#方法一是：" class="headerlink" title="方法一是："></a>方法一是：</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>name1<span class="token punctuation">,</span><span class="token operator">*</span>name2<span class="token punctuation">,</span><span class="token operator">*</span>name3<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 三个学生的姓名</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span>num2<span class="token punctuation">,</span>num3<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 三个学生的学号</span><span class="token keyword">int</span> age1<span class="token punctuation">,</span>age2<span class="token punctuation">,</span>age3<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 三个学生的年龄</span></code></pre><h4 id="方法二是："><a href="#方法二是：" class="headerlink" title="方法二是："></a>方法二是：</h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 创建结构体模板</span><span class="token keyword">struct</span> student<span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 学生名字</span>  <span class="token keyword">int</span> num<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 学生学号</span>  <span class="token keyword">int</span> age<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 学生年龄</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用该结构体模板创建三个变量stu1, stu2, stu3</span><span class="token keyword">struct</span> student stu1<span class="token punctuation">,</span> stu2<span class="token punctuation">,</span> stu3<span class="token punctuation">;</span></code></pre><p>显然，方法二跟更清晰，因为它把<code>name、num、age</code>都集成在一个模板，要用的时候只要套用模板进行创建即可。这就是<code>结构体</code>。</p><h3 id="二、什么是结构体"><a href="#二、什么是结构体" class="headerlink" title="二、什么是结构体"></a>二、什么是结构体</h3><p><code>结构体(struct)</code>是由一系列具有相同类型或不同类型的数据项构成的数据集合，这些数据项称为结构体的成员。如上面的<code>student</code>结构体包含三个成员，分别是<code>name、num、age</code>。</p><p>结构体是C语言中的一种构造类型。C语言的数据类型如下图：</p><p><a href="https://imgchr.com/i/VHCDJg" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VHCDJg.md.png" alt="VHCDJg.md.png"></a></p><h3 id="三、结构体变量的定义方法"><a href="#三、结构体变量的定义方法" class="headerlink" title="三、结构体变量的定义方法"></a>三、结构体变量的定义方法</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 创建结构体模板struct student</span><span class="token keyword">struct</span> student<span class="token punctuation">{</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 学生名字</span><span class="token keyword">int</span> num<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 学生学号</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 学生年龄</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用该结构体模板创建三个变量stu1, stu2, stu3</span><span class="token keyword">struct</span> student stu1<span class="token punctuation">,</span> stu2<span class="token punctuation">,</span> stu3<span class="token punctuation">;</span></code></pre><p>此处，student是结构体名，该名字是由任意定义的，但是尽量起个有意义的名称。其相当于一个模板，可以使用这个模板去定义变量<code>stu1，stu2，stu3</code>。定义的时候不要忘了<code>struct</code>。</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 定义三个结构体变量stu1, stu2, stu3</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 学生名字</span><span class="token keyword">int</span> num<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 学生学号</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 学生年龄</span><span class="token punctuation">}</span>stu1<span class="token punctuation">,</span> stu2<span class="token punctuation">,</span> stu3<span class="token punctuation">;</span></code></pre><p>相对于方法一，此处省略了结构体名。虽然更简洁了，但是因为没有了名字，后面就不能用该结构定义新的变量。</p><h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 给结构体模板struct student重新命名为student</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> student<span class="token punctuation">{</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 学生名字</span><span class="token keyword">int</span> num<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 学生学号</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 学生年龄</span><span class="token punctuation">}</span>student<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用student创建三个结构体变量stu1, stu2, stu3</span>student stu1<span class="token punctuation">,</span> stu2<span class="token punctuation">,</span> stu3<span class="token punctuation">;</span></code></pre><p>此处使用<code>typedef</code>为结构体模板<code>struct student</code>定义一个别名<code>student</code>，关于<code>typedef</code>的介绍移步至往期笔记：<a href="https://zhengnianli.github.io/2018/10/11/c-yu-yan-bi-ji-define-yu-typedef-de-qu-bie/">【C语言笔记】#define与typedef的区别？</a>进行查看。使用<code>typedef</code>给结构体创建一个别名，这在实际编程用使用非常广泛，如<code>STM32</code>单片机固件库中，使用得很多，如下图：</p><p><a href="https://imgchr.com/i/VHPZtS" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VHPZtS.md.png" alt="VHPZtS.md.png"></a></p><h3 id="四、初始化结构"><a href="#四、初始化结构" class="headerlink" title="四、初始化结构"></a>四、初始化结构</h3><p>初始化变量和数组如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>结构体变量是否也可以这样初始化？是的，可以。与初始化数组的语法类似：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> student stu1 <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">"ZhengNianJun"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 名字：正念君</span>  <span class="token number">520</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 学号：520</span>  <span class="token number">23</span>              <span class="token comment" spellcheck="true">// 年龄：23</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>简而言之，我们使用在一对花括号中括起来的初始化列表进行初始化，各初始化项用逗号分隔。</p><p>为了让初始化项与结构中各成员的关联更加明显，我们让每个成员的初始化项独占一行。这样做只是为了提高代码的可读性，对编译器而言，只需要用逗号分隔各成员的初始化项即可。</p><p><code>C99</code>和<code>C11</code>为结构提供了<code>指定初始化器（designated initializer）</code>。其初始化器使用点运算符和成员名。例如，只初始化<code>student</code>结构中的<code>name</code>成员，可以这样做：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> student stu1 <span class="token operator">=</span><span class="token punctuation">{</span>   <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"ZhengNianJun"</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>也可以按照任意顺序使用指定初始化器：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> student stu1 <span class="token operator">=</span><span class="token punctuation">{</span>   <span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">,</span>   <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"ZhengNianJun"</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>另外，对特定成员的最后一次赋值才是它实际获得的值。例如，考虑如下代码：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> student stu1 <span class="token operator">=</span><span class="token punctuation">{</span>  <span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">,</span>  <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"ZhengNianJun"</span>，   <span class="token number">1314</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>此时，赋给<code>num</code>的值应该是<code>1314</code>，因为它在结构声明中紧跟在<code>name</code>成员之后。新值<code>1314</code>取代了之前的<code>520</code>。</p><p>指定初始化器在实际编程中也很常用到。如在<code>linux2.6.32.2</code>源码的<code>usb</code>驱动中（路径为：<code>linux-2.6.32.2\drivers\usb\storage\usb.c</code>），有如下代码：</p><p><a href="https://imgchr.com/i/VHPD76" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VHPD76.md.png" alt="VHPD76.md.png"></a></p><h3 id="五、访问结构体成员"><a href="#五、访问结构体成员" class="headerlink" title="五、访问结构体成员"></a>五、访问结构体成员</h3><p>结构体成员的访问需要借助结构体成员运算符——点（.）。如：</p><pre class=" language-c"><code class="language-c">student stu1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义一个结构体变量stu1</span>stu1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"ZhengNianJun"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 给stu1的成员name赋值</span>stu1<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 给stu1的成员num赋值</span>stu1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 给stu1的成员age赋值</span></code></pre><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> student<span class="token punctuation">{</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 学生名字</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 学生学号</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 学生年龄</span><span class="token punctuation">}</span>student<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> student stu1<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 定义一个结构体变量stu1</span> <span class="token comment" spellcheck="true">/* 给结构体变量stu1的成员进行赋值 */</span> stu1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"ZhengNianJun"</span><span class="token punctuation">;</span> stu1<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">;</span> stu1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n============================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"My name is %s\n"</span><span class="token punctuation">,</span> stu1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"My num is %d\n"</span><span class="token punctuation">,</span> stu1<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"My age is %d\n"</span><span class="token punctuation">,</span> stu1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"欢迎关注正念君编程学习笔记！\n"</span><span class="token punctuation">,</span> stu1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"============================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序运行结果为：</p><p><a href="https://imgchr.com/i/VHPq3Q" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VHPq3Q.md.png" alt="VHPq3Q.md.png"></a></p><p>结构体是一块很重要的内容，用得很多。关于结构体的内存对齐可查看往期笔记：<a href="https://zhengnianli.github.io/2018/10/20/c-yu-yan-bi-ji-jie-gou-ti-nei-cun-dui-qi/">【C语言笔记】C语言结构体内存对齐问题</a></p><p>以上就是关于结构体的一些笔记，如有错误欢迎指出。谢谢！</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】枚举</title>
      <link href="/2019/01/15/c-yu-yan-bi-ji-mei-ju/"/>
      <url>/2019/01/15/c-yu-yan-bi-ji-mei-ju/</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>首先，提一下宏定义<code>#define</code>，其一般形式为：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> 宏名 字符串</span></code></pre><p>这个知识点很重要，到处能用得到。其可以与typedef来进行类比进行理解（可查看<a href="https://zhengnianli.github.io/2018/10/11/c-yu-yan-bi-ji-define-yu-typedef-de-qu-bie/">【C语言笔记】define与typedef的区别？</a>）。除此之外，其还可以与枚举<code>enum</code>进行类比。</p><h3 id="二、什么是枚举"><a href="#二、什么是枚举" class="headerlink" title="二、什么是枚举"></a>二、什么是枚举</h3><p>从字面理解，就是一一列举的意思。很多时候，有一些数据的取值有限的，这时候可以把这些可能的结果列出来，并赋予新的名字，这样有助于提高代码的可读性。例如，一个星期有7天，一年有12个月，期末考试科目有6个科目等情况，完全可以一一列举出来。</p><p>当我们要为整数定义一些别名（例如定义为星期数）的时候，可以使用宏定义，如：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">define</span> MON  1</span><span class="token macro property">#<span class="token directive keyword">define</span> TUE  2</span><span class="token macro property">#<span class="token directive keyword">define</span> WED  3</span><span class="token macro property">#<span class="token directive keyword">define</span> THU  4</span><span class="token macro property">#<span class="token directive keyword">define</span> FRI  5</span><span class="token macro property">#<span class="token directive keyword">define</span> SAT  6</span><span class="token macro property">#<span class="token directive keyword">define</span> SUN  7</span></code></pre><p>此时，我们可以使用枚举来达到同样的效果，如：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">enum</span> DAY<span class="token punctuation">{</span>     MON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> TUE<span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token punctuation">,</span> SAT<span class="token punctuation">,</span> SUN<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>其中，<code>enum</code>是关键字，是必须的。<code>DAY</code>是枚举名，可有可无，这个名字是自己定义的；<code>MON=1, TUE, WED, THU, FRI, SAT, SUN</code>是枚举成员。</p><p>枚举成员的值是根据前一个成员的值递增1，即上面枚举定义等价于：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">enum</span> DAY<span class="token punctuation">{</span>    MON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> TUE<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> WED<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> THU<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> FRI<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> SAT<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> SUN<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>若上述定义中第一个成员<code>MON</code>不赋值的话，那么其默认为<code>0</code>。</p><p>若其他成员赋了初值，也是遵循“枚举成员的值是根据前一个成员的值递增1”这一规则，如：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">enum</span> DAY<span class="token punctuation">{</span>   A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>D<span class="token punctuation">,</span>F<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span>G <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>此处</p><pre class=" language-cpp"><code class="language-cpp">A<span class="token operator">=</span><span class="token number">0</span>B<span class="token operator">=</span><span class="token number">1</span>C<span class="token operator">=</span><span class="token number">100</span>D<span class="token operator">=</span><span class="token number">101</span>F<span class="token operator">=</span><span class="token number">200</span>G<span class="token operator">=</span><span class="token number">201</span></code></pre><h3 id="三、枚举类型变量的定义方法"><a href="#三、枚举类型变量的定义方法" class="headerlink" title="三、枚举类型变量的定义方法"></a>三、枚举类型变量的定义方法</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">enum</span> DAY<span class="token punctuation">{</span>    MON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> TUE<span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token punctuation">,</span> SAT<span class="token punctuation">,</span> SUN<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">enum</span> DAY good_day<span class="token punctuation">,</span> bad_day<span class="token punctuation">;</span></code></pre><p>此处，<code>DAY</code>是枚举名，相当于一个模板，可以使用这个模板去定义变量<code>good_day</code>，<code>bad_day</code>，定义的时候不要忘了<code>enum</code>。</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">enum</span><span class="token punctuation">{</span>   MON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> TUE<span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token punctuation">,</span> SAT<span class="token punctuation">,</span> SUN<span class="token punctuation">}</span>good_day<span class="token punctuation">,</span> bad_day<span class="token punctuation">;</span></code></pre><p>相对于方法一，此处省略了枚举名。虽然更简洁了，但是因为没有了名字，后面就不能用该枚举定义新的变量。</p><h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">enum</span> DAY<span class="token punctuation">{</span>   MON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> TUE<span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token punctuation">,</span> SAT<span class="token punctuation">,</span> SUN<span class="token punctuation">}</span>DAY<span class="token punctuation">;</span>DAY good_day<span class="token punctuation">,</span> bad_day<span class="token punctuation">;</span></code></pre><p>此处使用<code>typedef</code>为枚举定义一个别名，这个别名为<code>DAY</code>，关于<code>typedef</code>的介绍可点击文首的链接进行查看。</p><h4 id="程序实例"><a href="#程序实例" class="headerlink" title="程序实例"></a>程序实例</h4><p>编译环境为 : <code>gcc 6.3.0</code></p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">enum</span> DAY<span class="token punctuation">{</span>  MON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> TUE<span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token punctuation">,</span> SAT<span class="token punctuation">,</span> SUN<span class="token punctuation">}</span>DAY<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> DAY good_day<span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你觉得一周中哪一天最美好？\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>good_day<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"我比较喜欢"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">switch</span><span class="token punctuation">(</span>good_day<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">case</span> MON<span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> TUE<span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> WED<span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> THU<span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> FRI<span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> SAT<span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> SUN<span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">default</span><span class="token operator">:</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序运行结果：</p><p><a href="https://imgchr.com/i/VH8JUS" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VH8JUS.md.png" alt="VH8JUS.md.png"></a></p><h3 id="四、枚举变量占用的字节数？"><a href="#四、枚举变量占用的字节数？" class="headerlink" title="四、枚举变量占用的字节数？"></a>四、枚举变量占用的字节数？</h3><p>实测程序：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">enum</span> DAY<span class="token punctuation">{</span>  MON<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> TUE<span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token punctuation">,</span> SAT<span class="token punctuation">,</span> SUN<span class="token punctuation">}</span>DAY<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> DAY good_day<span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(DAY) = %d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(good_day) = %d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>good_day<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(int) = %d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><p><a href="https://imgchr.com/i/VH8U3j" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VH8U3j.md.png" alt="VH8U3j.md.png"></a></p><p>从该程序运行结果也可看出，枚举类型变量需要存放的是一个整数，它的长度和int的长度相同。</p><p>以上就是关于枚举类型enum的一些笔记，如有错误欢迎指出。</p><p>最后，分享两篇关于枚举的文章，都讲得很详细。</p><pre class=" language-c"><code class="language-c">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>cnblogs<span class="token punctuation">.</span>com<span class="token operator">/</span>JCSU<span class="token operator">/</span>articles<span class="token operator">/</span><span class="token number">1299051</span><span class="token punctuation">.</span>htmlhttp<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>c<span class="token punctuation">.</span>biancheng<span class="token punctuation">.</span>net<span class="token operator">/</span>cpp<span class="token operator">/</span>html<span class="token operator">/</span><span class="token number">99</span><span class="token punctuation">.</span>html</code></pre><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】整数溢出问题</title>
      <link href="/2019/01/10/c-yu-yan-bi-ji-zheng-shu-yi-chu-wen-ti/"/>
      <url>/2019/01/10/c-yu-yan-bi-ji-zheng-shu-yi-chu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>整数溢出是一种未定义的行为，当产生溢出行为时，系统并不会通知用户，所以应当多加小心。如下是整数溢出的一个案例：</p><p><a href="https://imgchr.com/i/VHnOiR" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VHnOiR.md.png" alt="VHnOiR.md.png"></a></p><p>SMT爆出的美图BEC代币出现的安全漏洞—整数溢出，该漏洞代理的直接经济损失高达上亿元人民币，间接产生的负面影响目前无法估量。</p><h3 id="二、什么是整数溢出？"><a href="#二、什么是整数溢出？" class="headerlink" title="二、什么是整数溢出？"></a>二、什么是整数溢出？</h3><p>计算机语言中整数类型都有一个取值范围，两个整数进行运算时，若其结果大于最大值（<code>上溢</code>）或者小于最小值（<code>下溢</code>）就是溢出。</p><p>假如最大值为 <code>a</code> ，在最大值和最小值之间如果发生以下计算：</p><blockquote><p>a+1=0或0-1=a</p></blockquote><p>此时就会发生溢出，其中<code>a+1=0</code>会发生上溢，<code>0-1=a</code>会发生下溢。</p><h3 id="三、程序实例"><a href="#三、程序实例" class="headerlink" title="三、程序实例"></a>三、程序实例</h3><p>示例（在32bit环境中编译）</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 整数溢出例子</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">short</span> i <span class="token operator">=</span> <span class="token number">32767</span><span class="token punctuation">;</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> j <span class="token operator">=</span> <span class="token number">65535</span><span class="token punctuation">;</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 上溢例子</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%hd %hd %hd\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 上溢例子</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%hu %hu %hu\n"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 下溢例子</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%hu %hu %hu\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> k<span class="token number">-1</span><span class="token punctuation">,</span> k<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序运行结果为：</p><p><a href="https://imgchr.com/i/VHnzQK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VHnzQK.md.png" alt="VHnzQK.md.png"></a></p><p>在32bit环境中，short（占两个字节）的范围为：</p><pre class=" language-c"><code class="language-c"><span class="token operator">-</span><span class="token number">32768</span><span class="token operator">~</span><span class="token number">32767</span></code></pre><p>unsigned short的范围为：</p><pre><code>0~65535</code></pre><p>所以<code>short</code>类型的<code>i=32767</code>加1、加2时会产生上溢。<code>unsigned short</code>类型的<code>j=65535</code>加1、加2时会产生上溢。<code>unsigned short</code>类型的k=0减1、减2时会产生下溢。</p><p>（ps：可以使用程序来查看整数数据类型的范围，具体可移步至<a href="https://zhengnianli.github.io/2018/12/06/c-yu-yan-bi-ji-shi-me-shi-ansi-c-biao-zhun/">【C语言笔记】如何查看数据类型范围？</a>进行查看）</p><p>以上就是关于整数溢出的笔记分享，如有错误欢迎指出！</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】函数指针作为函数的参数</title>
      <link href="/2019/01/04/c-yu-yan-bi-ji-han-shu-zhi-zhen-zuo-wei-han-shu-de-can-shu/"/>
      <url>/2019/01/04/c-yu-yan-bi-ji-han-shu-zhi-zhen-zuo-wei-han-shu-de-can-shu/</url>
      
        <content type="html"><![CDATA[<p>函数指针有两种常用的用法，一种是作为结构体成员，关于函数指针作为结构体成员的用法可移步至上一篇<a href="https://zhengnianli.github.io/2019/01/03/c-yu-yan-bi-ji-han-shu-zhi-zhen-zuo-wei-jie-gou-ti-cheng-yuan/">【C语言笔记】函数指针作为结构体成员</a>进行查看。另一种是函数指针作为函数的参数。这一篇分享的是函数指针作为函数的参数。</p><h3 id="一、函数指针作为函数的参数"><a href="#一、函数指针作为函数的参数" class="headerlink" title="一、函数指针作为函数的参数"></a>一、函数指针作为函数的参数</h3><p>函数指针可以作为一个参数传递给另一个函数。这时函数指针的使用就像普通的常量和变量一样。当函数指针作为参数传递的时候，这时接收参数传递的函数通常需要根据这个指针调用这个函数。作为参数传递的函数指针通常表示<code>回调函数（Callback Functions）</code>。</p><h4 id="1、什么是回调函数？"><a href="#1、什么是回调函数？" class="headerlink" title="1、什么是回调函数？"></a>1、什么是回调函数？</h4><p>回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。</p><h4 id="2、回调函数在实际中有什么作用？"><a href="#2、回调函数在实际中有什么作用？" class="headerlink" title="2、回调函数在实际中有什么作用？"></a>2、回调函数在实际中有什么作用？</h4><p>先假设有这样一种情况：我们要编写一个库，它提供了某些排序算法的实现（如冒泡排序、快速排序等等），为了能让库更加通用，不想在函数中嵌入排序逻辑，而让使用者来实现相应的逻辑；或者，能让库可用于多种数据类型（int、float、string），此时，该怎么办呢？可以使用函数指针，并进行回调。</p><p>例如，在C语言的通用工具库stdlib.h中，有如下一个函数原型：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">qsort</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> size_t<span class="token punctuation">,</span> size_t<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">(</span>comp<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>这是在C通用工具库中声明的一个快速排序算法函数，其可以用来排序int类型、float类型以及字符串数据，可以按从小到大的顺序也可以按从大到小的顺序排序。其关键在于函数指针comp指向的函数的具体实现。</p><h3 id="二、举例说明"><a href="#二、举例说明" class="headerlink" title="二、举例说明"></a>二、举例说明</h3><p>上一节我们使用函数指针作为结构体成员来实现四则运算，这里一节我们稍微修改一下代码，使用函数指针作为函数参数来实现四则运算。</p><p>设计如下函数：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> fun_t operation<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> result<span class="token punctuation">;</span> result <span class="token operator">=</span> <span class="token function">operation</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 运算</span> <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中，fun_t是一个函数指针，其定义为：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fun_t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该函数指针<code>fun_t</code>指向一个带两个<code>int</code>类型的形参、<code>int</code>类型的返回值的函数。使用关键字<code>typedef</code>对<code>int (*)(int, int)</code>进行重命名（封装）为<code>fun_t</code>。关于typedef与define的区别可查看往期笔记：<a href="https://zhengnianli.github.io/2018/10/11/c-yu-yan-bi-ji-define-yu-typedef-de-qu-bie/">【C语言笔记】#define与typedef的区别？</a></p><p>根据函数指针变量<code>operation</code>指向不同的运算函数可实现加法运算、减法运算、乘法运算、除法运算。</p><p>主函数代码如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">192</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">48</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 两个数相加的操作 */</span> result <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> add2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加法运算: %d+%d = %d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 两个数相减的操作 */</span> result <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> sub2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"减法运算: %d-%d = %d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 两个数相乘的操作 */</span> result <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> mul2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"乘法运算: %d*%d = %d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 两个数相除的操作 */</span> result <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> div2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"除法运算: %d/%d = %d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实现运算的4个函数很简单，如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">sub2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">mul2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token operator">*</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">div2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token operator">/</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序运行结果为：</p><p><a href="https://imgchr.com/i/VHQH6x" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VHQH6x.md.png" alt="VHQH6x.md.png"></a></p><p>以上就是关于函数指针作为函数参数的笔记，如有错误欢迎指出！</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】函数指针作为结构体成员</title>
      <link href="/2019/01/03/c-yu-yan-bi-ji-han-shu-zhi-zhen-zuo-wei-jie-gou-ti-cheng-yuan/"/>
      <url>/2019/01/03/c-yu-yan-bi-ji-han-shu-zhi-zhen-zuo-wei-jie-gou-ti-cheng-yuan/</url>
      
        <content type="html"><![CDATA[<h3 id="函数指针在C语言中的意义"><a href="#函数指针在C语言中的意义" class="headerlink" title="函数指针在C语言中的意义"></a>函数指针在C语言中的意义</h3><p>在C语言程序中，数据结构和算法是两个基本的元素。C语言的基本数据类型、结构体、数组和联合体是数据结构的代表；C语言中的函数则是算法的代表。只有将数据结构和算法有机结合才能构成具有一定功能的程序。</p><h3 id="函数指针的应用"><a href="#函数指针的应用" class="headerlink" title="函数指针的应用"></a>函数指针的应用</h3><p>函数指针在嵌入式中的应用非常广泛，常常把函数指针作为结构体的成员、作为函数的参数等。如在物联网操作系统RT-Thread内核源码中，有如下代码：</p><h4 id="1、函数指针作为结构体成员"><a href="#1、函数指针作为结构体成员" class="headerlink" title="1、函数指针作为结构体成员"></a>1、函数指针作为结构体成员</h4><p><a href="https://imgchr.com/i/VHlag1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VHlag1.md.png" alt="VHlag1.md.png"></a></p><h4 id="2、函数指针作为函数的参数"><a href="#2、函数指针作为函数的参数" class="headerlink" title="2、函数指针作为函数的参数"></a>2、函数指针作为函数的参数</h4><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><p>建立一个结构体，用于四则运算（根据函数指针的指向可以选择加法运算、减法运算、乘法运算、除法运算），如</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fun_t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 包含了数据和算法的结构体</span><span class="token keyword">struct</span> Source<span class="token punctuation">{</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数据a</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数据b</span> fun_t operation<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 算法operation</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>主函数内可以进行如下操作：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> Source data<span class="token punctuation">;</span><span class="token keyword">int</span> result<span class="token punctuation">;</span>data<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>data<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 两个数相加的操作 */</span>data<span class="token punctuation">.</span>operation <span class="token operator">=</span> add2<span class="token punctuation">;</span>  result <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>a<span class="token punctuation">,</span> data<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加法运算: %d+%d = %d\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>a<span class="token punctuation">,</span> data<span class="token punctuation">.</span>b<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>函数指针<code>data.operation</code>指向加法函数<code>add2</code>，则调用<code>data.operation</code>就可以进行加法运算。同理，有：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 两个数相减的操作 */</span>data<span class="token punctuation">.</span>operation <span class="token operator">=</span> sub2<span class="token punctuation">;</span>result <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>a<span class="token punctuation">,</span> data<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"减法运算: %d-%d = %d\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>a<span class="token punctuation">,</span> data<span class="token punctuation">.</span>b<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 两个数相乘的操作 */</span>data<span class="token punctuation">.</span>operation <span class="token operator">=</span> mul2<span class="token punctuation">;</span>result <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>a<span class="token punctuation">,</span> data<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"乘法运算: %d*%d = %d\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>a<span class="token punctuation">,</span> data<span class="token punctuation">.</span>b<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 两个数相除的操作 */</span>data<span class="token punctuation">.</span>operation <span class="token operator">=</span> div2<span class="token punctuation">;</span>result <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>a<span class="token punctuation">,</span> data<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"除法运算: %d/%d = %d\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>a<span class="token punctuation">,</span> data<span class="token punctuation">.</span>b<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行结果：</p><p><a href="https://imgchr.com/i/VHl4Df" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VHl4Df.md.png" alt="VHl4Df.md.png"></a></p><p>以上就是函数指针作为结构体成员的笔记，如有错误欢迎指出！</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】你的黑窗口闪退？</title>
      <link href="/2018/12/24/c-yu-yan-bi-ji-ni-de-hei-chuang-kou-shan-tui/"/>
      <url>/2018/12/24/c-yu-yan-bi-ji-ni-de-hei-chuang-kou-shan-tui/</url>
      
        <content type="html"><![CDATA[<p>上一篇中写到了Windows下体验Linux环境，其中的测试代码简单的打印一句话，如：</p><p><a href="https://imgchr.com/i/V73PHO" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/16/V73PHO.md.png" alt="V73PHO.md.png"></a></p><p>编译后得到<code>test.exe</code>，运行得到如下结果：</p><p><a href="https://imgchr.com/i/V73uKP" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/16/V73uKP.md.png" alt="V73uKP.md.png"></a></p><p>在命令行下运行可以输出结果，但是在文件夹下，双击运行test1.exe却发现黑窗口一闪而过：</p><p><a href="https://imgchr.com/i/V73GCj" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/16/V73GCj.md.png" alt="V73GCj.md.png"></a></p><p>怎么让黑窗口暂停呢？这里有两种方法：</p><p>【方法一】在程序的最后添加一行代码：</p><pre class=" language-c"><code class="language-c"><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>同时，添加头文件<code>stdlib.h</code>，即</p><p><a href="https://imgchr.com/i/V73arV" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/16/V73arV.md.png" alt="V73arV.md.png"></a></p><p><code>system</code>是C函数库<code>stdlib.h</code>中的一个函数，函数原型为：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">system</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> command<span class="token punctuation">)</span>；</code></pre><p>将命令<code>command</code>传给系统，其中<code>pause</code>命令的意思是让程序暂停一下，显示一个中文信息：<code>请按任意键继续. . .</code>，或者英文信息：<code>Press any key to continue . . .</code>。</p><p>编译，运行结果为：</p><p><a href="https://imgchr.com/i/V73sPJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/16/V73sPJ.md.png" alt="V73sPJ.md.png"></a></p><p>有些<code>IDE（集成开发环境）</code>会自动输出<code>请按任意键继续. . .</code>这一句，有些没有，想让程序暂停一下就得手动添加<code>system(&quot;pause&quot;);</code>这一句代码。</p><p>【方法二】在程序的最后添加一行代码：</p><pre class=" language-c"><code class="language-c"><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>即：</p><p><a href="https://imgchr.com/i/V78SiQ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/16/V78SiQ.md.png" alt="V78SiQ.md.png"></a></p><p><code>getchar()</code>用于读取一次按键按下（读取字符）。当程序调用<code>getchar()</code>时，程序就等着用户按键。用户输入的字符被存放在键盘缓冲区中，直到用户按回车为止（回车字符也放在缓冲区中）。关于getchar()，可以查看往期笔记getchar()、getche()、getch()的区别？</p><p>编译，运行结果：</p><p><a href="https://imgchr.com/i/V78EZT" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/16/V78EZT.md.png" alt="V78EZT.md.png"></a></p><p>以上就是解决黑窗口闪退的两种方法，如有错误，欢迎指出！</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】windows命令行下编译C程序</title>
      <link href="/2018/12/23/c-yu-yan-bi-ji-windows-ming-ling-xing-xia-bian-yi-c-cheng-xu/"/>
      <url>/2018/12/23/c-yu-yan-bi-ji-windows-ming-ling-xing-xia-bian-yi-c-cheng-xu/</url>
      
        <content type="html"><![CDATA[<p>有关注我的朋友可能会知道我的C开发环境是：<code>Notepad++</code>与<code>MinGW</code>相结合，即用<code>Notepad++</code>写代码，用<code>MinGW</code>这个工具包中的<code>gcc编译器</code>进行编译。如：</p><p>在Notepad++里写代码：</p><p><a href="https://imgchr.com/i/VH1SVU" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VH1SVU.md.png" alt="VH1SVU.md.png"></a></p><p>在黑窗口下编译及运行代码：</p><p><a href="https://imgchr.com/i/VH1954" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VH1954.md.png" alt="VH1954.md.png"></a></p><p>此处，编译命令为:</p><pre class=" language-c"><code class="language-c">gcc hello<span class="token punctuation">.</span>c</code></pre><p>生成的可执行文件默认为<code>a.exe</code>，输入<code>a.exe</code>即可运行该可执行程序。同样，也可添加<code>-o</code>参数给<code>a.exe</code>进行重命名，如把<code>hello.c</code>编译生成的可执行文件命名为<code>hello.exe</code>的编译命令为:</p><pre class=" language-c"><code class="language-c">gcc hello<span class="token punctuation">.</span>c <span class="token operator">-</span>o hello<span class="token punctuation">.</span>exe</code></pre><p>此时就可以输出<code>hello.exe</code>运行该程序，如：</p><p><a href="https://imgchr.com/i/VH1iG9" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VH1iG9.md.png" alt="VH1iG9.md.png"></a></p><p>学会这种编译方式后，之后转到Linux环境下进行编译也是类似的，编译的命令是一样的。之前已经分享过了这个环境的安装配置方法，可能有些朋友还不是很清楚怎么配置（配置方法请查看使用<a href="https://zhengnianli.github.io/2018/10/05/c-yu-yan-bi-ji-shi-yong-notepad-mingw-lai-kai-fa-c-cheng-xu/">【C语言笔记】使用Notepad++来开发C程序</a>）。</p><p>这不，昨天有位朋友问我怎么在黑窗口下切换路径的问题，因为不会切换路径所以无法找到代码文件的位置。现教大家怎么切换路径：</p><p>（1）首先要知道怎么切换盘符，切换盘符示例：</p><p><a href="https://imgchr.com/i/VH1GsP" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VH1GsP.md.png" alt="VH1GsP.md.png"></a></p><p>（2）其次，就可以找到该盘符下你的代码的位置，比如我的代码在<code>D:\c_test</code>路径下，那么我就可以如下操作切换到<code>D:\c_test</code>路径：</p><p><a href="https://imgchr.com/i/VH10Rs" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VH10Rs.md.png" alt="VH10Rs.md.png"></a></p><p>还有方法是，你可以直接<code>cd</code>至你源代码所在目录的绝对路径，如：</p><p><a href="https://imgchr.com/i/VH1Wi4" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VH1Wi4.md.png" alt="VH1Wi4.md.png"></a></p><p><a href="https://imgchr.com/i/VH1zQI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VH1zQI.md.png" alt="VH1zQI.md.png"></a></p><p>此外，有两个小技巧要告诉大家：</p><p>（1）<code>【Tab】键</code>具有补齐功能，比如你输出<code>cd c_</code>,然后按下<code>【Tab】键</code>就可以自动补齐为：<code>cd c_test</code>。</p><p>（2）你不记得文件夹的名字时可以输入<code>dir命令</code>（类似于linux系统中的ls命令）查看当前文件夹下的所有文件及文件夹，如：</p><p><a href="https://imgchr.com/i/VH3Cef" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VH3Cef.md.png" alt="VH3Cef.md.png"></a></p><p>以上就是在黑窗口下切换至源码路径的一种方法，如果你不会的话，还有另一种更为简单的方法：</p><p>在记事本中就可以很方便的在黑窗口中打开你的源码所在的路径：</p><p><a href="https://imgchr.com/i/VH3MwT" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VH3MwT.md.png" alt="VH3MwT.md.png"></a></p><p>既然已经讲了那么多了，就顺便讲一下多个文件该怎么编译。其实和编译一个文件也差不多，编译多个文件就把要编译的文件都加到编译命令中就可以了，如：</p><pre class=" language-c"><code class="language-c">gcc cJSON<span class="token punctuation">.</span>c json_parse_now<span class="token punctuation">.</span>c <span class="token operator">-</span>o test<span class="token punctuation">.</span>exe</code></pre><p>该命令同时编译链接<code>JSON.c</code>和<code>json_parse_now.c</code>文件。</p><p>以上就是关于如何在window命令行下编译C程序的一点补充的笔记，掌握这一点就可以无缝切换到Linux下进行编译C程序了（相关笔记：<a href="https://zhengnianli.github.io/2018/12/23/c-yu-yan-bi-ji-windows-xia-ti-yan-linux-huan-jing/">【C语言笔记】windows下体验Linux环境</a>）。关于C程序的编译过程可查看往期笔记：<a href="https://zhengnianli.github.io/2018/10/14/c-yu-yan-bi-ji-c-yu-yan-bian-yi-de-guo-cheng/">【C语言笔记】C语言编译的过程</a></p><p>以上就是关于在windows命令行编译C程序的方法，如有错误，欢迎指出！</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】Windows下体验Linux环境</title>
      <link href="/2018/12/23/c-yu-yan-bi-ji-windows-xia-ti-yan-linux-huan-jing/"/>
      <url>/2018/12/23/c-yu-yan-bi-ji-windows-xia-ti-yan-linux-huan-jing/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>若要使用Linux环境，可以把Linux操作系统装在真机上，也可以把Linux操作系统安装在虚拟机上（如VMware）。本文介绍除了这两种方法之外的第三种可以使用Linux环境的方法，请往下看。</p><p>在Windows系统下可以使用集成开发环境（如Visual Studio、VC++、C-free等）编译C语言源代码文件，也可以使用命令行编译。</p><p>若要使用命令行编译C文件，就必须得安装C编译器，因为C编译器不是标准Windows软件包的一部分，因此需要从别处获取并安装。常用的有两种：一种是<code>MinGW</code>（之前已经分享过，可移步至MinGW进行查看）；另一种是<code>Cygwin</code>，本文着重介绍Cygwin。</p><h3 id="Cygwin简介"><a href="#Cygwin简介" class="headerlink" title="Cygwin简介"></a>Cygwin简介</h3><p><code>Cygwin</code>是一个在windows平台上运行的<code>类UNIX</code>模拟环境，是<code>cygnus solutions</code>公司开发的自由软件（该公司开发的著名工具还有<code>eCos</code>，不过现已被<code>Redhat</code>收购）。</p><p>它对于学习<code>UNIX/Linux</code>操作环境，或者从<code>UNIX</code>到<code>Windows</code>的应用程序移植，或者进行某些特殊的开发工作，尤其是使用<code>GNU</code>工具集在<code>Windows</code>上进行嵌入式系统开发，非常有用。随着嵌入式系统开发在国内日渐流行，越来越多的开发者对<code>Cygwin</code>产生了兴趣。</p><h3 id="Cygwin下载、安装"><a href="#Cygwin下载、安装" class="headerlink" title="Cygwin下载、安装"></a>Cygwin下载、安装</h3><p>1、下载链接</p><blockquote><p><a href="https://cygwin.com/install.html" target="_blank" rel="noopener">https://cygwin.com/install.html</a></p></blockquote><p>打开该网址，可以看到如下页面：</p><p><a href="https://imgchr.com/i/V7hayn" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/V7hayn.md.png" alt="V7hayn.md.png"></a></p><p>根据自己的需求选择下载32bit或者64bit的Cygwin包。</p><p>2、安装</p><p>由上一步下载得到.exe结尾的软件，双击进行安装，一直点击下一步直至安装完成。安装的路径根据自己的需要进行选择。</p><h3 id="Cygwin的使用"><a href="#Cygwin的使用" class="headerlink" title="Cygwin的使用"></a>Cygwin的使用</h3><p>打开上一步安装的路径，如：</p><p><a href="https://imgchr.com/i/V7hBwV" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/V7hBwV.md.png" alt="V7hBwV.md.png"></a></p><p>双击<code>Cygwin.bat</code>文件即可打开Linux命令行。双击后得到如下界面：</p><p><a href="https://imgchr.com/i/V7hDoT" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/V7hDoT.md.png" alt="V7hDoT.md.png"></a></p><p>这就是Linux命令行，然后就可以进行一些Linux练习啦。如：</p><p><a href="https://imgchr.com/i/V7h6W4" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/V7h6W4.md.png" alt="V7h6W4.md.png"></a></p><p>进行如上操作后，就可以在<code>/c_test/test1/</code>路径下看到<code>test.c</code>文件啦（以上创建文件及文件夹的操作也可以直接在Windows下完成）。如：</p><p><a href="https://imgchr.com/i/V7vLeU" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/V7vLeU.md.png" alt="V7vLeU.md.png"></a></p><p>使用<code>notepad++</code>打开该<code>test1.c</code>输入如下代码并保存：</p><p><a href="https://imgchr.com/i/V7x3Tg" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/V7x3Tg.md.png" alt="V7x3Tg.md.png"></a></p><p>然后在我们的Linux终端中进行编译：</p><p><a href="https://imgchr.com/i/V7xTtH" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/V7xTtH.md.png" alt="V7xTtH.md.png"></a></p><p>以上就是关于在windows下体验Linux的方法。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】分享一个C语言测试程序模板</title>
      <link href="/2018/12/14/c-yu-yan-bi-ji-fen-xiang-yi-ge-c-yu-yan-ce-shi-cheng-xu-mo-ban/"/>
      <url>/2018/12/14/c-yu-yan-bi-ji-fen-xiang-yi-ge-c-yu-yan-ce-shi-cheng-xu-mo-ban/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>平时需要测试一些比较模糊的知识点，或则想要验证一些函数时，我们常常会建一个<code>test.c</code>文件，然后在这个文件里写我们的测试代码，测试完毕后常常会删掉该文件。下次再遇到同样的问题的时候，可能又是记不清楚了，常常又需要测试一遍，这是件很浪费时间的事情。</p><p>所以，我们可以编写一个专门用于测试的程序：（1）有菜单，可以通过菜单选择想要测试的函数；（2）有功能函数，把一些需要测试的功能封装成一个函数；（3）有测试函数，用于测试功能函数及一些知识点。</p><p>该测试程序大致如下：</p><p><a href="https://imgchr.com/i/V7zbaF" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/V7zbaF.md.png" alt="V7zbaF.md.png"></a></p><p>我们只要输入菜单前面的数字就可以进行对应的测试啦。挺方便的，日积月累，渐渐的，就可以积累很多知识点。如：</p><p><a href="https://imgchr.com/i/V7zXG9" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/V7zXG9.md.png" alt="V7zXG9.md.png"></a></p><h3 id="该测试程序代码模板"><a href="#该测试程序代码模板" class="headerlink" title="该测试程序代码模板"></a>该测试程序代码模板</h3><h3 id="1、菜单函数如下："><a href="#1、菜单函数如下：" class="headerlink" title="1、菜单函数如下："></a>1、菜单函数如下：</h3><p><a href="https://imgchr.com/i/V7zvx1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/V7zvx1.md.png" alt="V7zvx1.md.png"></a></p><h3 id="2、主函数如下："><a href="#2、主函数如下：" class="headerlink" title="2、主函数如下："></a>2、主函数如下：</h3><p><a href="https://imgchr.com/i/VHSiIe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VHSiIe.md.png" alt="VHSiIe.md.png"></a></p><h3 id="3、该测试程序函数声明部分如下"><a href="#3、该测试程序函数声明部分如下" class="headerlink" title="3、该测试程序函数声明部分如下"></a>3、该测试程序函数声明部分如下</h3><p><a href="https://imgchr.com/i/VHSeMt" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VHSeMt.md.png" alt="VHSeMt.md.png"></a></p><p>完整程序</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*---------------------------------------------------------------------------------------- 程序说明：这是一个测试程序 创建日期：2018.12.14 by LiZhengNian----------------------------------------------------------------------------------------*/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;limits.h></span></span><span class="token comment" spellcheck="true">// 功能函数声明</span><span class="token keyword">void</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 交换a，b的值最好的方法</span><span class="token comment" spellcheck="true">// 测试函数声明</span><span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 测试函数1：交换a，b的值</span><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 测试函数2：C语言预定义宏</span><span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 测试函数3：C89与C99标准的区别</span><span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 测试函数4：输出当前编译器数据类型范围</span><span class="token comment" spellcheck="true">// 菜单</span><span class="token keyword">int</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*=============================================================================               主函数==============================================================================*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> cmd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 死循环，等价于while(1)</span> <span class="token punctuation">{</span>   cmd <span class="token operator">=</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 读取用户输入的指令</span>   <span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>   <span class="token punctuation">{</span>     <span class="token keyword">case</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 测试函数1：交换a，b的值</span>     <span class="token keyword">case</span> <span class="token number">2</span> <span class="token punctuation">:</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 测试函数2：C语言预定义宏</span>     <span class="token keyword">case</span> <span class="token number">3</span> <span class="token punctuation">:</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 测试函数3：C89与C99标准的区别</span>     <span class="token keyword">case</span> <span class="token number">4</span> <span class="token punctuation">:</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 测试函数4：输出当前编译器数据类型范围</span>     <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 退出程序</span>     <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 清空屏幕</span>     <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*=============================================================================               以下是功能函数实体==============================================================================*/</span><span class="token comment" spellcheck="true">/* 交换a，b的值 */</span><span class="token keyword">void</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token operator">^</span><span class="token operator">*</span>b<span class="token punctuation">;</span> <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token operator">^</span><span class="token operator">*</span>b<span class="token punctuation">;</span> <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token operator">^</span><span class="token operator">*</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*=============================================================================               以下是测试函数实体==============================================================================*/</span><span class="token comment" spellcheck="true">/* 交换a，b的值 */</span><span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"交换之前a = %d, b = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"交换之后a = %d, b = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* C语言预定义宏 */</span><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前代码行号：%d\n"</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前编译日期：%s\n"</span><span class="token punctuation">,</span> <span class="token constant">__DATE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前编译时间：%s\n"</span><span class="token punctuation">,</span> <span class="token constant">__TIME__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前文件名称：%s\n"</span><span class="token punctuation">,</span> <span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前函数名称：%s\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* C89与C99标准的区别 */</span><span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// C99允许在for循环内定义循环变量，而C89不允许</span> <span class="token comment" spellcheck="true">// gcc -std=c99 test.c -o test.exe</span> <span class="token comment" spellcheck="true">// for (int i = 0; i &lt; 5; i++)  </span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 输出当前编译器数据类型范围 */</span><span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"char的范围为: %d —— %d\n"</span><span class="token punctuation">,</span> CHAR_MIN<span class="token punctuation">,</span> CHAR_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned char的范围为: %u —— %u\n\n"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> UCHAR_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"short的范围为: %hd —— %hd\n"</span><span class="token punctuation">,</span> SHRT_MIN<span class="token punctuation">,</span> SHRT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned short的范围为: %hu —— %hu\n\n"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> USHRT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"int的范围为: %d —— %d\n"</span><span class="token punctuation">,</span> INT_MIN<span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned int的范围为: %u —— %u\n\n"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> UINT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"long的范围为: %ld —— %ld\n"</span><span class="token punctuation">,</span> LONG_MIN<span class="token punctuation">,</span> LONG_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned long的范围为: %lu —— %lu\n\n"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ULONG_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"long long的范围为: %lld —— %lld\n"</span><span class="token punctuation">,</span> LLONG_MIN<span class="token punctuation">,</span> LLONG_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned long long的范围为: %llu —— %llu\n\n"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ULLONG_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*=============================================================================               以下是菜单函数==============================================================================*/</span><span class="token keyword">int</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> cmd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 菜单信息输出</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"=============================菜单==============================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[01]测试：交换a，b的值\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[02]测试：C语言预定义宏\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[03]测试：C89与C99标准的区别\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[04]测试：输出当前编译器数据类型范围\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[-1]退出\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[-2]清屏\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"===============================================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">do</span><span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入您的选择："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">gets</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>   cmd <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cmd <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> cmd <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> cmd<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>每当需要测试一些知识点时，就可以按照这样子的格式在后边添加，可以很好地进行积累。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】如何查看数据类型范围？</title>
      <link href="/2018/12/07/c-yu-yan-bi-ji-ru-he-cha-kan-shu-ju-lei-xing-fan-wei/"/>
      <url>/2018/12/07/c-yu-yan-bi-ji-ru-he-cha-kan-shu-ju-lei-xing-fan-wei/</url>
      
        <content type="html"><![CDATA[<h3 id="1-知识点一：查看整数范围"><a href="#1-知识点一：查看整数范围" class="headerlink" title="1. 知识点一：查看整数范围"></a>1. 知识点一：查看整数范围</h3><p>当前的编译环境下，你可能不知道int的数据范围是多少，或者记不清无符号短整型的范围是<code>0~65535</code>还是<code>0~65536</code>?这时候就可以按照如下程序进行输出查看：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;limits.h></span></span><span class="token comment" spellcheck="true">/* 输出当前编译器数据类型范围 */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nchar的范围为: %d —— %d\n"</span><span class="token punctuation">,</span> CHAR_MIN<span class="token punctuation">,</span> CHAR_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned char的范围为: %u —— %u\n\n"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> UCHAR_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"short的范围为: %hd —— %hd\n"</span><span class="token punctuation">,</span> SHRT_MIN<span class="token punctuation">,</span> SHRT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned short的范围为: %hu —— %hu\n\n"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> USHRT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"int的范围为: %d —— %d\n"</span><span class="token punctuation">,</span> INT_MIN<span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned int的范围为: %u —— %u\n\n"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> UINT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"long的范围为: %ld —— %ld\n"</span><span class="token punctuation">,</span> LONG_MIN<span class="token punctuation">,</span> LONG_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned long的范围为: %lu —— %lu\n\n"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ULONG_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"long long的范围为: %lld —— %lld\n"</span><span class="token punctuation">,</span> LLONG_MIN<span class="token punctuation">,</span> LLONG_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned long long的范围为: %llu —— %llu\n\n"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ULLONG_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序输出结果为：</p><p><a href="https://imgchr.com/i/VH925D" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VH925D.md.png" alt="VH925D.md.png"></a></p><p>其中，<code>CHAR_MIN</code>、<code>CHAR_MAX</code>等符号常量是从哪来的呢？其实这些符号常量是头文件<code>limits.h</code>里的宏定义，<code>limits.h</code>内容部分截图如下：</p><p><a href="https://imgchr.com/i/VH9h2d" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VH9h2d.md.png" alt="VH9h2d.md.png"></a></p><p>以上输出的范围中，<code>long long</code>与<code>unsigned long long</code>是<code>C99标准</code>引进的新的数据类型，关于C语言的几个标准可以查看小编的上一篇笔记：<a href="https://zhengnianli.github.io/2018/12/06/c-yu-yan-bi-ji-shi-me-shi-ansi-c-biao-zhun/">【C语言笔记】什么是ANSI C标准？</a></p><h3 id="2-知识点二：C语言的预定义宏"><a href="#2-知识点二：C语言的预定义宏" class="headerlink" title="2. 知识点二：C语言的预定义宏"></a>2. 知识点二：C语言的预定义宏</h3><p>标准C语言预处理要求定义某些对象宏，每个预定义宏的名称由两个下划线开头和两个下划线结尾，这些预定义宏不能被取消定义<code>（#undef）</code>。</p><p>常用的几个预处理宏有：</p><pre class=" language-c"><code class="language-c"><span class="token constant">__LINE__</span>：表示当前源代码的行号；<span class="token constant">__FILE__</span>：表示当前源文件的名称；<span class="token constant">__DATE__</span>：表示当前的编译日期；<span class="token constant">__TIME__</span>：表示当前的编译时间；__FUNCTION__：表示当前函数；</code></pre><p>代码演示：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前代码行号：%d\n"</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前编译日期：%s\n"</span><span class="token punctuation">,</span> <span class="token constant">__DATE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前编译时间：%s\n"</span><span class="token punctuation">,</span> <span class="token constant">__TIME__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前文件名称：%s\n"</span><span class="token punctuation">,</span> <span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前函数名称：%s\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序输出结果为：</p><p><a href="https://imgchr.com/i/VH9XGQ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VH9XGQ.md.png" alt="VH9XGQ.md.png"></a></p><p>预定义宏常用于程序运行异常的跟踪，<code>__FILE__</code>，<code>__LINE__</code>，<code>__FUNCTION__</code>这是最常用的组合，表示文件名、行数和函数名。除了以上提到的这五个预定义宏之外，还有<code>C99标准</code>提出的预定义宏如：<code>__STDC_HOSTED__</code>等，有兴趣的可以查一下。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】什么是ANSI C标准？</title>
      <link href="/2018/12/06/c-yu-yan-bi-ji-shi-me-shi-ansi-c-biao-zhun/"/>
      <url>/2018/12/06/c-yu-yan-bi-ji-shi-me-shi-ansi-c-biao-zhun/</url>
      
        <content type="html"><![CDATA[<p>我们在很多地方都有看到过<code>K&amp;R C、ANSI C、ISO C、C89、C99、C11</code>等标准，具体有什么不同呢？（文末有个很好的实例）</p><h3 id="什么是K-amp-R-C？"><a href="#什么是K-amp-R-C？" class="headerlink" title="什么是K&amp;R C？"></a>什么是K&amp;R C？</h3><p><code>1978</code>年，<code>丹尼斯•里奇（Dennis Ritchie）</code>和<code>布莱恩•柯林汉（Brian Kernighan）</code>合作出版了<code>《C程序设计语言》</code>的第一版。书中介绍的C语言标准也被称作<code>K&amp;R C</code>。</p><h3 id="什么是ANSI-C、ISO-C、C89、C90标准？"><a href="#什么是ANSI-C、ISO-C、C89、C90标准？" class="headerlink" title="什么是ANSI C、ISO C、C89、C90标准？"></a>什么是ANSI C、ISO C、C89、C90标准？</h3><p>随着C语言使用得越来越广泛，出现了许多新问题，人们日益强烈地要求对C语言进行标准化。<code>1983</code>年，<code>美国国家标准协会（ANSI）</code>组成了一个委员会，<code>X3J11</code>，为了创立 C 的一套标准。经过漫长而艰苦的过程，该标准于<code>1989</code>年完成，这个版本的语言经常被称作<code>ANSI C</code>，或有时称为<code>C89</code>（为了区别<code>C99</code>）。在<code>1990</code>年，<code>ANSI C</code>标准（带有一些小改动）被美国国家标准协会（ANSI）采纳为<code>ISO/IEC 9899:1990</code>。这个版本有时候称为<code>C90</code>或者<code>ISO C</code>。综上，<code>ANSI C、ISO C、C89、C90其实是同一种标准</code>。</p><h3 id="什么是C99标准？"><a href="#什么是C99标准？" class="headerlink" title="什么是C99标准？"></a>什么是C99标准？</h3><p><code>2000</code>年3月，<code>ANSI</code>采纳<code>了 ISO/IEC 9899:1999 标准</code>。这个标准通常指<code>C99</code>。 <code>C99</code>新增了一些特性，如：支持不定长的数组，即数组长度可以在运行时决定。变量声明不必放在语句块的开头，for语句提倡写成<code>for(int i=0;i&lt;100;++i)</code> 的形式，即i只在for语句块内部有效。</p><h3 id="什么是C11标准？"><a href="#什么是C11标准？" class="headerlink" title="什么是C11标准？"></a>什么是C11标准？</h3><p><code>C11标准</code>是C语言标准的第三版（<code>2011年由ISO/IEC发布</code>），前一个标准版本是<code>C99标准</code>。与<code>C99</code>相比，<code>C11</code>有哪些变化呢？</p><pre class=" language-cpp"><code class="language-cpp"><span class="token number">1</span>、 对齐处理：<span class="token keyword">alignof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span>返回T的对齐方式，<span class="token function">aligned_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>以指定字节和对齐方式分配内存，头文件<span class="token operator">&lt;</span>stdalign<span class="token punctuation">.</span>h<span class="token operator">></span>定义了这些内容。<span class="token number">2</span>、 _Noreturn：_Noreturn是个函数修饰符，位置在函数返回类型的前面，声明函数无返回值，有点类似于gcc的<span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>noreturn<span class="token punctuation">)</span><span class="token punctuation">)</span>，后者在声明语句尾部。<span class="token number">3</span>、 _Generic：_Generic支持轻量级范型编程，可以把一组具有不同类型而却有相同功能的函数抽象为一个接口。<span class="token number">4</span>、 <span class="token function">_Static_assert</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token function">_Static_assert</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，静态断言，在编译时刻进行，断言表达式必须是在编译时期可以计算的表达式，而普通的<span class="token function">assert</span><span class="token punctuation">(</span><span class="token punctuation">)</span>在运行时刻断言。<span class="token number">5</span>、安全版本的几个函数：<span class="token function">gets_s</span><span class="token punctuation">(</span><span class="token punctuation">)</span>取代了<span class="token function">gets</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，原因是后者这个I<span class="token operator">/</span>O函数的实际缓冲区大小不确定，以至于发生常见的缓冲区溢出攻击，类似的函数还有其它的。<span class="token number">6</span>、 <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>新模式：<span class="token function">fopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>增加了新的创建、打开模式“x”，在文件锁中比较常用。<span class="token number">7</span>、 匿名结构体、联合体。<span class="token number">8</span>、 多线程：头文件<span class="token operator">&lt;</span>threads<span class="token punctuation">.</span>h<span class="token operator">></span>定义了创建和管理线程的函数，新的存储类修饰符_Thread_local限定了变量不能在多线程之间共享。<span class="token number">9</span>、 _Atomic类型修饰符和头文件<span class="token operator">&lt;</span>stdatomic<span class="token punctuation">.</span>h<span class="token operator">></span>。<span class="token number">10</span>、改进的Unicode支持和头文件<span class="token operator">&lt;</span>uchar<span class="token punctuation">.</span>h<span class="token operator">></span>。<span class="token number">11</span>、<span class="token function">quick_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：又一种终止程序的方式，当<span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>失败时用以终止程序。<span class="token number">12</span>、复数宏，浮点数宏。<span class="token number">13</span>、time<span class="token punctuation">.</span>h新增timespec结构体，时间单位为纳秒，原来的timeval结构体时间单位为毫秒。</code></pre><p>下面看一段程序：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// C99允许在for循环内定义循环变量，而C89不允许</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在<code>C89标准</code>下编译，结果为：</p><p><a href="https://imgchr.com/i/VHJM0P" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VHJM0P.md.png" alt="VHJM0P.md.png"></a></p><p>编译报错原因为，在<code>C89标准</code>下，循环变量不能在for循环内定义，必须把标准改为<code>C99标准</code>才可正常编译。以<code>C99</code>编译的命令为：</p><pre class=" language-cpp"><code class="language-cpp">gcc <span class="token operator">-</span>std<span class="token operator">=</span>c99 test<span class="token punctuation">.</span>c <span class="token operator">-</span>o test<span class="token punctuation">.</span>exe</code></pre><p>如下图，以C99编译能成功编译：</p><p><a href="https://imgchr.com/i/VHJ8fg" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VHJ8fg.md.png" alt="VHJ8fg.md.png"></a></p><p>所以在平时的开发中应该要了解编译器支持什么标准。因为，有时候编译出错是因为当前编译器支持的标准不同。</p><p><code>GCC编译器</code>在编译的时候可指定C语言标准：</p><pre class=" language-cpp"><code class="language-cpp">指定c90标准<span class="token operator">:</span> <span class="token operator">-</span>std<span class="token operator">=</span>c90指定C99标准<span class="token operator">:</span> <span class="token operator">-</span>std<span class="token operator">=</span>c99定C11标准<span class="token punctuation">(</span>目前正在开发中<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token operator">-</span>std<span class="token operator">=</span>c11</code></pre><p>以上就是关于C语言标准的笔记，如有错误欢迎指出！</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【RT-Thread笔记】裸机系统与多线程系统</title>
      <link href="/2018/11/27/rt-thread-bi-ji-luo-ji-xi-tong-yu-duo-xian-cheng-xi-tong/"/>
      <url>/2018/11/27/rt-thread-bi-ji-luo-ji-xi-tong-yu-duo-xian-cheng-xi-tong/</url>
      
        <content type="html"><![CDATA[<p>单片机编程中有<code>裸机系统</code>与<code>多线程系统</code>的区别。</p><h3 id="裸机系统"><a href="#裸机系统" class="headerlink" title="裸机系统"></a>裸机系统</h3><p>裸机系统通常分成<code>轮询系统</code>和<code>前后台系统</code>。</p><h3 id="1、轮询系统"><a href="#1、轮询系统" class="headerlink" title="1、轮询系统"></a>1、轮询系统</h3><p>轮询系统即是在裸机编程的时候，先初始化好相关的硬件，然后让主程序在一个死循环里面不断循环，顺序地做各种事情，大概的伪代码具体如代码清单 1-1所示：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 硬件相关初始化 */</span> <span class="token function">HardWareInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 无限循环 */</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 处理事情 1 */</span>   <span class="token function">DoSomething1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 处理事情 2 */</span>   <span class="token function">DoSomethingg2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 处理事情 3 */</span>   <span class="token function">DoSomethingg3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>轮询系统是一种非常简单的软件结构，通常只适用于那些只需要顺序执行代码且不需要外部事件来驱动的就能完成的事情。在代码清单 1-1 中，如果只是实现 LED 翻转，串口输出，液晶显示等这些操作，那么使用轮询系统将会非常完美。但是，如果加入了按键操作等需要检测外部信号的事件，用来模拟紧急报警，那么整个系统的实时响应能力就不会那么好了。</p><p>假设<code>DoSomethingg3</code> 是按键扫描，当外部按键被按下，相当于一个警报，这个时候，需要立马响 应 ， 并 做 紧 急 处 理 ， 而 这 个 时 候 程 序 刚 好 执 行 到 <code>DoSomethingg1</code> ， 要 命 的 是<code>DoSomethingg1</code> 需要执行的时间比较久，久到按键释放之后都没有执行完毕，那么当执行到 <code>DoSomethingg3</code> 的时候就会丢失掉一次事件。足见，轮询系统只适合顺序执行的功能代码，当有外部事件驱动时，实时性就会降低。</p><h3 id="2、前后台系统"><a href="#2、前后台系统" class="headerlink" title="2、前后台系统"></a>2、前后台系统</h3><p>相比轮询系统，前后台系统是在轮询系统的基础上加入了中断。外部事件的响应在中断里面完成，事件的处理还是回到轮询系统中完成，中断在这里我们称为前台， main 函数里面的无限循环我们称为后台，大概的伪代码见代码清单 1-2所示：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> flag1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> flag2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> flag3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 硬件相关初始化 */</span> <span class="token function">HardWareInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 无限循环 */</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>flag1<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/* 处理事情 1 */</span>     <span class="token function">DoSomething1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>flag2<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/* 处理事情 2 */</span>     <span class="token function">DoSomethingg2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>flag3<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/* 处理事情 3 */</span>     <span class="token function">DoSomethingg3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ISR1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 置位标志位 */</span> flag1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 如果事件处理时间很短，则在中断里面处理 如果事件处理时间比较长，在回到后台处理 */</span> <span class="token function">DoSomething1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ISR2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 置位标志位 */</span> flag2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 如果事件处理时间很短，则在中断里面处理 如果事件处理时间比较长，在回到后台处理 */</span> <span class="token function">DoSomething2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ISR3</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 置位标志位 */</span> flag3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 如果事件处理时间很短，则在中断里面处理 如果事件处理时间比较长，在回到后台处理 */</span> <span class="token function">DoSomething3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在顺序执行后台程序的时候，如果有中断来临，那么中断会打断后台程序的正常执行流，转而去执行中断服务程序，在中断服务程序里面标记事件，如果事件要处理的事情很简短，则可在中断服务程序里面处理，如果事件要处理的事情比较多，则返回到后台程序里面处理。</p><p>虽然事件的响应和处理是分开了，但是事件的处理还是在后台里面顺序执行的，但相比轮询系统，前后台系统确保了事件不会丢失，再加上中断具有可嵌套的功能，这可以大大的提高程序的实时响应能力。在大多数的中小型项目中，前后台系统运用的好，堪称有操作系统的效果。</p><h3 id="多线程系统"><a href="#多线程系统" class="headerlink" title="多线程系统"></a>多线程系统</h3><p>相比前后台系统，多线程系统的事件响应也是在中断中完成的，但是事件的处理是在线程中完成的。在多线程系统中，线程跟中断一样，也具有优先级，优先级高的线程会被优先执行。</p><p>当一个紧急的事件在中断被标记之后，如果事件对应的线程的优先级足够高，就会立马得到响应。相比前后台系统，多线程系统的实时性又被提高了。多线程系统大概的伪代码具体见代码清单 1-3所示：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> flag1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> flag2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> flag3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 硬件相关初始化 */</span> <span class="token function">HardWareInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* OS 初始化 */</span> <span class="token function">RTOSInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* OS 启动，开始多线程调度，不再返回 */</span> <span class="token function">RTOSStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ISR1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 置位标志位 */</span> flag1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ISR2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 置位标志位 */</span> flag2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ISR3</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 置位标志位 */</span> flag3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">DoSomething1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 无限循环，不能返回 */</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 线程实体 */</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>flag1<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">DoSomething2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 无限循环，不能返回 */</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 线程实体 */</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>flag2<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">DoSomething3</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 无限循环，不能返回 */</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 线程实体 */</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>flag3<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>相比前后台系统中后台顺序执行的程序主体，在多线程系统中，根据程序的功能，我们把这个程序主体分割成一个个独立的，无限循环且不能返回的小程序，这个小程序我们称之为<code>线程</code>。</p><p>每个线程都是独立的，互不干扰的，且具备自身的优先级，它由操作系统调度管理。加入操作系统后，我们在编程的时候不需要精心地去设计程序的执行流，不用担心每个功能模块之间是否存在干扰。</p><p>加入了操作系统，我们的编程反而变得简单了。整个系统随之带来的额外开销就是操作系统占据的那一丁点的 FLASH 和 RAM。现如今，单片机的 FLASH 和 RAM 是越来越大，完全足以抵挡 RTOS 那点开销。</p><p>轮询、前后台和多线程系统软件模型区别：</p><p><a href="https://imgchr.com/i/VTw6V1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/16/VTw6V1.md.png" alt="VTw6V1.md.png"></a></p><p>以上是关于裸机系统与多线程系统的笔记，摘抄于《RT-Thread内核实现与应用开发实践指南》一书。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> RTOS </tag>
            
            <tag> RT-Thread </tag>
            
            <tag> 物联网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】ASCII码可见字符与不可见字符</title>
      <link href="/2018/11/26/c-yu-yan-bi-ji-ascii-ma-ke-jian-zi-fu-yu-bu-ke-jian-zi-fu/"/>
      <url>/2018/11/26/c-yu-yan-bi-ji-ascii-ma-ke-jian-zi-fu-yu-bu-ke-jian-zi-fu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-如何输出ASCII码？"><a href="#1-如何输出ASCII码？" class="headerlink" title="1. 如何输出ASCII码？"></a>1. 如何输出ASCII码？</h3><p><code>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）</code>是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言。下面看一段示例代码，用于输出ASCII码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t字符\t十进制\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t%c\t%4d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果发现：</p><p><a href="https://imgchr.com/i/Voedud" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/15/Voedud.md.png" alt="Voedud.md.png"></a></p><p><a href="https://imgchr.com/i/VoTZgH" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/15/VoTZgH.md.png" alt="VoTZgH.md.png"></a></p><p>从输出结果可以发现，ASCII码0-32及127对应的字符的显示是不正常的，这些显示不正常的就是不可打印字符，不可打印字符也叫控制字符，其他能显示出来的就是打印字符。</p><h3 id="2-ASCII码表"><a href="#2-ASCII码表" class="headerlink" title="2. ASCII码表"></a>2. ASCII码表</h3><p>完整ASCII表如下（图片来源于网络）：</p><p><a href="https://imgchr.com/i/VoT7xH" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/15/VoT7xH.md.png" alt="VoT7xH.md.png"></a></p><p>从这个表中，我们还看到有转义字符这一名词。转义字符是什么呢？C语言中定义了一些字母前加<code>\</code>来表示常见的那些不能显示的ASCII字符，如我们上面的代码用的<code>\t、\n</code>等，就称为<code>转义字符</code>，因为后面的字符，都不是它本来的ASCII字符意思了。</p><h3 id="3-转义字符对应表"><a href="#3-转义字符对应表" class="headerlink" title="3. 转义字符对应表"></a>3. 转义字符对应表</h3><p>转义字符对应表如下（图片来源于网络）：</p><p><a href="https://imgchr.com/i/VTkttU" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/16/VTkttU.md.png" alt="VTkttU.md.png"></a></p><p>以上就是关于ASCII码的一点笔记。ASCII码有可见字符与不可见字符（控制字符）之分。其中一些常用的不可见字符可用一些字母前加<code>\</code>来表示，也即转义字符。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>显示板开发</title>
      <link href="/2018/11/25/xian-shi-ban-kai-fa/"/>
      <url>/2018/11/25/xian-shi-ban-kai-fa/</url>
      
        <content type="html"><![CDATA[<p>因某产品量产需要附搭一个显示模块（可有可无，用在一些没有电脑的情况下）。因为产品主要的硬件已经定型了，所以没有集成在产品中，需要独立开发一个显示板。功能比较简单，但开发中遇到了一个关于数码管的问题，下面大体看一下：</p><h1 id="1、显示板的功能"><a href="#1、显示板的功能" class="headerlink" title="1、显示板的功能"></a>1、显示板的功能</h1><p>这次任务为：开发个显示板（我把它叫做从机）。要求实时接收显示主机所控制的系统的当前的运行状态，其中显示部分由一个五位八段数码管组成，从机与主机之间通过串口来通信，其中由从机主动向主机申请数据，主机收到申请包之后回传一个数据包。</p><p>当主机系统正常运行时，则会在最后三位数码管显示<code>run</code>；当伺服系统出现异常时，则会在数码管上显示<code>AL.XXX</code>，其中<code>XXX</code>为报警码，<code>AL</code>为报警单词<code>Alarm</code>的缩写。 </p><img src="https://s2.ax1x.com/2019/07/02/ZGtM1P.png" alt="ZGtM1P.png" border="0" width="550"><p>任务虽然看起来不难，但开发调试过程也遇到了很多问题 。首先，先分析一下总体设计，然后得出主要的切入点为：</p><p>（1）显示部分。可以把五段八位数码管的显示封装成一个函数，该函数接收一个字符串，然后再数码管上显示这个字符串；</p><p>（2）通信部分。接收主机数据并解析，然后把有用的数据组包（组成一个字符串，如<code>AL.XXX</code>），最后进行显示。</p><p>首先，看一下程序流程图：</p><img src="https://s2.ax1x.com/2019/07/02/ZGaYAe.png" alt="ZGaYAe.png" border="0" width="500"><h1 id="2、显示板的显示部分"><a href="#2、显示板的显示部分" class="headerlink" title="2、显示板的显示部分"></a>2、显示板的显示部分</h1><p>首先，由于硬件部分不按常规设计的原因，导致软件就遇到了一个问题。（有时候硬件缺陷可以使用软件来弥补，但往往会增加了软件部分的负担）。按照常规，我们的数码管段选线引脚与MCU连接应该是按连续排列的引脚顺序连接的（如，<code>a~dp</code>连接着<code>PA0~PA7</code>，这样只要给A端口的数据寄存器写一个字节的段码数据就可以进行设置了）。</p><p>但是，硬件的同事（也是新人，哈哈）把这些引脚的顺序给打乱了，所以只能靠软件来重新排列一下，既然不能同时设定8个引脚，那可以一个引脚一个引脚的进行设置。所以，我把数码管段码数据的每个位给分离出来，保存到一个数组里，然后拿这个数组的数据去直接设置数码管段选线就可以了。具体代码实现如下：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/****************************************************************************************** 函数: disp_one_bit_seg，显示一位数码管**---------------------------------------------------------------------------------------** 参数: code：数码管段码，为一个字节数据** 返回: void** 说明:此函数可以达到数码管段码重组的目的，标准情况是数码管的段选线a~dp都会连续排列并且分布于1个字节之中，这样，我们只要往GPIO数据寄存器data中写入相应的字节即可。但是，若段选线a~dp的硬件连接完全打         乱，则可运用该函数就可以达到与标准情况一样的效果。            ****************************************************************************************/</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">disp_one_bit_seg</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> code<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 把code的二进制位读出来保存到全局数组seg_dest_buf中 */</span>    <span class="token function">read_bit</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">set_seg_gpio_data</span><span class="token punctuation">(</span>seg_dest_buf<span class="token punctuation">,</span> SEG_BUF_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************** 函数: set_seg_gpio_data，设置数码管段码GPIO数据寄存器**---------------------------------------------------------------------------------------** 参数: data：转换后的共阳极段码值   len：数组长度** 返回: void** 说明: SEG_A_GPIO~SEG_DP_GPIO的引脚是不是连续的已经无关紧要****************************************************************************************/</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">set_seg_gpio_data</span><span class="token punctuation">(</span><span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    SEG_A_GPIO <span class="token operator">=</span> data<span class="token punctuation">[</span>len<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    SEG_B_GPIO <span class="token operator">=</span> data<span class="token punctuation">[</span>len<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    SEG_C_GPIO <span class="token operator">=</span> data<span class="token punctuation">[</span>len<span class="token number">-3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    SEG_D_GPIO <span class="token operator">=</span> data<span class="token punctuation">[</span>len<span class="token number">-4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    SEG_E_GPIO <span class="token operator">=</span> data<span class="token punctuation">[</span>len<span class="token number">-5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    SEG_F_GPIO <span class="token operator">=</span> data<span class="token punctuation">[</span>len<span class="token number">-6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    SEG_G_GPIO <span class="token operator">=</span> data<span class="token punctuation">[</span>len<span class="token number">-7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    SEG_DP_GPIO <span class="token operator">=</span> data<span class="token punctuation">[</span>len<span class="token number">-8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/****************************************************************************************** 函数: read_bit，读出一个字节数据的各个位**---------------------------------------------------------------------------------------** 参数: byte：单字节数据** 返回: void** 说明: 读取byte的各个位保存到全局数组seg_dest_buf中****************************************************************************************/</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">read_bit</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 字节的低位保存在数组的最后一个元素中</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        seg_dest_buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x01</span> <span class="token operator">&amp;</span> byte<span class="token punctuation">;</span>        byte <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>因为要拿来显示的字符数量也不多，因此我把它们都给列出来了，字符显示函数为：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/****************************************************************************************** 函数: seg_disp_char，数码管的字符显示函数**---------------------------------------------------------------------------------------** 参数: ch：要显示的字符** 返回: void** 说明: ****************************************************************************************/</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">seg_disp_char</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token function">disp_one_bit_seg</span><span class="token punctuation">(</span>CODE_0<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token function">disp_one_bit_seg</span><span class="token punctuation">(</span>CODE_1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token function">disp_one_bit_seg</span><span class="token punctuation">(</span>CODE_2<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token function">disp_one_bit_seg</span><span class="token punctuation">(</span>CODE_3<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token function">disp_one_bit_seg</span><span class="token punctuation">(</span>CODE_4<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token function">disp_one_bit_seg</span><span class="token punctuation">(</span>CODE_5<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token function">disp_one_bit_seg</span><span class="token punctuation">(</span>CODE_6<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token function">disp_one_bit_seg</span><span class="token punctuation">(</span>CODE_7<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token function">disp_one_bit_seg</span><span class="token punctuation">(</span>CODE_8<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token function">disp_one_bit_seg</span><span class="token punctuation">(</span>CODE_9<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token function">disp_one_bit_seg</span><span class="token punctuation">(</span>CODE_A<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token function">disp_one_bit_seg</span><span class="token punctuation">(</span>CODE_d<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'n'</span><span class="token punctuation">:</span> <span class="token function">disp_one_bit_seg</span><span class="token punctuation">(</span>CODE_n<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'r'</span><span class="token punctuation">:</span> <span class="token function">disp_one_bit_seg</span><span class="token punctuation">(</span>CODE_r<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'u'</span><span class="token punctuation">:</span> <span class="token function">disp_one_bit_seg</span><span class="token punctuation">(</span>CODE_u<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token function">disp_one_bit_seg</span><span class="token punctuation">(</span>CODE_y<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'L'</span><span class="token punctuation">:</span> <span class="token function">disp_one_bit_seg</span><span class="token punctuation">(</span>CODE_L<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'S'</span><span class="token punctuation">:</span> <span class="token function">disp_one_bit_seg</span><span class="token punctuation">(</span>CODE_5<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">' '</span><span class="token punctuation">:</span> <span class="token function">disp_one_bit_seg</span><span class="token punctuation">(</span>CODE_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// end of switch</span><span class="token punctuation">}</span></code></pre><p>所以，字符串显示函数就可以通过字符显示函数来封装了，字符串显示函数如下：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/****************************************************************************************** 函数: seg_disp_str，数码管的字符串显示函数**---------------------------------------------------------------------------------------** 参数: str：要显示的字符串** 返回: void** 说明: ****************************************************************************************/</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">seg_disp_str</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> SEG_NUM<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        SEG_ALL_OFF<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 设置段选之前先熄灭所有的管</span>        <span class="token function">sellect_bit_on</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 打开位选</span>        <span class="token function">seg_disp_char</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 显示字符串中的各个字符</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 延时配合人眼反应时间</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="3、显示板的通信部分"><a href="#3、显示板的通信部分" class="headerlink" title="3、显示板的通信部分"></a>3、显示板的通信部分</h1><p>通信的硬件部分是232通信。首先，得知道从机发送数据的格式以及主机回传过来的数据格式是怎么样的。这些数据是由我们自己制定的数据协议，主机回传的数据示例：</p><pre><code>0F0601FBA3B3C3B3A3A3B3C3B3A3A3B3C3B3A3A3B3C3B3A30D</code></pre><p>其中，<code>0F</code>为帧头，<code>06</code>为功能码，<code>01FB</code>为报警码，<code>0D</code>为帧尾。当从机向主机发送申请包时，主机收到后会回发由帧头、校验码、帧尾等多字节的一帧数据，只要可以能判断接收到这一帧数据，那么，我就可以进行解析。我的处理方法很简单，就是只要判断接收到帧头、帧尾及功能码，就说明已经接收到了这一帧数据，然后进行解析并保存数据。（应该还有其他更严谨的处理方法，以后有机会再考虑）。数据解析及组包的具体实现的代码为：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/****************************************************************************************** 函数: data_parse，帧数据解析函数**---------------------------------------------------------------------------------------** 参数: data：帧数据       str_pack：解析、组合后的字符串数据包** 返回: void** 说明:解析驱动器发送过来的状态监测帧数据，如0F0601FBA3B3C3B3A3A3B3C3B3A3A3B3C3B3A3A3B3C3B3A30D        （0F为帧头，06为功能码，01FB为报警码，0D为帧尾）****************************************************************************************/</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">data_parse</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str_pack<span class="token punctuation">,</span> Uint16 <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> Uint16 alarm_code <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> alarm_code_buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 接收到帧数据*/</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x0F</span> <span class="token operator">==</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">0x06</span> <span class="token operator">==</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">0x0D</span> <span class="token operator">==</span> data<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 报警码值不为0时为alarm状态 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            alarm_code <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 计算报警码</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>str_pack<span class="token punctuation">,</span> ALARM_STR_HEAD<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 此时str_pack中的内容为"AL"</span>            <span class="token function">sprintf</span><span class="token punctuation">(</span>alarm_code_buf<span class="token punctuation">,</span> <span class="token string">"%.3d"</span><span class="token punctuation">,</span> alarm_code<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// alarm_code_buf为"XXX"</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>str_pack<span class="token punctuation">,</span> alarm_code_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 此时str_pack中的内容为"ALXXX"</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 报警码值为0时为run状态 */</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>str_pack<span class="token punctuation">,</span> <span class="token string">"  run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>解析判断时判断帧头、帧尾以及功能码是不是一致就可以确定这是一帧报警数据，然后就可以解析出报警码，再调用字符串操作函数进行字符串数据的组包，然后把组合好的字符串数据包通过函数形参<code>str_pack</code>传出即可，外部调用数码管的字符串显示函数进行显示即可。</p><h1 id="4、最后"><a href="#4、最后" class="headerlink" title="4、最后"></a>4、最后</h1><p>以上就是关于这个显示板的主要内容，主要是解决如何处理数码管段选线没有顺序连接在同一个硬件GPIO端口的问题以及通信部分数据解析的问题。</p><hr><p>我的微信公众号：嵌入式大杂烩</p><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 数码管 </tag>
            
            <tag> 232通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】变参函数</title>
      <link href="/2018/11/22/c-yu-yan-bi-ji-bian-can-han-shu/"/>
      <url>/2018/11/22/c-yu-yan-bi-ji-bian-can-han-shu/</url>
      
        <content type="html"><![CDATA[<p>提到变参函数，我们的感觉是不是既熟悉又陌生？感觉熟悉是因为我们平时都在使用着，如我们常使用的printf()函数与scanf()函数就是典型的变参函数。因为printf()函数是变参函数我们才可以根据我们的需要灵活地输出变量的值。如：</p><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//给printf函数传入1个参数</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//给printf函数传入2个参数</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s  %d"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//给printf函数传入3个参数</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                      <span class="token comment" spellcheck="true">//给printf函数传入n个参数</span></code></pre><p>我们可以根据需要给printf()函数传入n个参数，这就是变参函数。</p><p>感觉陌生是因为我们没有试着创建变参函数。要创建变参函数需要包含头文件<code>stdarg.h</code>，并且创建变参函数应按照如下步骤进行：</p><p><code>【第一步】</code>定义一个使用省略号的函数原型，如printf()与scanf()函数的原型为</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>__format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">scanf</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>【第二步】</code>在函数定义中创建一个<code>va_list</code>类型的变量，用于存储不定的参数；</p><p><code>【第三步】</code>用宏<code>va_start</code>把该变量初始化为一个参数列表；</p><p><code>【第四步】</code>用宏<code>va_arg</code>访问参数列表；</p><p><code>【第五步】</code>用宏<code>va_end</code>完成清理工作。</p><p>示例程序：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span></span><span class="token comment" spellcheck="true">/*【第一步】:定义一个使用省略号的函数原型 */</span><span class="token keyword">double</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> lim<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*【第二步】:声明一个va_list类型的变量ap */</span> va_list ap<span class="token punctuation">;</span>     <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用于保存参数之和</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*【第三步】:使用va_start把变量ap初始化为参数列表 */</span> <span class="token function">va_start</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> lim<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lim<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/*【第四步】: 使用va_arg访问参数列表。    这里第二个参数是double类型，传入的不定参数就应是double类型   */</span>   sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/*【第五步】:使用va_end完成清理工作 */</span> <span class="token function">va_end</span><span class="token punctuation">(</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">double</span> sum1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 计算 */</span> sum1 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">3.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   sum2 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum1 = %f\n"</span><span class="token punctuation">,</span> sum1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum2 = %f\n"</span><span class="token punctuation">,</span> sum2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>变参函数sum()用于求lim个数之和，并且这lim个数的类型必须是double类型，因为sum函数实体中使用va_arg访问参数列表中的参数类型为double类型。</p><p>程序输出结果为：</p><p><a href="https://imgchr.com/i/V5haRI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5haRI.md.png" alt="V5haRI.md.png"></a></p><p>以上就是小编关于可变参数的一点小总结。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】关于随机数的总结</title>
      <link href="/2018/11/17/c-yu-yan-bi-ji-guan-yu-sui-ji-shu-de-zong-jie/"/>
      <url>/2018/11/17/c-yu-yan-bi-ji-guan-yu-sui-ji-shu-de-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>C语言的库头文件<code>stdlib.h</code>中有个生成随机数的函数：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该函数返回<code>0~RAND_MAX</code>之间的随机数，在<code>stdlib.h</code>中可知道，<code>RAND_MAX</code>为<code>0x7FFF</code>，如：</p><p><a href="https://imgchr.com/i/V71CkQ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/16/V71CkQ.md.png" alt="V71CkQ.md.png"></a></p><p>但这里生成的随机数为<code>伪随机数</code>。所谓的伪随机数简单来说就是每次运行程序产生的随机数都是一样的。</p><p>示例程序：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序运行结果为：</p><p><a href="https://imgchr.com/i/V71kpn" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/16/V71kpn.md.png" alt="V71kpn.md.png"></a></p><p>程序连续运行三次，产生的由rand()函数产生的随机数都是一样的，这就是伪随机数。</p><p>那么如何才能产生真正的随机数呢？其实头文件stdlib.h里还有另一个函数：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> seed<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个函数的作用是产生随机数种子，<code>rand()</code>函数会根据<code>seed</code>的值来产生随机数，若在这调用<code>rand()</code>函数之前没有调用<code>srand</code>进行播种，则<code>seed</code>的值就没变，则产生的随机数就是<code>伪随机数</code>。所以，只要种子<code>seed</code>的值改变，那么调用rand()函数产生的随机数就是真正的随机数。</p><p>示例程序：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序运行结果为：</p><p><a href="https://imgchr.com/i/V71n7F" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/16/V71n7F.md.png" alt="V71n7F.md.png"></a></p><p>可见，种子<code>seed</code>不一样，生成的随机数就不一样，即真实的随机数。</p><p>把<code>seed</code>的值改为相同的，则产生的随机数就是伪随机数。</p><p>示例程序：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">520</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">520</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">520</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序运行结果：</p><p><img src="https://s2.ax1x.com/2019/06/16/V71YnK.png" alt="V71YnK.png"></p><p>种子<code>seed</code>不变，产生的随机数就是一样的，即伪随机数。</p><p>那么，怎么才能较方便地设置随机数的种子呢？可以使用<code>time()</code>函数的返回值作为随机数种子，<code>time()</code>函数返回的是1970年1月1日至现在的秒数，每一时刻都是不一样的，即每一时刻<code>seed</code>的值都不一样。</p><p>接下来编写一个程序用于产生10个10以内的随机数，示例程序：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> loop<span class="token punctuation">;</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>loop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> loop <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> loop<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序运行结果为：</p><p><a href="https://imgchr.com/i/V71aAe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/16/V71aAe.md.png" alt="V71aAe.md.png"></a></p><p>除此之外，若要生成a~b之间的数字，可以使用<code>rand()%(b-a+1)+a</code>。</p><p>以上就是关于随机数的总结，要注意<code>srand()</code>函数应与<code>rand()</code>成对使用，并且在调用<code>rand()</code>函数之前应先调用<code>srand()</code>进行播种，每次播的随机种子应该是不一样的，否则产生的随机数就是伪随机数。可用<code>time()</code>函数的返回值作为随机种子，这是典型做法。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】时间日期函数</title>
      <link href="/2018/11/16/c-yu-yan-bi-ji-shi-jian-shi-qi-han-shu/"/>
      <url>/2018/11/16/c-yu-yan-bi-ji-shi-jian-shi-qi-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>time.h是C/C++中的日期和时间头文件。用于需要时间方面的函数。下面分享time.h头文件中几个常用函数的用法：</p><p><a href="https://imgchr.com/i/V5fE4A" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5fE4A.md.png" alt="V5fE4A.md.png"></a></p><h3 id="time-函数"><a href="#time-函数" class="headerlink" title="time()函数"></a>time()函数</h3><p>1、函数原型</p><pre class=" language-c"><code class="language-c">time_t <span class="token function">time</span><span class="token punctuation">(</span>time_t <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2、函数说明</p><p>time_t 是long int 类型。此函数会返回从公元1970年1月1日的UTC时间从0时0 分0秒算起到现在所经过的秒数。如果t是空指针，直接返回当前时间。如果t不是空指针，返回当前时间的同时，将返回值赋予t指向的内存空间。</p><p>3、函数返回值<br>成功则返回秒数，失败则返回((time_t)-1)值，错误原因存于errno中。</p><p>4、示例程序</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   time_t sec <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">(</span>time_t<span class="token operator">*</span><span class="token punctuation">)</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1970-01-01至现在的秒数为：%d\n"</span><span class="token punctuation">,</span> sec<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果</p><pre><code>1970-01-01至现在的秒数为：1542377079</code></pre><h3 id="gmtime-函数"><a href="#gmtime-函数" class="headerlink" title="gmtime()函数"></a>gmtime()函数</h3><p>1、函数原型</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> tm <span class="token operator">*</span><span class="token function">gmtime</span><span class="token punctuation">(</span><span class="token keyword">const</span> time_t <span class="token operator">*</span>timep<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2、函数说明</p><p>gmtime()将参数timep所指的time_t结构中的信息转换成真实世界所使用的时间日期表示方法，然后将结果由结构tm返回。</p><p>结构tm的定义为：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> tm<span class="token punctuation">{</span>   <span class="token keyword">int</span> tm_sec<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//代表目前秒数, 正常范围为0-59, 但允许至61 秒</span>   <span class="token keyword">int</span> tm_min<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//代表目前分数, 范围0-59</span>   <span class="token keyword">int</span> tm_hour<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//从午夜算起的时数, 范围为0-23</span>   <span class="token keyword">int</span> tm_mday<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//目前月份的日数, 范围01-31</span>   <span class="token keyword">int</span> tm_mon<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//代表目前月份, 从一月算起, 范围从0-11</span>   <span class="token keyword">int</span> tm_year<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//从1900 年算起至今的年数</span>   <span class="token keyword">int</span> tm_wday<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//一星期的日数, 从星期一算起, 范围为0-6</span>   <span class="token keyword">int</span> tm_yday<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//从今年1 月1 日算起至今的天数, 范围为0-365</span>   <span class="token keyword">int</span> tm_isdst<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//日光节约时间的旗标</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>3、函数返回值</p><p>返回结构tm代表目前UTC时间。</p><p>4、示例程序</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">char</span> <span class="token operator">*</span>wday<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Sun"</span><span class="token punctuation">,</span> <span class="token string">"Mon"</span><span class="token punctuation">,</span> <span class="token string">"Tue"</span><span class="token punctuation">,</span> <span class="token string">"Wed"</span><span class="token punctuation">,</span> <span class="token string">"Thu"</span><span class="token punctuation">,</span> <span class="token string">"Fri"</span><span class="token punctuation">,</span> <span class="token string">"Sat"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   time_t t<span class="token punctuation">;</span>   <span class="token keyword">struct</span> tm <span class="token operator">*</span>p<span class="token punctuation">;</span>   <span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mon <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mday <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> hour <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> <span class="token operator">*</span>week <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>   <span class="token function">time</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>   p <span class="token operator">=</span> <span class="token function">gmtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>   year <span class="token operator">=</span> <span class="token number">1900</span> <span class="token operator">+</span> p<span class="token operator">-></span>tm_year<span class="token punctuation">;</span>   mon <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> p<span class="token operator">-></span>tm_mon<span class="token punctuation">;</span>   mday <span class="token operator">=</span> p<span class="token operator">-></span>tm_mday<span class="token punctuation">;</span>   week <span class="token operator">=</span> wday<span class="token punctuation">[</span>p<span class="token operator">-></span>tm_wday<span class="token punctuation">]</span><span class="token punctuation">;</span>   hour <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">+</span> p<span class="token operator">-></span>tm_hour<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取当地时间，与UTC时间相差8小时   </span>   min <span class="token operator">=</span> p<span class="token operator">-></span>tm_min<span class="token punctuation">;</span>   sec <span class="token operator">=</span> p<span class="token operator">-></span>tm_sec<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d-%d-%d %s"</span><span class="token punctuation">,</span> year<span class="token punctuation">,</span> mon<span class="token punctuation">,</span> mday<span class="token punctuation">,</span> week<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %.2d:%.2d:%.2d\n"</span><span class="token punctuation">,</span> hour<span class="token punctuation">,</span> min<span class="token punctuation">,</span> sec<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果</p><pre class=" language-c"><code class="language-c"><span class="token number">2018</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">16</span> Fri <span class="token number">22</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">25</span></code></pre><h3 id="localtime-函数"><a href="#localtime-函数" class="headerlink" title="localtime()函数"></a>localtime()函数</h3><p>1、函数原型</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> tm <span class="token operator">*</span><span class="token function">localtime</span><span class="token punctuation">(</span><span class="token keyword">const</span> time_t <span class="token operator">*</span> timep<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2、函数说明</p><p>localtime()将参数timep所指的time_t 结构中的信息转换成真实世界所使用的时间日期表示方法，然后将结果由结构tm返回。</p><p>3、函数返回值</p><p>返回结构tm代表目前的当地时间。</p><p>4、示例程序</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">char</span> <span class="token operator">*</span>wday<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Sun"</span><span class="token punctuation">,</span> <span class="token string">"Mon"</span><span class="token punctuation">,</span> <span class="token string">"Tue"</span><span class="token punctuation">,</span> <span class="token string">"Wed"</span><span class="token punctuation">,</span> <span class="token string">"Thu"</span><span class="token punctuation">,</span> <span class="token string">"Fri"</span><span class="token punctuation">,</span> <span class="token string">"Sat"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   time_t t<span class="token punctuation">;</span>   <span class="token keyword">struct</span> tm <span class="token operator">*</span>p<span class="token punctuation">;</span>   <span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mon <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mday <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> hour <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> <span class="token operator">*</span>week <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>   <span class="token function">time</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>   p <span class="token operator">=</span> <span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取得当地时间</span>   year <span class="token operator">=</span> <span class="token number">1900</span> <span class="token operator">+</span> p<span class="token operator">-></span>tm_year<span class="token punctuation">;</span>   mon <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> p<span class="token operator">-></span>tm_mon<span class="token punctuation">;</span>   mday <span class="token operator">=</span> p<span class="token operator">-></span>tm_mday<span class="token punctuation">;</span>   week <span class="token operator">=</span> wday<span class="token punctuation">[</span>p<span class="token operator">-></span>tm_wday<span class="token punctuation">]</span><span class="token punctuation">;</span>   hour <span class="token operator">=</span> p<span class="token operator">-></span>tm_hour<span class="token punctuation">;</span>   min <span class="token operator">=</span> p<span class="token operator">-></span>tm_min<span class="token punctuation">;</span>   sec <span class="token operator">=</span> p<span class="token operator">-></span>tm_sec<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d-%d-%d %s"</span><span class="token punctuation">,</span> year<span class="token punctuation">,</span> mon<span class="token punctuation">,</span> mday<span class="token punctuation">,</span> week<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %.2d:%.2d:%.2d\n"</span><span class="token punctuation">,</span> hour<span class="token punctuation">,</span> min<span class="token punctuation">,</span> sec<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>输出结果</p><pre class=" language-c"><code class="language-c"><span class="token number">2018</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">16</span> Fri <span class="token number">22</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token number">27</span></code></pre><h3 id="ctime-函数"><a href="#ctime-函数" class="headerlink" title="ctime()函数"></a>ctime()函数</h3><p>1、函数原型</p><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">ctime</span><span class="token punctuation">(</span><span class="token keyword">const</span> time_t <span class="token operator">*</span>timep<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2、函数说明</p><p>ctime()将参数timep所指的time_t结构中的信息转换成真实世界所使用的时间日期表示方法，然后将结果以字符串形态返回。此函数已经由时区转换成当地时间。注意：若再调用相关的时间日期函数，此字符串可能会被破坏。</p><p>3、函数返回值</p><p>返回一字符串表示目前当地的时间日期。格式：星期,月,日,小时:分:秒,年。</p><p>4、示例程序</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   time_t t<span class="token punctuation">;</span>   <span class="token function">time</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果</p><pre class=" language-c"><code class="language-c">Fri Nov <span class="token number">16</span> <span class="token number">22</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">51</span> <span class="token number">2018</span></code></pre><h3 id="asctime-函数"><a href="#asctime-函数" class="headerlink" title="asctime()函数"></a>asctime()函数</h3><p>1、函数原型</p><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">asctime</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> tm <span class="token operator">*</span> timeptr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2、函数说明<br>asctime()将参数timeptr所指的tm结构中的信息转换成真实世界所使用的时间日期表示方法，然后将结果以字符串形态返回。此函数已经由时区转换成当地时间。注意：若再调用相关的时间日期函数，此字符串可能会被破坏。与ctime()函数的不同在于传入参数结构不同。</p><p>3、函数返回值<br>返回一字符串表示目前当地的时间日期。格式：星期,月,日,小时:分:秒,年。</p><p>4、示例程序</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   time_t t<span class="token punctuation">;</span>   <span class="token keyword">struct</span> tm <span class="token operator">*</span>p<span class="token punctuation">;</span>   <span class="token keyword">char</span> <span class="token operator">*</span>date <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>   <span class="token function">time</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>   p <span class="token operator">=</span> <span class="token function">gmtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>   date <span class="token operator">=</span> <span class="token function">asctime</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果</p><pre class=" language-c"><code class="language-c">Fri Nov <span class="token number">16</span> <span class="token number">14</span><span class="token punctuation">:</span><span class="token number">48</span><span class="token punctuation">:</span><span class="token number">29</span> <span class="token number">2018</span></code></pre><p>以上就是关于time.h头文件里一些时间函数的介绍。其中gmtime()函数与localtime()函数类似，ctime()函数与asctime()函数类似，应把这两对函数对比来看。</p><pre class=" language-c"><code class="language-c">参考资料：百度百科及C语言中文网</code></pre><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】数组a与&amp;a有什么不同？</title>
      <link href="/2018/11/13/c-yu-yan-bi-ji-shu-zu-a-yu-a-you-shi-me-bu-tong/"/>
      <url>/2018/11/13/c-yu-yan-bi-ji-shu-zu-a-yu-a-you-shi-me-bu-tong/</url>
      
        <content type="html"><![CDATA[<p>首先，看一段代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d , &amp;a = %d \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>该代码运行结果为：</p><p><a href="https://imgchr.com/i/V5MJSO" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5MJSO.md.png" alt="V5MJSO.md.png"></a></p><p>可见，对于一个数组：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>a与&amp;a的值是相同的。为什么呢？</p><p>a是数组名，是一个数据区的常量，对其取地址（&amp;a）就可以得到数组存储区域的地址，同样，a本身也代表了数组存储区的首地址。所以，a与&amp;a的值是一样的。但是，虽然a与&amp;a指向同一个地址，但是他们的含义是不同的。下面我们修改一下上面的代码看看”a+1”与”&amp;a+1”是否还相等？修改后的代码运行结果为：</p><p><a href="https://imgchr.com/i/V5GRnU" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5GRnU.md.png" alt="V5GRnU.md.png"></a></p><p>可见，a+1的值比a的值大4，即sizeof(a[0])；&amp;a+1比&amp;a的值大20，即sizeof(a)。由此，可得出结论：a+1指向的地址相对与a指向的地址向后偏移了sizeof（a[0]）个字节，&amp;a+1指向的地址相对与&amp;a指向的地址向后偏移了sizeof(a)个字节，其描述图如下：</p><p><a href="https://imgchr.com/i/V5G5N9" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5G5N9.md.png" alt="V5G5N9.md.png"></a></p><p>下面分析一段代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*(a+1) = %d, *(ptr-1) = %d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果为：</p><pre class=" language-c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">4</span></code></pre><p><code>*(a+1) = 1</code>，是因为<code>a+1</code>代表数组第二个元素的地址，即<code>&amp;a[1]</code>，<code>*(a+1)</code>为取该地址上的值，即为1；<code>*（ptr-1)=4</code>，是因为ptr指向的是整个数组内存区域之后的内存，即数组最后一个元素之后的地址，<code>ptr-1</code>就是指向数组的最后一个元素，<code>*（ptr-1)</code>为取该地址上的值，即为4。</p><p>以上就是今天分享的关于数组的一个小知识点,如有错误欢迎指出！</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】两个小知识</title>
      <link href="/2018/11/13/c-yu-yan-bi-ji-liang-ge-xiao-zhi-shi/"/>
      <url>/2018/11/13/c-yu-yan-bi-ji-liang-ge-xiao-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="一、关于头文件包含问题"><a href="#一、关于头文件包含问题" class="headerlink" title="一、关于头文件包含问题"></a>一、关于头文件包含问题</h3><p>C语言包含头文件时应该使用尖括号还是双引号？使用尖括号&lt;&gt;,编译器会到系统路径下查找头文件；而使用双引号“”，编译器首先在当前路径目录下查找头文件，如果没有找到，再转到系统目录下查找。所以，通常使用尖括号包含标准头文件，使用双引号包含自定义头文件。如：</p><p><a href="https://imgchr.com/i/V5W5pq" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5W5pq.md.png" alt="V5W5pq.md.png"></a></p><h3 id="二、关于头文件重复包含问题"><a href="#二、关于头文件重复包含问题" class="headerlink" title="二、关于头文件重复包含问题"></a>二、关于头文件重复包含问题</h3><p>同一个头文件在不同的C文件里可能会被包含很多次，可能会产生重复包含的错误。我们可以使用宏保护来解决这个问题，如test.h中可以使用如下宏保护：</p><p><a href="https://imgchr.com/i/V5WocV" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5WocV.md.png" alt="V5WocV.md.png"></a></p><p>第一次包含头文件，会定义宏_TEST_H，并执行“头文件“的代码；第二次包含时因为之前已经有定义宏_TEST_H，不会重复执行”#ifndef _TEST_H“与”#endif“之间的代码。</p><p>stm32单片机中的库文件就是这么做的，如</p><p><a href="https://imgchr.com/i/V5WOAJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5WOAJ.md.png" alt="V5WOAJ.md.png"></a></p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工具】这么好用的代码阅读器你装了吗？</title>
      <link href="/2018/11/12/gong-ju-zhe-me-hao-yong-de-dai-ma-yue-du-qi-ni-zhuang-liao-ma/"/>
      <url>/2018/11/12/gong-ju-zhe-me-hao-yong-de-dai-ma-yue-du-qi-ni-zhuang-liao-ma/</url>
      
        <content type="html"><![CDATA[<h3 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h3><p>作为一名程序员，我们不仅要多动手编代码，而且还应多阅读一些优秀的代码，如C语言的一些第三方库文件、嵌入式中Linux内核源码以及一些项目的代码等。这些源码往往都比较庞大，源文件少则几十个，多则成千上万个源文件，很难把握每个源文件之间的调用关系以及代码的层次等。此时，我们可以使用一些代码阅读器来阅读这些庞大的源码。下面给大家推荐一款很棒的代码阅读器：<code>source insight</code></p><h3 id="2、简介"><a href="#2、简介" class="headerlink" title="2、简介"></a>2、简介</h3><p><code>Source Insight</code>实质上是一个支持多种开发语言（java,c ,c 等等）的编辑器，只不过由于其查找、定位、彩色显示等功能的强大，常被我们当成源代码阅读工具使用。</p><h3 id="3、安装包下载"><a href="#3、安装包下载" class="headerlink" title="3、安装包下载"></a>3、安装包下载</h3><blockquote><p>链接：<a href="https://pan.baidu.com/s/1rg-Gn-rtN00ueED1jShIQQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1rg-Gn-rtN00ueED1jShIQQ</a><br>提取码：s38z </p></blockquote><h3 id="4、安装步骤"><a href="#4、安装步骤" class="headerlink" title="4、安装步骤"></a>4、安装步骤</h3><p>与一般的软件安装差不多，一直点击下一步，直至安装完成。</p><h3 id="5、使用方法"><a href="#5、使用方法" class="headerlink" title="5、使用方法"></a>5、使用方法</h3><p>（1）新建工程，如图：</p><p><a href="https://imgchr.com/i/VHpATU" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VHpATU.md.png" alt="VHpATU.md.png"></a></p><p>设置工程名与工程保存的路径完毕后点击<code>ok</code>。<code>source insight</code>工程通常是与源码在同一路径下，如：</p><p><a href="https://imgchr.com/i/VHpB0f" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VHpB0f.md.png" alt="VHpB0f.md.png"></a></p><p>（2）点击<code>ok</code>按钮</p><p><a href="https://imgchr.com/i/VHpytg" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VHpytg.md.png" alt="VHpytg.md.png"></a></p><p>（3）找到源码所在路径</p><p><a href="https://imgchr.com/i/VHpWXq" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VHpWXq.md.png" alt="VHpWXq.md.png"></a></p><p>（4）把需要阅读的代码添加进来（可以是文件夹，也可以是文件）</p><p><a href="https://imgchr.com/i/VHp57T" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VHp57T.md.png" alt="VHp57T.md.png"></a></p><p>这里我想阅读所有的源码，所以添加了全部的代码。</p><p>（5）点击<code>OK</code></p><p><a href="https://imgchr.com/i/VHpb9J" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VHpb9J.md.png" alt="VHpb9J.md.png"></a></p><p>（6）源码添加成功后点击<code>Close</code></p><p><a href="https://imgchr.com/i/VHpq39" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VHpq39.md.png" alt="VHpq39.md.png"></a></p><p>（7）阅读代码</p><p><a href="https://imgchr.com/i/VHpLcR" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VHpLcR.md.png" alt="VHpLcR.md.png"></a></p><p>这个软件让我们阅读代码很方便，可以看出函数之间的调用关系，可以预览函数实体等。</p><p>并且，这不仅是个强大的阅读器，而且也是个编辑器。在嵌入式Linux开发中，常常在windows环境下使用<code>source insight</code>编写代码，编写完成再传到linux环境下编译，这是一种很不错的开发方式。同样的，Linux下也有类似的阅读器，如<code>kscope</code>等。如何选择看个人习惯。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 工具 </tag>
            
            <tag> 代码阅读器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】指针函数与函数指针？</title>
      <link href="/2018/11/08/c-yu-yan-bi-ji-zhi-zhen-han-shu-yu-han-shu-zhi-zhen/"/>
      <url>/2018/11/08/c-yu-yan-bi-ji-zhi-zhen-han-shu-yu-han-shu-zhi-zhen/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>函数、指针这两个词结合的顺序不同其意义也不同，即指针函数与函数指针的意义不同。</p><h3 id="指针函数"><a href="#指针函数" class="headerlink" title="指针函数"></a>指针函数</h3><p>指针函数的本质是一个函数，其返回值是一个指针。示例如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">pfun</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>由于“*”的优先级低于“()”的优先级，因而pfun首先和后面的“()”结合，也就意味着，pfun是一个函数。即：<code>int *(pfun(int, int));</code></p><p>接着再和前面的“*”结合，说明这个函数的返回值是一个指针。由于前面还有一个int，也就是说，pfun是一个返回值为整型指针的函数。</p><p>指针函数示例程序如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment" spellcheck="true">//这是一个指针函数的声明</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">pfun</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指针函数的调用</span> p <span class="token operator">=</span> <span class="token function">pfun</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"array[%d] = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这是一个指针函数，其返回值为指向整形的指针</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">pfun</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> arr<span class="token punctuation">;</span> <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序运行结果如下：</p><p><a href="https://imgchr.com/i/V5wndf" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5wndf.md.png" alt="V5wndf.md.png"></a></p><p>主函数中，把一个数组的首地址与数组长度作为实参传入指针函数pfun里，把指针函数的返回值（即指向数组的指针）赋给整形指针p。最后使用指针p来遍历数组元素并打印输出。</p><h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p>函数指针其本质是一个指针变量，该指针变量指向一个函数。C程序在编译时，每一个函数都有一个入口地址，该入口地址就是函数指针所指向的地址。函数指针示例：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*声明一个函数指针 */</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fptr<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 函数指针指向函数func */</span>fptr <span class="token operator">=</span> func<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 或者fptr = &amp;func;</span></code></pre><p>func是一个函数名，那么func与&amp;func都表示的是函数的入口地址。同样的，在函数的调用中可以使用：方式一：func()，也可以使用方式二：(*fun)()。这两种调用方式是等价的，只是我们平时大多都习惯用方式一的调用方法。</p><p>至于为什么func与&amp;func的含义相同，<code>《嵌入式Linux上的C语言编程实践》</code>这本书中有如下解释：</p><blockquote><p>对于函数func来说，函数的名称就是函数代码区的常量，对它取地址(&amp;func)可以得到函数代码区的地址，同时，func本身也可以视为函数代码区的地址。因此，函数名称和对其取地址其含义是相同的。</p></blockquote><p>函数指针示例程序如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fptr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义一个函数指针</span> <span class="token keyword">int</span> res<span class="token punctuation">;</span> fptr <span class="token operator">=</span> add<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//函数指针fptr指向函数add</span> <span class="token comment" spellcheck="true">/* 通过函数指针调用函数 */</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>fptr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//等价于res = fptr(1,2);</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a + b = %d\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序运行结果如下：</p><p><a href="https://imgchr.com/i/V5wJLq" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5wJLq.md.png" alt="V5wJLq.md.png"></a></p><p>以上就是关于指针函数与函数指针的简单区分。其中，函数指针广泛应用于嵌入式软件开发中，其常用的两个用途：调用函数和做函数的参数。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】关于有符号数与无符号数的一些总结</title>
      <link href="/2018/10/30/c-yu-yan-bi-ji-guan-yu-you-fu-hao-shu-yu-wu-fu-hao-shu-de-yi-xie-zong-jie/"/>
      <url>/2018/10/30/c-yu-yan-bi-ji-guan-yu-you-fu-hao-shu-yu-wu-fu-hao-shu-de-yi-xie-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="有、无符号数之间的运算"><a href="#有、无符号数之间的运算" class="headerlink" title="有、无符号数之间的运算"></a>有、无符号数之间的运算</h3><p>有符号数与无符号数之间的运算，编译器会进行隐式类型转换。</p><p>请看如下代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> a<span class="token operator">+</span>b <span class="token operator">></span> <span class="token number">6</span> <span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a+b大于6\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a+b小于6\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序输出结果为：</p><pre class=" language-c"><code class="language-c">a<span class="token operator">+</span>b大于<span class="token number">6</span></code></pre><p>原因是因为编译器会将有符号数b转换成为一个无符号数，即此处<code>a+b</code>等价于<code>a+(unsigned int)b</code>。</p><p>该程序运行在32bit环境下，b的值为<code>0xFFFFFFFF-20+1 = 4294967276</code>，即a+b将远远大于6。</p><p>C 语言按照一定的规则来进行此类运算的转换，这种规则称为<code>正常算术转换</code>，转换的顺序为：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">double</span><span class="token operator">></span><span class="token keyword">float</span><span class="token operator">></span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">></span><span class="token keyword">long</span><span class="token operator">></span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token keyword">int</span></code></pre><p>即操作数类型排在后面的与操作数类型排在前面的进行运算时，排在后面的类型将隐式转换为排在前面的类型。</p><h3 id="有、无符号数转化为更大类型"><a href="#有、无符号数转化为更大类型" class="headerlink" title="有、无符号数转化为更大类型"></a>有、无符号数转化为更大类型</h3><p>请看如下代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//情况一</span> <span class="token keyword">signed</span> <span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span>   <span class="token keyword">unsigned</span> <span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span> <span class="token keyword">int</span> a1<span class="token punctuation">,</span>a2<span class="token punctuation">;</span> a1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c1<span class="token punctuation">;</span> a2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c2<span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a1=%d(%#.8X),a2=%d(%#.8X)\n"</span><span class="token punctuation">,</span>a1<span class="token punctuation">,</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">,</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//情况二</span> <span class="token keyword">signed</span> <span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> c4 <span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span> <span class="token keyword">int</span> a3<span class="token punctuation">,</span>a4<span class="token punctuation">;</span> a3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c3<span class="token punctuation">;</span> a4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c4<span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a3=%d(%#.8X),a4=%d(%#.8X)\n"</span><span class="token punctuation">,</span>a3<span class="token punctuation">,</span>a3<span class="token punctuation">,</span>a4<span class="token punctuation">,</span>a4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//情况三</span> <span class="token keyword">signed</span> <span class="token keyword">char</span> c5 <span class="token operator">=</span> <span class="token number">0x7f</span><span class="token punctuation">;</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> c6 <span class="token operator">=</span> <span class="token number">0x7f</span><span class="token punctuation">;</span> <span class="token keyword">int</span> a5<span class="token punctuation">,</span>a6<span class="token punctuation">;</span> a5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c5<span class="token punctuation">;</span> a6 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c6<span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a5=%d(%#.8X),a6=%d(%#.8X)\n"</span><span class="token punctuation">,</span>a5<span class="token punctuation">,</span>a5<span class="token punctuation">,</span>a6<span class="token punctuation">,</span>a6<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序输出结果为：</p><pre class=" language-c"><code class="language-c">a1<span class="token operator">=</span><span class="token operator">-</span><span class="token function">1</span><span class="token punctuation">(</span><span class="token number">0XFFFFFFFF</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a2<span class="token operator">=</span><span class="token function">255</span><span class="token punctuation">(</span><span class="token number">0X000000FF</span><span class="token punctuation">)</span>a3<span class="token operator">=</span><span class="token operator">-</span><span class="token function">128</span><span class="token punctuation">(</span><span class="token number">0XFFFFFF80</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a4<span class="token operator">=</span><span class="token function">128</span><span class="token punctuation">(</span><span class="token number">0X00000080</span><span class="token punctuation">)</span>a5<span class="token operator">=</span><span class="token function">127</span><span class="token punctuation">(</span><span class="token number">0X0000007F</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a6<span class="token operator">=</span><span class="token function">127</span><span class="token punctuation">(</span><span class="token number">0X0000007F</span><span class="token punctuation">)</span></code></pre><p>可见：</p><p>（1）将无符号数转换为更大的数据类型时, 只需简单地在开头添加0至所需位数，这种运算称为0扩展。</p><p>（2）将有符号数转换为更大的数据类型需要执行符号扩展，规则是将符号位扩展至所需的位数，即符号位为0时在开头添加0至所需位数，符号位为1时在开头添加1至所需位数。</p><p>此外，还需注意，对于一个signed char类型数据，0xff代表的是-1，因为整数在内存中是以补码的形式存储的。</p><p>正数的原码、反码、补码都相等。负数的反码是将原码中除符号位以外的所有位（数值位）取反，也就是 0 变成 1，1 变成 0；负数的补码是其反码加 1。</p><p>此处，对于一个signed char类型数据，-1的原码为1000 0001，反码为1111 1110，所以补码为1111 1111。</p><p>signed char的负数对应表为（图片来源于网络）：</p><p><a href="https://imgchr.com/i/V5Fk0U" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5Fk0U.md.png" alt="V5Fk0U.md.png"></a></p><p>其中，-128最为特殊，需要特别记住，其不遵循传统的由补码计算原码的方法。</p><p>以上就是关于有符号数与无符号数的两点总结：（1）有符号数与无符号数之间的运算，编译器会进行隐式类型转换。（2）有符号数、无符号数转换为更大的数据类型。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】static关键字</title>
      <link href="/2018/10/25/c-yu-yan-bi-ji-static-guan-jian-zi/"/>
      <url>/2018/10/25/c-yu-yan-bi-ji-static-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<pre class=" language-c"><code class="language-c">参考：https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span>keyeagle<span class="token operator">/</span>article<span class="token operator">/</span>details<span class="token operator">/</span><span class="token number">6708077</span><span class="token operator">?</span>utm_source<span class="token operator">=</span>copy </code></pre><p>C语言代码是以文件为单位来组织的，在一个源程序的所有源文件中，一个外部变量（注意不是局部变量）或者函数只能在一个源程序中定义一次，如果有重复定义的话编译器就会报错。</p><p>伴随着不同源文件变量和函数之间的相互引用以及相互独立的关系，产生了extern和static关键字。</p><p>下面，详细分析一下static关键字在编写程序时有的三大类用法：</p><h3 id="static定义全局变量"><a href="#static定义全局变量" class="headerlink" title="static定义全局变量"></a>static定义全局变量</h3><p>一个进程在内存中的布局如图1所示：</p><p><a href="https://imgchr.com/i/V5F0nf" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5F0nf.md.png" alt="V5F0nf.md.png"></a></p><p>其中<code>.text段</code>保存进程所执行的程序二进制文件，<code>.data段</code>保存进程所有的已初始化的全局变量，<code>.bss段</code>保存进程未初始化的全局变量（其他段中还有很多乱七八糟的段，暂且不表）。在进程的整个生命周期中，.data段和.bss段内的数据时跟整个进程同生共死的，也就是在进程结束之后这些数据才会寿终就寝。</p><p>当一个进程的全局变量被声明为static之后，它的中文名叫<code>静态全局变量</code>。静态全局变量和其他的全局变量的存储地点并没有区别，都是在.data段（已初始化）或者.bss段（未初始化）内，但是它只在定义它的源文件内有效，其他源文件无法访问它。所以，普通全局变量穿上static外衣后，它就变成了新娘，已心有所属，只能被定义它的源文件（新郎）中的变量或函数访问。</p><p>以下是示例程序：</p><p>file1.h如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">printStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们在file1.c中定义一个静态全局变量hello, 供file1.c中的函数printStr访问。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"file1.h"</span></span><span class="token keyword">static</span> <span class="token keyword">char</span><span class="token operator">*</span> hello <span class="token operator">=</span> <span class="token string">"hello ZhengNian!"</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">printStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> hello<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>main.c如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"file1.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> hello<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>main.c是我们的主程序所在文件，main.c中如果引用hello会编译出错，报错如下：</p><p><a href="https://imgchr.com/i/V5knUg" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5knUg.md.png" alt="V5knUg.md.png"></a></p><p>如果我们将main.c改为下面的形式：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"file1.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>则会顺利编译连接。运行结果如下：</p><p><a href="https://imgchr.com/i/V5ku5Q" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5ku5Q.md.png" alt="V5ku5Q.md.png"></a></p><h3 id="static定义局部变量"><a href="#static定义局部变量" class="headerlink" title="static定义局部变量"></a>static定义局部变量</h3><p>static局部变量中文名叫静态局部变量。它与普通的局部变量比起来有如下几个区别：</p><p>（1）位置：静态局部变量被编译器放在全局存储区.data（注意：不在.bss段内，原因见（3）），所以它虽然是局部的，但是在程序的整个生命周期中存在。</p><p>（2）访问权限：静态局部变量只能被其作用域内的变量或函数访问。也就是说虽然它会在程序的整个生命周期中存在，由于它是static的，它不能被其他的函数和源文件访问。</p><p>（3）值：静态局部变量如果没有被用户初始化，则会被编译器自动赋值为0，以后每次调用静态局部变量的时候都用上次调用后的值。这个比较好理解，每次函数调用静态局部变量的时候都修改它然后离开，下次读的时候从全局存储区读出的静态局部变量就是上次修改后的值。</p><p>以下是示例程序：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> normal_var <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">static</span> <span class="token keyword">int</span> static_var <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"normal_var:%d  static_var:%d\n"</span><span class="token punctuation">,</span> normal_var<span class="token punctuation">,</span> static_var<span class="token punctuation">)</span><span class="token punctuation">;</span> normal_var<span class="token operator">++</span><span class="token punctuation">;</span> static_var<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果如下：</p><p><a href="https://imgchr.com/i/V5kl2n" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5kl2n.md.png" alt="V5kl2n.md.png"></a></p><p>可以看出，函数每次被调用，普通局部变量都是重新分配，而静态局部变量保持上次调用的值不变。</p><p>需要注意的是由于static局部变量的这种特性，使得含静态局部变量的函数变得不可重入，即每次调用可能会产生不同的结果。这在多线程编程时可能会成为一种隐患。需要多加注意。</p><h3 id="static定义函数"><a href="#static定义函数" class="headerlink" title="static定义函数"></a>static定义函数</h3><p>当你的程序中有很多个源文件的时候，你肯定会让某个源文件只提供一些外界需要的接口，其他的函数可能是为了实现这些接口而编写，这些其他的函数你可能并不希望被外界（非本源文件）所看到，这时候就可以用static修饰这些“其他的函数”。</p><p>所以static函数的作用域是本源文件。static定义函数与static定义全局变量类似，不再举例说明，可参考“static定义全局变量”的程序定义全局变量的套路。</p><p>以上就是关于static的三种用法，如有错误，欢迎指出！</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】数组与指针不等价</title>
      <link href="/2018/10/25/c-yu-yan-bi-ji-shu-zu-yu-zhi-zhen-bu-deng-jie/"/>
      <url>/2018/10/25/c-yu-yan-bi-ji-shu-zu-yu-zhi-zhen-bu-deng-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>数组与指针是不等价的，如：</p><ul><li><p>数组名不可以改变，而指向数组的指针是可以改变的。</p></li><li><p>字符串指针指向的字符串中的字符是不能改变的，而字符数组中的字符是可以改变的。</p></li><li><p>求数组长度时，借用数组名可求得数组长度，而借用指针却得不到数组长度。</p></li></ul><h3 id="区别一"><a href="#区别一" class="headerlink" title="区别一"></a>区别一</h3><p>数组名的指向不可以改变，而指向数组的指针是可以改变的。</p><p>请看如下代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数组遍历方式一</span> <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a[%d] = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 数组遍历方式二</span> <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a[%d] = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>数组遍历方式一：使用指针遍历数组元素，<em>p++等价于</em>(p++)，即指针指向的地址每次后移一个单位，然后再取地址上的值。这里的一个单位是sizeof(int)个字节。</p><p>数组遍历方式二：使用数组名自增遍历数组元素，编译出错，错误如下：</p><pre class=" language-c"><code class="language-c">error<span class="token punctuation">:</span> value required as increment operand</code></pre><p>因为数组名的指向是不可以改变的，使用自增运算符自增就会改变其指向，这是不对的，数组名只能指向数组的开头。但是可以改为如下遍历方式：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a[%d] = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>这可以正确遍历数组元素。因为*(a+i)与a[i]是等价的。</p><h3 id="区别二"><a href="#区别二" class="headerlink" title="区别二"></a>区别二</h3><p>字符串指针指向的字符串中的字符是不能改变的，而字符数组中的字符是可以改变的。</p><p>请看如下代码：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//字符串定义方式一</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"happy"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符串定义方式二</span><span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token string">"happy"</span><span class="token punctuation">;</span></code></pre><p>字符串定义方式一：字符串中的字符是可以改变的。如可以使用类似str[3]=’q’这样的语句来改变其中的字符。原因就是：这种方式定义的字符串保存在全局数据区或栈区，是可读写的。</p><p>字符串定义方式二：字符串中的字符是不可以改变的。原因就是：这种方式定义的字符串保存在常量区，是不可修改的。</p><h3 id="区别三"><a href="#区别三" class="headerlink" title="区别三"></a>区别三</h3><p>求数组长度时，借用数组名可求得数组长度，而借用指针却得不到数组长度。</p><p>请看如下代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token keyword">char</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 求数组长度方式一</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"方式一：len=%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 求数组长度方式二</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"方式二：len=%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果</p><pre class=" language-c"><code class="language-c">方式一：len<span class="token operator">=</span><span class="token number">5</span>方式二：len<span class="token operator">=</span><span class="token number">1</span></code></pre><p>求数组长度方式一：借用数组名来求数组长度，可求得数组有5个元素，正确。</p><p>求数组长度方式二：借用指针求数组长度，求得长度为1，错误。原因是：</p><p>p只是一个指向int类型的指针，编译器不知道其指向的是一个整数还是指向一个数组。sizeof(p)求得的是p这个指针变量本身所占用的字节数，而不是整个数组占用的字节数。</p><p>以上就是指针与其指向的数组的三个典型的区别：（1）遍历数组时需要注意；（2）修改字符串中的字符时需要注意；（3）求数组长度时需要注意。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】关于二维数组作为函数参数的问题</title>
      <link href="/2018/10/25/c-yu-yan-bi-ji-guan-yu-er-wei-shu-zu-zuo-wei-han-shu-can-shu-de-wen-ti/"/>
      <url>/2018/10/25/c-yu-yan-bi-ji-guan-yu-er-wei-shu-zu-zuo-wei-han-shu-can-shu-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>在构建过二维数组作为函数的参数时遇到了一个问题。首先，我们看一个函数：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//printf("%d ", array[i][j] );</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>array<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">+</span>j<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>函数设计的功能很简单，就是打印输出二维数组中的所有元素。</p><p>假如我们的主函数为：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>大家觉得输出结果会是什么呢？结果是什么都没输出。出错原因是因为二维数组作为函数参数时要给出二维长度。但是，是不是就不能使用这个函数了呢？还是可以使用的，只要在主函数中定义一个指针数组作为中间桥梁即可正确输出。即主函数修改为如下所示：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//a[0]</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//a[1]</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//a[2]</span> <span class="token function">func1</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>         </code></pre><p>定义一个指针数组，该指针数组中的元素分别指向每一行的第一个元素。再把该指针数组作为形参传入func1函数中。</p><p>除此之外，还有如下三种方法构造函数：</p><p>（1）形参声明为一级指针</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token operator">*</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（2）形参给出二维长度</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">func3</span><span class="token punctuation">(</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span>   <span class="token punctuation">{</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（3）形参声明为指向数组的指针（数组指针）</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">func4</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>array<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以上代码关于二维数组作为函数参数时，函数的定义方法。如有错误，欢迎指出~</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】关于数组与指针的总结</title>
      <link href="/2018/10/23/c-yu-yan-bi-ji-guan-yu-shu-zu-yu-zhi-zhen-de-zong-jie/"/>
      <url>/2018/10/23/c-yu-yan-bi-ji-guan-yu-shu-zu-yu-zhi-zhen-de-zong-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考：C语言中文网</p></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>数组与指针有很密切的联系，常见的结合情况有以下三种：</p><ul><li>数组指针</li><li>指针数组</li><li>二维数组指针</li></ul><h3 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h3><p>数组指针：指向数组的指针。如：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//也可写作int *p=&amp;arr[0]</span></code></pre><p>也就是说，p，arr，&amp;arr[0]都是指向数组的开头，即第0个元素的地址。</p><p>如果一个指针p指向一个数组arr[]的开头，那么p+i为数组第i个元素的地址，即&amp;arr[i]，那么*(p+i)为数组第i个元素的值，即arr[i]。</p><p>同理，若指针p指向数组的第n个元素，那么p+i为第n+1个元素的地址；不管 p 指向了数组的第几个元素，p+1 总是指向下一个元素，p-1 也总是指向上一个元素。</p><p>下面示例证实了这一点：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//也可以写作 int *p = arr + 3;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, %d, %d, %d, %d\n"</span><span class="token punctuation">,</span>    <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token number">-3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果为：</p><pre class=" language-c"><code class="language-c"><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span></code></pre><h3 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h3><p>指针数组：数组中每个元素都是指针。如：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>示例程序：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//定义一个指针数组</span>   <span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//也可以不指定长度，直接写作 int *parr[]</span>   <span class="token comment" spellcheck="true">//定义一个指向指针数组的指针</span>   <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>parr <span class="token operator">=</span> arr<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, %d, %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, %d, %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>parr<span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>parr<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>parr<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>第一个 printf() 语句中，arr[i] 表示获取第 i 个元素的值，该元素是一个指针，还需要在前面增加一个 * 才能取得它指向的数据，也即 *arr[i] 的形式。</p><p>第二个 printf() 语句中，parr+i 表示第 i 个元素的地址，<em>(parr+i) 表示获取第 i 个元素的值（该元素是一个指针），*</em>(parr+i) 表示获取第 i 个元素指向的数据。</p><p>指针数组还可以和字符串数组结合使用，请看下面的例子：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token punctuation">{</span>       <span class="token string">"hello C"</span><span class="token punctuation">,</span>       <span class="token string">"hello C++"</span><span class="token punctuation">,</span>       <span class="token string">"hello Java"</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n%s\n%s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果为：</p><pre class=" language-c"><code class="language-c">hello Chello C<span class="token operator">++</span>hello Java</code></pre><h3 id="二维数组指针"><a href="#二维数组指针" class="headerlink" title="二维数组指针"></a>二维数组指针</h3><p>二维数组指针：指向二维数组的指针。如：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span></code></pre><p>a[3][4]表示一个3行4列的二维数组，其所有元素在内存中是连续存储的。</p><p>请看如下程序：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">for</span><span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a[%d][%d]=%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果为：</p><pre class=" language-c"><code class="language-c">a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">6422216</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">6422220</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">6422224</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">6422228</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">6422232</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">6422236</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">6422240</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">6422244</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">6422248</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">6422252</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">6422256</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">6422260</span></code></pre><p>可见，每个元素的地址都是相差4个字节，即每个连续在内存中是连续存储的。</p><p>按照以上定义可归纳出如下4个结论：</p><p>（1）p指向数组a的开头，也即第1行；p+1前进一行，指向第2行。</p><p>（2）*(p+1)表示取第2行元素（一整行元素）。</p><p>（3）*(p+1)+1表示第2行第2个元素的地址。</p><p>（4）<em>(</em>(p+1)+1)表示第2行第2个元素的值。</p><p>综上4点，可得出如下结论：</p><pre class=" language-c"><code class="language-c">a<span class="token operator">+</span>i <span class="token operator">==</span> p<span class="token operator">+</span>i <span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">+</span>j<span class="token punctuation">)</span></code></pre><p>以上就是数组与指针常用的三种结合形式。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】指针变量的运算</title>
      <link href="/2018/10/22/c-yu-yan-bi-ji-zhi-zhen-bian-liang-de-yun-suan/"/>
      <url>/2018/10/22/c-yu-yan-bi-ji-zhi-zhen-bian-liang-de-yun-suan/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>指针变量也是可以进行运算的，如指针变量对其自身加上某个整数或减去某个整数，这在内存上体现为：相对这个指针向后偏移多少个单位或向前偏移了多少个单位，这里的单位与指针变量的类型有关。在32bit环境下，int类型占4个字节，float占4字节，double类型占8字节，char占1字节。</p><p>【注意】一些处理整数的操作不能用来处理指针。例如，可以把两个整数相乘，但是不能把两个指针相乘。</p><h3 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span>    a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">*</span>pa <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token keyword">float</span>  b <span class="token operator">=</span> <span class="token number">6.6</span><span class="token punctuation">,</span> <span class="token operator">*</span>pb <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>    <span class="token keyword">char</span>   c <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token operator">*</span>pc <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token punctuation">;</span>    <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">2.14e9</span><span class="token punctuation">,</span> <span class="token operator">*</span>pd <span class="token operator">=</span> <span class="token operator">&amp;</span>d<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//最初的值</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pa0=%d, pb0=%d, pc0=%d, pd0=%d\n"</span><span class="token punctuation">,</span> pa<span class="token punctuation">,</span> pb<span class="token punctuation">,</span> pc<span class="token punctuation">,</span> pd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//加法运算</span>    pa <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>     pb <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>     pc <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    pd <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pa1=%d, pb1=%d, pc1=%d, pd1=%d\n"</span><span class="token punctuation">,</span> pa<span class="token punctuation">,</span> pb<span class="token punctuation">,</span> pc<span class="token punctuation">,</span> pd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//减法运算</span>    pa <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     pb <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     pc <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    pd <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pa2=%d, pb2=%d, pc2=%d, pd2=%d\n"</span><span class="token punctuation">,</span> pa<span class="token punctuation">,</span> pb<span class="token punctuation">,</span> pc<span class="token punctuation">,</span> pd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果为：</p><pre class=" language-c"><code class="language-c">pa0<span class="token operator">=</span><span class="token number">6422268</span><span class="token punctuation">,</span> pb0<span class="token operator">=</span><span class="token number">6422264</span><span class="token punctuation">,</span> pc0<span class="token operator">=</span><span class="token number">6422263</span><span class="token punctuation">,</span> pd0<span class="token operator">=</span><span class="token number">6422248</span>pa1<span class="token operator">=</span><span class="token number">6422276</span><span class="token punctuation">,</span> pb1<span class="token operator">=</span><span class="token number">6422272</span><span class="token punctuation">,</span> pc1<span class="token operator">=</span><span class="token number">6422265</span><span class="token punctuation">,</span> pd1<span class="token operator">=</span><span class="token number">6422264</span>pa2<span class="token operator">=</span><span class="token number">6422272</span><span class="token punctuation">,</span> pb2<span class="token operator">=</span><span class="token number">6422268</span><span class="token punctuation">,</span> pc2<span class="token operator">=</span><span class="token number">6422264</span><span class="token punctuation">,</span> pd2<span class="token operator">=</span><span class="token number">6422256</span></code></pre><p>解析：</p><p>举例说明<code>pa0→pa1→pa2</code>的过程，其他类似。<code>pa0+2*sizeof(int)=pa1,pa1-1*sizeof(int)=pa2</code>。因为pa为int类型的指针，所以加减运算是以4字节（即sizeof(int)）为单位地址向前向后偏移的。看下图：</p><p><a href="https://imgchr.com/i/V59WwQ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V59WwQ.md.png" alt="V59WwQ.md.png"></a></p><p>如图：pa1所指向的地址在pa0所指向地址往后8字节处，pa2指向地址在pa1指向地址往前4字节处。</p><p>从本示例程序中，还可以看出：连续定义的变量在内存的存储有可能是紧挨着的，有可能是分散着的。</p><p>以上就是关于C语言指针变量运算的一些总结：指针变量与整数相加相减是相对该指针指向的地址向后向前偏移多少个单位。这里的单位不能认为总是1。在32bit环境下，char类型指针的偏移单位才是1字节，int类型指针偏移单位是4字节，float类型指针偏移单位是4字节，double类型指针偏移单位是8字节。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】结构体内存对齐</title>
      <link href="/2018/10/20/c-yu-yan-bi-ji-jie-gou-ti-nei-cun-dui-qi/"/>
      <url>/2018/10/20/c-yu-yan-bi-ji-jie-gou-ti-nei-cun-dui-qi/</url>
      
        <content type="html"><![CDATA[<p>先看一个结构体：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Test<span class="token punctuation">{</span> <span class="token keyword">char</span> a1<span class="token punctuation">;</span> <span class="token keyword">int</span> a2<span class="token punctuation">;</span> <span class="token keyword">char</span> a3<span class="token punctuation">;</span> <span class="token keyword">short</span> a4<span class="token punctuation">;</span><span class="token punctuation">}</span>Test_T<span class="token punctuation">;</span></code></pre><p>在32位编译系统下这一个结构体的字节数是多少呢？是1+4+1+2=8字节吗？不是的，实际结果为12字节。为什么呢？因为编译器会对不足4字节的变量空间自动补齐为4个字节（这就是内存对齐），以提高CPU的寻址效率（32位CPU以4个字节步长寻址的）。</p><p>内存对齐是编译器的“管辖范围”。编译器为程序中的每个”数据单元“安排在适当的位置上，以便于能快速的找到每个“数据单元”。对于32bit的CPU，其寻址的步长为4个字节（即unsigned int 字节长度），这就是常说的“4字节对齐”。同理，对于64bit的CPU，就有“8字节对齐”。本文以32位的CPU为例。</p><p>请看下面代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Test<span class="token punctuation">{</span> <span class="token keyword">char</span> a1<span class="token punctuation">;</span> <span class="token keyword">int</span> a2<span class="token punctuation">;</span> <span class="token keyword">char</span> a3<span class="token punctuation">;</span> <span class="token keyword">short</span> a4<span class="token punctuation">;</span><span class="token punctuation">}</span>Test_T<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> Test_T T<span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nsizeof(T) = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a1地址：%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>T<span class="token punctuation">.</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a2地址：%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>T<span class="token punctuation">.</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a3地址：%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>T<span class="token punctuation">.</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a4地址：%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>T<span class="token punctuation">.</span>a4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果为：<br><a href="https://imgchr.com/i/V5iCZD" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5iCZD.md.png" alt="V5iCZD.md.png"></a></p><p>可见，正好印证了上述的说法，补齐之后结构体成员a1,a2,a3的地址之间正好相差4个字节,a3与a4之间相差两个字节也是因为在其中多留出了1个空白字节。该程序的运行结果可形象地描述为下图：</p><p><a href="https://imgchr.com/i/V5inL8" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5inL8.md.png" alt="V5inL8.md.png"></a></p><p>a1只占用一个字节，为了内存对齐保留了三个空白字节；a3和a4加起来共3字节，为了内存对齐保留了1个空白字节。这就是编译器存储变量时做的见不得人的”手脚“，以方便其雇主——CPU能更快地找到这些变量。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】指针的基本概念</title>
      <link href="/2018/10/19/c-yu-yan-bi-ji-zhi-zhen-de-ji-ben-gai-nian/"/>
      <url>/2018/10/19/c-yu-yan-bi-ji-zhi-zhen-de-ji-ben-gai-nian/</url>
      
        <content type="html"><![CDATA[<p>我们平时定义的变量最终都会保存在内存里，内存的最小存储单位称为<code>内存单元</code>。通常，一个字节称为一个<code>内存单元</code>。而我们定义的变量就保存在这些内存单元里，为了正确地访问这些数据，必须为每个内存单元都编上编号，每个内存单元的编号是唯一的，就像每个人都有唯一的身份证号，只要知道身份证号就能找到这个人。同样，根据内存单元编号就可以准确地找到保存在该内存单元中的数据。内存单元的编号也就是地址。</p><p>下图是 4G 内存中每个字节的编号：</p><p><img src="https://s2.ax1x.com/2019/06/14/V5a4AO.png" alt="V5a4AO.png"></p><p>看一段程序：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\na的地址%#x\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出</p><pre class=" language-c"><code class="language-c">a的地址<span class="token number">0x61ff0c</span></code></pre><p>a是一个int型变量，其的值1保存在地址0~0xFFFFFFFF之间的编号为0x61ff0c的地址上。</p><p>指针是一种特殊的数据类型，用指针声明的变量称为<code>指针变量</code>。  指针变量的值实际上是一个地址。</p><h3 id="一、指针变量的声明与初始化举例："><a href="#一、指针变量的声明与初始化举例：" class="headerlink" title="一、指针变量的声明与初始化举例："></a>一、指针变量的声明与初始化举例：</h3><p>1、在声明时赋值</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化赋值，&amp;a表示取变量a的首地址</span></code></pre><p>2、动态赋值</p><pre><code>int a;int *p;p=&amp;a;  //利用&amp;a获得变量a的首地址，然后赋值给p</code></pre><h3 id="二、注意区分的两个概念：指针的类型与指针所指的类型"><a href="#二、注意区分的两个概念：指针的类型与指针所指的类型" class="headerlink" title="二、注意区分的两个概念：指针的类型与指针所指的类型"></a>二、注意区分的两个概念：指针的类型与指针所指的类型</h3><p>1、指针的类型</p><pre class=" language-c"><code class="language-c"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">int</span><span class="token operator">*</span>ptr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指针的类型是int* </span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">char</span><span class="token operator">*</span>ptr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指针的类型是char* </span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span>ptr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指针的类型是int**</span></code></pre><p>从语法的角度看，只要把指针声明语句里的指针名字去掉，剩下的部分就是这个指针的类型。</p><p>2、指针所指的类型</p><pre class=" language-c"><code class="language-c"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">int</span><span class="token operator">*</span>ptr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指针所指向的类型是int </span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">char</span><span class="token operator">*</span>ptr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指针所指向的的类型是char </span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span>ptr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指针所指向的的类型是int*</span></code></pre><p>从语法的角度看，只须把指针声明语句中的指针名字和名字左边的指针声明符*去掉，剩下的就是指针所指向的类型。</p><p>以上就是指针的基本概念，关键理解指针的类型与指针所指向的类型。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】变量的初始值是？</title>
      <link href="/2018/10/18/c-yu-yan-bi-ji-bian-liang-de-chu-shi-zhi-shi/"/>
      <url>/2018/10/18/c-yu-yan-bi-ji-bian-liang-de-chu-shi-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p>一个变量，即使没有给它赋初值，它也是有一个默认初值的。下面来看一段程序：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">;</span><span class="token keyword">float</span> b1<span class="token punctuation">,</span> b2<span class="token punctuation">;</span><span class="token keyword">char</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> a3<span class="token punctuation">,</span> a4<span class="token punctuation">;</span> <span class="token keyword">float</span> b3<span class="token punctuation">,</span> b4<span class="token punctuation">;</span> <span class="token keyword">char</span> c3<span class="token punctuation">,</span> c4<span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"全局变量：a1 = %d, a2 = %d, b1 = %f, b2 = %f, c1 =%d, c2 =%d\n"</span><span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> b1<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"局部变量：a3 = %d, a4 = %d, b3 = %f, b4 = %f, c3 =%d, c4 =%d\n"</span><span class="token punctuation">,</span> a3<span class="token punctuation">,</span> a4<span class="token punctuation">,</span> b3<span class="token punctuation">,</span> b4<span class="token punctuation">,</span> c3<span class="token punctuation">,</span> c4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序运行结果为：</p><pre class=" language-c"><code class="language-c">全局变量：a1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> a2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b1 <span class="token operator">=</span> <span class="token number">0.000000</span><span class="token punctuation">,</span> b2 <span class="token operator">=</span> <span class="token number">0.000000</span><span class="token punctuation">,</span> c1 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> c2 <span class="token operator">=</span><span class="token number">0</span>局部变量：a3 <span class="token operator">=</span> <span class="token number">4200660</span><span class="token punctuation">,</span> a4 <span class="token operator">=</span> <span class="token number">4200754</span><span class="token punctuation">,</span> b3 <span class="token operator">=</span> <span class="token number">0.000000</span><span class="token punctuation">,</span> b4 <span class="token operator">=</span> <span class="token number">0.000000</span><span class="token punctuation">,</span> c3 <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> c4 <span class="token operator">=</span><span class="token number">0</span></code></pre><p>可见，全局变量的默认初值为0。局部变量的默认是随机的，没有规律的。所以，我们在使用局部变量之前应该首先进行初始化，否则可能会出现意想不到的错误。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】volatile关键字</title>
      <link href="/2018/10/17/c-yu-yan-bi-ji-volatile-guan-jian-zi/"/>
      <url>/2018/10/17/c-yu-yan-bi-ji-volatile-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<h3 id="volatile的作用"><a href="#volatile的作用" class="headerlink" title="volatile的作用"></a>volatile的作用</h3><p>volatile的作用是作为指令关键字，确保本条指令不会因编译器的优化而省略，且要求每次直接读值。</p><p>简单地说就是防止编译器对代码进行优化。比如如下程序：</p><pre class=" language-c"><code class="language-c">XBYTE<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x55</span><span class="token punctuation">;</span>XBYTE<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x56</span><span class="token punctuation">;</span>XBYTE<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x57</span><span class="token punctuation">;</span>XBYTE<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x58</span><span class="token punctuation">;</span></code></pre><p>对外部硬件而言，上述四条语句分别表示不同的操作，会产生四种不同的动作，但是编译器却会对上述四条语句进行优化，认为只有<code>XBYTE[2]=0x58</code>（即忽略前三条语句，只产生一条机器代码）。如果键入volatile，则编译器会逐一地进行编译并产生相应的机器代码（产生四条代码）。</p><h3 id="编译器的优化"><a href="#编译器的优化" class="headerlink" title="编译器的优化"></a>编译器的优化</h3><p>在本次线程内，当读取一个变量时，为提高存取速度，编译器优化时有时会先把变量读取到一个寄存器中；以后再取变量值时，就直接从寄存器中取值；</p><p>当变量值在本线程里改变时，会同时把变量的新值copy到该寄存器中，以便保持一致<br>当变量在因别的线程等而改变了值，该寄存器的值不会相应改变，从而造成应用程序读取的值和实际的变量值不一致；</p><p>当该寄存器在因别的线程等而改变了值，原变量的值不会改变，从而造成应用程序读取的值和实际的变量值不一致。</p><p>举一个不太准确的例子：<br>发薪资时，会计每次都把员工叫来登记他们的银行卡号；一次会计为了省事，没有即时登记，用了以前登记的银行卡号；刚好一个员工的银行卡丢了，已挂失该银行卡号；从而造成该员工领不到工资。<br>员工 －－ 原始变量地址<br>银行卡号 －－ 原始变量在寄存器的备份</p><h3 id="volatile例子"><a href="#volatile例子" class="headerlink" title="volatile例子"></a>volatile例子</h3><p>精确地说就是，优化器在用到这个变量时必须每次都小心地重新读取这个变量的值，而不是使用保存在寄存器里的备份。下面是volatile变量的几个例子：</p><blockquote><p>1）并行设备的硬件寄存器（如：状态寄存器）<br>2）一个中断服务子程序中会访问到的非自动变量<br>3）多线程应用中被几个任务共享的变量</p></blockquote><p>请看下面几个问题：</p><blockquote><p>1）一个参数既可以是const还可以是volatile吗？解释为什么。<br>2）一个指针可以是volatile 吗？解释为什么。<br>3）下面的函数有什么错误：<br>int square(volatile int <em>ptr)<br>{   return ((</em>ptr) * (*ptr));<br>}</p></blockquote><p>下面是答案：</p><p>1）是的。一个例子是只读的状态寄存器。它是volatile因为它可能被意想不到地改变。它是const因为程序不应该试图去修改它。</p><p>2）是的。尽管这并不很常见。一个例子是当一个中断服务子程序修改一个指向一个buffer的指针时。</p><p>3）这段代码是个恶作剧。这段代码的目的是用来返指针<em>ptr指向值的平方，但是，由于</em>ptr指向一个volatile型参数，编译器将产生类似下面的代码：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token keyword">int</span><span class="token operator">*</span> <span class="token operator">&amp;</span>ptr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这里参数应该申明为引用，不然函数体里只会使用副本，外部没法更改</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>   a <span class="token operator">=</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>   b <span class="token operator">=</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>   <span class="token keyword">return</span> a<span class="token operator">*</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>由于*ptr的值可能在两次取值语句之间发生改变，因此a和b可能是不同的。结果，这段代码可能返回的不是你所期望的平方值！正确的代码如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">long</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token keyword">int</span><span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> a<span class="token punctuation">;</span>   a <span class="token operator">=</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>   <span class="token keyword">return</span> a<span class="token operator">*</span>a<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>volatile在嵌入式中经常用到。如：</p><p>（1）宏定义寄存器：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> PINSEL0 (*((volatile unsigned long*)0xE002C000))</span></code></pre><p>（2）宏读写操作：</p><pre><code>// 写操作#define write8b(addr, data) *(volatile unsigned char* (addr))=(unsigned char)data// 读操作#define read(addr) (*(volatile unsigned char* (addr)))</code></pre><p>（3）测试空循环的速度</p><pre class=" language-c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个语句用来测试空循环的速度的,但是编译器肯定要把它优化掉，根本就不执行。<br>如果你写成</p><pre class=" language-c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>它就会执行了。</p><p>（4）中断服务程序中修改的供其它程序检测的变量<br>由于访问寄存器的速度要快过RAM，所以编译器一般都会作减少存取外部RAM的优化。比如：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*Interruptserviceroutine.*/</span><span class="token keyword">void</span> <span class="token function">ISR_2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序的本意是希望ISR_2中断产生时，在main当中调用dosomething函数，但是，由于编译器判断在main函数里面没有修改过i，因此可能只执行一次对从i到某寄存器的读操作，然后每次if判断都只使用这个寄存器里面的“i副本”，导致dosomething永远也不会被调用。</p><p>如果将变量加上volatile修饰，则编译器保证对此变量的读写操作都不会被优化（肯定执行）。此例中i也应该如此说明。</p><p>嵌入式系统中涉及到硬件、中断、RTOS等，所有这些都要求使用volatile变量，可能被意想不到地改变。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】char *str与char str[]的区别</title>
      <link href="/2018/10/14/c-yu-yan-bi-ji-char-str-yu-char-str-de-qu-bie/"/>
      <url>/2018/10/14/c-yu-yan-bi-ji-char-str-yu-char-str-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>C语言中没有特定的字符串类型，常用以下两种方式定义字符串：一种是字符数组，另一种是指向字符串的指针。如下：</p><pre class=" language-c"><code class="language-c"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"happy"</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token string">"happy"</span><span class="token punctuation">;</span></code></pre><p>这种方式有什么不同呢？</p><p>示例一：字符数组</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre class=" language-c"><code class="language-c">Hello</code></pre><p>示例二：指向字符串的指针</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre class=" language-c"><code class="language-c">无打印信息输出</code></pre><p>可见，使用示例一方式定义的字符串其字符是可以修改的，使用示例二方式定义的字符串其字符是不可以修改的。示例二中可以成功编译和链接，但运行时可能会出现错误，我编译坏境是<code>32bit</code>的，运行结果是无打印信息输出，在其他不同的平台运行可能会出现<code>段错误（Segment Fault）</code>或者写入位置错误。</p><p>这两种表示字符串的方式的主要区别是：字符串指针指向的内容是不可修改的，字符数组是可以修改的，即示例二方式定义的字符串保存在常量区，是不可更改的，示例一方式定义的字符串保存在全局数据区或栈区，是可修改的。</p><p>内存的分配方式：</p><p>内存分配可分为三种：静态存储区、栈区、堆区。</p><p><code>1、静态存储区</code>：该内存在程序编译的时候就已经分配好，这块内存在程序的整个运行期间都存在，它主要存放静态数据、全局数据和常量。</p><p><code>2、栈区</code>：它的用途是完成函数的调用。在执行函数时，函数内局部变量及函数参数的存储单元在栈上创建，函数调用结束时这些存储单元自动被释放。</p><p><code>3、堆区</code>：程序在运行时使用库函数为变量申请内存，在变量使用结束后再调用库函数释放内存。动态内存的生存期是由我们决定的，如果我们不释放内存，就会导致内存泄漏。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】C语言编译的过程</title>
      <link href="/2018/10/14/c-yu-yan-bi-ji-c-yu-yan-bian-yi-de-guo-cheng/"/>
      <url>/2018/10/14/c-yu-yan-bi-ji-c-yu-yan-bian-yi-de-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h3><p>如果你使用的是集成开发环境，那么你点击编译按钮就可生成可执行文件，然后点击运行即可运行。那么，你知道从源代码到可执行文件经历了哪些过程吗。仅仅是编译？</p><p>下面以<code>windows</code>环境下的<code>test.c</code>为例，<code>test.c</code>里的代码为：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This is a test program!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其经历如下过程：</p><p><a href="https://imgchr.com/i/V5fr59" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5fr59.md.png" alt="V5fr59.md.png"></a></p><p>如图，编译生成可执行文件的过程实际包含四个过程：（1）预处理；（2）编译；（3）汇编；（4）链接。</p><h3 id="2、预处理（Preprpcessing）"><a href="#2、预处理（Preprpcessing）" class="headerlink" title="2、预处理（Preprpcessing）"></a>2、预处理（Preprpcessing）</h3><p>使用预处理器把源文件<code>test.c</code>经过预处理生成<code>test.i</code>文件，预处理用于将所有的#include头文件以及宏定义替换成其真正的内容。</p><p>预处理的命令为：</p><pre class=" language-c"><code class="language-c">gcc <span class="token operator">-</span>E test<span class="token punctuation">.</span>c <span class="token operator">-</span>o test<span class="token punctuation">.</span>i</code></pre><p>上述命令中<code>-E</code>是让编译器在预处理之后就退出，不进行后续编译过程；<code>-o</code>是指定输出文件名。</p><p>预处理之后得到的仍然是文本文件。test.i文件部分内容截图如下：</p><p><a href="https://imgchr.com/i/V5fRKK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5fRKK.md.png" alt="V5fRKK.md.png"></a></p><h3 id="3、编译（Compilation）"><a href="#3、编译（Compilation）" class="headerlink" title="3、编译（Compilation）"></a>3、编译（Compilation）</h3><p>使用编译器将预处理文件<code>test.i</code>编译成汇编文件<code>test.s</code>。</p><p>编译的命令为：</p><pre class=" language-c"><code class="language-c">gcc <span class="token operator">-</span>S test<span class="token punctuation">.</span>i <span class="token operator">-</span>o test<span class="token punctuation">.</span>s</code></pre><p>上述命令中-S让编译器在编译之后停止，不进行后续过程；-o是指定输出文件名。汇编文件test.s是文本文件，部分内容截图如下：</p><p><a href="https://imgchr.com/i/V5fLKf" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5fLKf.md.png" alt="V5fLKf.md.png"></a></p><h3 id="4、汇编（Assemble）"><a href="#4、汇编（Assemble）" class="headerlink" title="4、汇编（Assemble）"></a>4、汇编（Assemble）</h3><p>使用汇编器将汇编文件<code>test.s</code>转换成目标文件<code>test.o</code>。</p><p>汇编过程的命令为：</p><pre class=" language-c"><code class="language-c">gcc <span class="token operator">-</span>c test<span class="token punctuation">.</span>s <span class="token operator">-</span>o test<span class="token punctuation">.</span>o</code></pre><p>上述命令中<code>-c</code>、<code>-o</code>让汇编器把汇编文件<code>test.s</code>转换成目标文件<code>test.o</code>。目标文件<code>test.o</code>是二进制文件，部分内容截图如下：</p><p><a href="https://imgchr.com/i/V5fxaQ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5fxaQ.md.png" alt="V5fxaQ.md.png"></a></p><h3 id="5、链接（Linking）"><a href="#5、链接（Linking）" class="headerlink" title="5、链接（Linking）"></a>5、链接（Linking）</h3><p>链接过程使用链接器将该目标文件与其他目标文件、库文件、启动文件等链接起来生成可执行文件。</p><p>链接过程的命令为：</p><pre class=" language-c"><code class="language-c">gcc test<span class="token punctuation">.</span>o <span class="token operator">-</span>o test<span class="token punctuation">.</span>exe</code></pre><p>综上，生成可执行程序过程为：预处理、编译、汇编、链接。各个命令如下图所示：</p><p><a href="https://imgchr.com/i/V5hpPs" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5hpPs.md.png" alt="V5hpPs.md.png"></a></p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】复合赋值语句</title>
      <link href="/2018/10/14/c-yu-yan-bi-ji-fu-he-fu-zhi-yu-ju/"/>
      <url>/2018/10/14/c-yu-yan-bi-ji-fu-he-fu-zhi-yu-ju/</url>
      
        <content type="html"><![CDATA[<p>增加一个变量的值有两种方式，如：<code>a = a + 5</code>和<code>a += 5</code>。存在两种增加一个变量值的方法有何意义呢？K&amp;R C设计者认为复合赋值符可以让程序员把代码写得更清楚些。另外，编译器可以产生更为紧凑的代码。</p><p>现在，a = a + 5和a += 5之间的差别不再那么显著，而且现代的编译器为这两种表达式产生优化代码并无多大问题。但是，要考虑如下两条语句：</p><p><a href="https://imgchr.com/i/V4q9hD" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V4q9hD.md.png" alt="V4q9hD.md.png"></a></p><p>此处a为数组。在第一种形式种，由于编译器无从知道f函数是否具有副作用，所以它必须两次计算数组a的下标表达式的值。而在第二种形式中，下标表达式只需计算一次，所以第二种形式效率更高。并且，从书写的角度看，第一种形式的下标表达式需要书写两次，而第二种形式只需书写一次。</p><p>基于这些理由，我们应该使用复合赋值语句。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】extern关键字</title>
      <link href="/2018/10/13/c-yu-yan-bi-ji-extern-guan-jian-zi/"/>
      <url>/2018/10/13/c-yu-yan-bi-ji-extern-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<p>extern关键字可以用来声明变量和函数作为外部变量或者函数供其它文件使用。</p><h3 id="extern声明变量"><a href="#extern声明变量" class="headerlink" title="extern声明变量"></a>extern声明变量</h3><h3 id="示例程序："><a href="#示例程序：" class="headerlink" title="示例程序："></a>示例程序：</h3><p>test.h如下：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//声明</span><span class="token keyword">extern</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span></code></pre><p>test.c如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"test.h"</span></span><span class="token comment" spellcheck="true">//定义</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1314</span><span class="token punctuation">;</span></code></pre><p>主函数所在的源文件为main.c，其代码如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"test.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d , b = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中，a，b的声明也可放在main.c中，代码如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">extern</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d , b = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>此时，就不需要包含test.h这个头文件了。</p><h3 id="extern声明函数"><a href="#extern声明函数" class="headerlink" title="extern声明函数"></a>extern声明函数</h3><h3 id="示例程序：-1"><a href="#示例程序：-1" class="headerlink" title="示例程序："></a>示例程序：</h3><p>test.h如下：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//声明变量</span><span class="token keyword">extern</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//函数声明</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//extern关键字可要可不要</span></code></pre><p>test.c如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"test.h"</span></span><span class="token comment" spellcheck="true">//定义</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1314</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>main.c如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"test.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d , b = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"add(a, b) = %d\n"</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>同上，函数的声明也可以放在其被调用的源文件中，即：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment" spellcheck="true">//声明变量</span><span class="token keyword">extern</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//函数声明</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//extern关键字可要可不要</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d , b = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"add(a, b) = %d\n"</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序运行结果为：</p><p><a href="https://imgchr.com/i/V4OOXj" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V4OOXj.md.png" alt="V4OOXj.md.png"></a></p><h3 id="extern-“C”"><a href="#extern-“C”" class="headerlink" title="extern “C”"></a>extern “C”</h3><p>extern “C”的主要作用就是为了能够正确实现C++代码调用其他C语言代码。加上extern “C”后，会指示编译器这部分代码按C语言的进行编译，而不是C++的。</p><p>因为在C++出现以前，很多代码都是C语言写的，而且很底层的库也是C语言写的，为了更好的支持原来的C代码和已经写好的C语言库，需要在C++中尽可能的支持C，而extern “C”就是其中的一个策略。</p><p>示例代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __TEST_H   </span><span class="token comment" spellcheck="true">/*防止该头文件被重复引用*/</span><span class="token macro property">#<span class="token directive keyword">define</span> __TEST_H</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __cplusplus             </span><span class="token keyword">extern</span> <span class="token string">"C"</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token comment" spellcheck="true">/*…*/</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __cplusplus</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">/*end of __TEST_H*/</span></code></pre><p><code>__cplusplus</code>为C++定义的一个宏，此时<code>extern “C”</code>后的部分的代码按C语言的格式进行编译，而不是C++。</p><p>以上是extern关键字的三种用法，如有错误，欢迎指出！</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】内存笔记</title>
      <link href="/2018/10/12/c-yu-yan-bi-ji-nei-cun-bi-ji/"/>
      <url>/2018/10/12/c-yu-yan-bi-ji-nei-cun-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>C语言程序需要载入内存才可以运行，其不同的数据保存在不同的区域。所使用的内存可以分成两类：一类是<code>静态存储区</code>，另一类是<code>动态存储区</code>。</p><p>C语言程序的存储区如下图所示：</p><p><a href="https://imgchr.com/i/V4RTHJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V4RTHJ.md.png" alt="V4RTHJ.md.png"></a></p><h3 id="1、静态存储区"><a href="#1、静态存储区" class="headerlink" title="1、静态存储区"></a>1、静态存储区</h3><p>静态存储区分为三类：<code>只读数据区（RO Data）、已初始化读写数据区（RW Data）、未初始化读写读写数据区（BSS）</code>。这三类存储区都是在程序的<code>编译-连接阶段</code>确定的，且运行过程中是不会变化的，只有当程序退出的时候，静态存储区的内存才会被系统回收。</p><h3 id="2、动态存储区"><a href="#2、动态存储区" class="headerlink" title="2、动态存储区"></a>2、动态存储区</h3><p>动态存储区主要分为两类：一类是<code>栈（Stack）内存</code>区域，栈内存是由编译器管理的；另一类是<code>堆（Heap）内存</code>区域，堆内存由程序调用具体的库函数来分配的。它们都是程序运行过程中动态分配的。</p><h3 id="2-1栈内存区域"><a href="#2-1栈内存区域" class="headerlink" title="2.1栈内存区域"></a>2.1栈内存区域</h3><h3 id="2-1-1栈的相关概念"><a href="#2-1-1栈的相关概念" class="headerlink" title="2.1.1栈的相关概念"></a>2.1.1栈的相关概念</h3><p>栈内存的使用很大的程度上依赖于处理器的硬件机制。在处理器中，有一个寄存器来表示当前栈指针的位置。通常在内存中分配一块区域，这块区域的上界（高内存地址）和下界（低内存地址）之间是可用的栈内存区域。栈内存如下图所示：</p><p> <a href="https://imgchr.com/i/V4HeKI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V4HeKI.md.png" alt="V4HeKI.md.png"></a></p><p>目前常见的体系结构和编译系统中，<code>栈大多都是向下增长的</code>。在初始阶段，栈指针是指向栈区间的上界，随着栈使用量的增加，栈指针的值向低地址移动，即栈指针的值将变小。下面来看一段程序：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d, &amp;a = %#x \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b = %d, &amp;b = %#x \n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c = %d, &amp;c = %#x \n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序运行结果为：</p><p><a href="https://imgchr.com/i/V4HwIU" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V4HwIU.md.png" alt="V4HwIU.md.png"></a></p><p>可见，变量的存储是从高地址往低地址的方向存储。</p><p>栈有一个重要的特性：先放入的数据最后才能取出，后放入的数据优先能取出，即<code>先进后出（First In Last Out）原则</code>。放入数据常被称为<code>入栈或压栈（Push）</code>，取出数据被称为<code>出栈或弹出（Pop）</code>。在运用过程中，栈内存可能出现满栈和空栈两种情况，这是由处理器的体系结构决定的。</p><p>栈（Stack）可以存放函数参数、局部变量、局部数组等作用范围在函数内部的数据，它的用途就是完成函数的调用。</p><h3 id="2-1-1需要知道的关于栈的问题："><a href="#2-1-1需要知道的关于栈的问题：" class="headerlink" title="2.1.1需要知道的关于栈的问题："></a>2.1.1需要知道的关于栈的问题：</h3><p>（1）函数在调用完成之后，栈指针将回到函数进入之前的位置。下面的程序通过两次调用同一个函数印证了这一点：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">stack_test1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> b1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> c1 <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第一次调用stack_test1函数：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">stack_test1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第二次调用stack_test1函数：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">stack_test1</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> b1<span class="token punctuation">,</span> c1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">stack_test1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d, &amp;a = %#x \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b = %d, &amp;b = %#x \n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c = %d, &amp;c = %#x \n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序运行结果：</p><p><a href="https://imgchr.com/i/V4Hsz9" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V4Hsz9.md.png" alt="V4Hsz9.md.png"></a></p><p>可见，两次调用中函数参数使用的栈内存是相同的，即第一次调用函数完成之后，栈指针将回到函数进入之前的位置。</p><p>（2）在函数调用的过程中，每增加一个层次，栈空间就会被压入更多的内容，下面的程序验证了这一点：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">stack_test1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">stack_test2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"直接调用stack_test1函数：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">stack_test1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"通过stack_test2函数间接调用stack_test1函数：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">stack_test2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">stack_test1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d, &amp;a = %#x \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b = %d, &amp;b = %#x \n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c = %d, &amp;c = %#x \n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">stack_test2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">stack_test1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序运行结果：</p><p><a href="https://imgchr.com/i/V4HLeP" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V4HLeP.md.png" alt="V4HLeP.md.png"></a></p><p>可见，在程序中两次调用stack_test1函数，第一次是直接调用，第二次是通过stack_test2函数间接调用。从运行结果来看，通过stack_test2函数间接调用stack_test1函数的栈指针的值变小了，说明是由于栈中压入了更多的内容。</p><p>（3）函数调用结束后，函数栈上的内容不能被其他函数使用。例如，下面是一种错误的用法：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">stack_test3</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* ...... */</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>return(&amp;a)</code>将自动变量a的值返回，这种写法不会发生编译错误（有可能出现警告），但是其逻辑是不正确的。此时，调用者可以得到stack_test3运行时a的地址，但是由于变量a是建立在栈上，函数退出后，栈区域已经释放，这个地址已经指向无效的内存，因此不应该再被程序使用。</p><h3 id="2-2堆内存区域"><a href="#2-2堆内存区域" class="headerlink" title="2.2堆内存区域"></a>2.2堆内存区域</h3><h3 id="2-2-1堆的相关概念"><a href="#2-2-1堆的相关概念" class="headerlink" title="2.2.1堆的相关概念"></a>2.2.1堆的相关概念</h3><p>在一般的编译系统中，堆内存的分配方向和栈内存是相反的。栈内存利用的是处理器的硬件机制，而堆内存的处理使用的是库函数。堆内存的分配形式如下图：</p><p><a href="https://imgchr.com/i/V4b9Qs" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V4b9Qs.md.png" alt="V4b9Qs.md.png"></a></p><p>可见，堆内存与栈内存的区别：栈内存只有一个入口点，就是栈指针，栈内存压栈和出栈都只能通过栈指针及其偏移量；而堆内存有多个入口点，每次分配得到的指针就是访问内存的入口，每个分配内存区域都可以被单独释放。</p><p>当频繁的分配和释放内存的过程中，将会出现如下情况：在两块已经分配的内存之间可能出现较小的未分配的内存区域，这些内存理论上可以被使用。但是由于它们的空间较小，不够连续内存的分配，因此当分配内存的时候，它们经常不能被使用。这种较小的内存就是内存碎片。</p><h3 id="2-2-2关于堆空间的使用及其一些问题："><a href="#2-2-2关于堆空间的使用及其一些问题：" class="headerlink" title="2.2.2关于堆空间的使用及其一些问题："></a>2.2.2关于堆空间的使用及其一些问题：</h3><p>（1）库文件：stdlib.h</p><p>实现堆内存分配和释放的4个主要函数为：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 分配内存空间 */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">malloc</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 释放内存空间 */</span><span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 分配内存空间 */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">calloc</span><span class="token punctuation">(</span>size_t num<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 重新分配内存空间 */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">realloc</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>（2）malloc和free的简单应用</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//malloc和free的简单应用</span><span class="token keyword">void</span> <span class="token function">heap_test1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> <span class="token operator">*</span>pa<span class="token punctuation">;</span> pa <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token constant">NULL</span> <span class="token operator">!=</span> pa <span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token operator">*</span>pa <span class="token operator">=</span> <span class="token number">0x1234</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pa = %#x, *pa = %x\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>pa<span class="token punctuation">,</span> <span class="token operator">*</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">free</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在malloc分配完内存之后，可以用得到的指针值是否为NULL来判断内存是否分配成功。按照C语言内存分配规则，如果内存分配成功，返回的是内存的地址；如果内存分配不成功，将返回NULL（0x0），表示一个无效的地址。</p><p>（3）malloc在分配内存的时候，是从低地址至高地址方向。但是，先分配的内存地址不一定比后分配的内存地址小。下面的程序验证了这一点：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//后分配内存地址反而更小</span><span class="token keyword">void</span> <span class="token function">heap_test2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">void</span> <span class="token operator">*</span>pa<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token operator">*</span>pb<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token operator">*</span>pc<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token operator">*</span>pd<span class="token punctuation">;</span> pa <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pa = %#x \n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span> pb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pb = %#x \n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>pb<span class="token punctuation">)</span><span class="token punctuation">;</span> pc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pc = %#x \n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">free</span><span class="token punctuation">(</span>pb<span class="token punctuation">)</span><span class="token punctuation">;</span> pd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pd = %#x \n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>pd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">free</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">free</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">free</span><span class="token punctuation">(</span>pd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序运行结果：</p><p><a href="https://imgchr.com/i/V4beW4" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V4beW4.md.png" alt="V4beW4.md.png"></a></p><p>可见，在该程序中，首先3次分配1024字节的堆上内存，然后再将第二次分配的内存释放，再次分配内存时，将利用了这一块空间。</p><p>（4）calloc()和malloc()很类似，主要区别是calloc()可以将分配好的内存区域的初始值全部设置为0，以下程序验证了这一点：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//calloc和malloc的主要区别</span><span class="token keyword">void</span> <span class="token function">heap_test3</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>pa<span class="token punctuation">;</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> pa <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token constant">NULL</span> <span class="token operator">!=</span> pa <span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt; colloc pa = %#x >>\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pa[%d] = %d \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> pa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">free</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序运行结果：</p><p><a href="https://imgchr.com/i/V4bJYD" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V4bJYD.md.png" alt="V4bJYD.md.png"></a></p><p>除此之外，calloc()和malloc()另外一个不同之处在于参数的个数，malloc只有一个参数，即要分配的内存字节数；calloc有两个参数，第一个是分配单元的大小，第二个是要分配的数目。从本质上，calloc使用两个参数和malloc使用一个并没有区别。</p><p>（5）realloc的应用。realloc函数具有两个参数，一个是指向内存的地址指针，另一个是重新分配内存的大小，而返回值是指向所分配内存的指针。基本应用代码如下：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//realloc的应用</span><span class="token keyword">void</span> <span class="token function">heap_test4</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> <span class="token operator">*</span>pa<span class="token punctuation">;</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> pa <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token constant">NULL</span> <span class="token operator">!=</span> pa <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token operator">*</span><span class="token punctuation">(</span>pa <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pa[%d] = %d \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> pa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"relloc重新分配内存\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pa <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>pa<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token constant">NULL</span> <span class="token operator">!=</span> pa <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pa[%d] = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> pa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">free</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序运行结果：</p><p> <a href="https://imgchr.com/i/V4bB0P" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V4bB0P.md.png" alt="V4bB0P.md.png"></a></p><p>除此之外，realloc还具有两种功能：一是当指针为NULL的时候，作为malloc使用，分配内存；二是当重新分配内存大小为0的时候，作为free使用，释放内存。</p><p>（6）再堆内存的管理上，容易出现以下几个问题：</p><p>开辟的内存没有释放，造成内存泄漏</p><ul><li><p>内存泄漏的例子：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//内存泄漏例子</span><span class="token keyword">void</span> <span class="token function">heap_test6</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> <span class="token operator">*</span>pa<span class="token punctuation">;</span>pa <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* ...... */</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><p>在函数heap_test6中，使用malloc开辟了20个字节的内存区域，但是使用结束后该函数没有释放这块区域，也没有通过任何返回值或者参数的手段将这块内存区域的地址告诉其它函数。此时，这20个字节的内存不会被任何程序释放，因此再调用该函数的时候，就会导致内存泄漏。</p><ul><li>野指针被使用或者释放</li></ul><p>野指针是一个已经被释放的内存指针，它指向的位置已经被free或者realloc释放了，此时再使用该指针，就会导致程序的错误。野指针例子：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//野指针例子</span><span class="token keyword">void</span> <span class="token function">heap_test6</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">char</span> <span class="token operator">*</span>pa<span class="token punctuation">;</span> pa <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* ...... */</span> <span class="token function">free</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* ...... */</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pa = %s \n"</span><span class="token punctuation">,</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//野指针被使用</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在此程序中，调用free函数已经释放了pa指针，但后面还在继续使用pa，这就是一个错误的程序。</p><ul><li>非法释放指针</li></ul><p>1）非法释放静态存储区的内存，示例如下：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//非法释放静态存储区的内存</span><span class="token keyword">void</span> <span class="token function">heap_test7</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ...... */</span> <span class="token comment" spellcheck="true">/* 错误释放只读数据区指针 */</span> <span class="token function">free</span><span class="token punctuation">(</span>ro_data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 错误释放已初始化读写数据区指针 */</span> <span class="token function">free</span><span class="token punctuation">(</span>rw_data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 错误释放未初始化读写数据区指针 */</span> <span class="token function">free</span><span class="token punctuation">(</span>bss_data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 错误释放代码区指针 */</span> <span class="token function">free</span><span class="token punctuation">(</span>heap_test7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* ...... */</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2）非法释放栈上的内存，示例如下：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//非法释放栈上的内存</span><span class="token keyword">void</span> <span class="token function">heap_test8</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 错误释放栈上内存 */</span> <span class="token comment" spellcheck="true">/* ...... */</span> <span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* ...... */</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3）非法释放堆上内存，示例如下：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//非法释放堆上的内存---1</span><span class="token keyword">void</span> <span class="token function">heap_test9</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">char</span> <span class="token operator">*</span>pa<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* ...... */</span> pa <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">free</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">free</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//错误释放堆内存</span> <span class="token comment" spellcheck="true">/* ...... */</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>第一次释放之后，该地址已经变成了未被分配的堆上的内存了，free函数不能释放未分配的堆内存。</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//非法释放堆上的内存---2</span><span class="token keyword">void</span> <span class="token function">heap_test10</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">char</span> <span class="token operator">*</span>pa<span class="token punctuation">;</span> <span class="token keyword">char</span> <span class="token operator">*</span>pb<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* ...... */</span> pa <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pb <span class="token operator">=</span> pa<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token function">free</span><span class="token punctuation">(</span>pb<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//错误释放堆内存</span> <span class="token comment" spellcheck="true">/* ...... */</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>释放内存pb是非法的内存释放，由于这个指针并不是从malloc分配出来的，而是一个中间的指针值。</p><p>以上是对于C语言内存的一些笔记。如有错误，欢迎指出！</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】getchar()、getche()、getch()的区别</title>
      <link href="/2018/10/11/c-yu-yan-bi-ji-getchar-getche-getch-de-qu-bie/"/>
      <url>/2018/10/11/c-yu-yan-bi-ji-getchar-getche-getch-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h3 id="1、getchar-函数"><a href="#1、getchar-函数" class="headerlink" title="1、getchar()函数"></a>1、getchar()函数</h3><p>所在头文件：<code>stdio.h</code></p><p>函数原型：<code>int getchar(void);</code></p><p>函数功能：读取控制台输入的字符，并保存在键盘缓冲区中。直到用户按回车为止(回车字符也放在缓冲区中)。</p><p>看一段代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当输入一个字符并按回车时，该字符被存入缓冲区中，printf函数再把缓冲区中的该字符输出。如输入输出实例：</p><pre class=" language-c"><code class="language-c">dd</code></pre><h3 id="2、getche-函数"><a href="#2、getche-函数" class="headerlink" title="2、getche()函数"></a>2、getche()函数</h3><p>所在头文件：<code>conio.h</code></p><p>函数原型：<code>int getche(void);</code></p><p>函数用途：输入后立即从控制台取字符，不以回车为结束，且立刻显示在屏幕上（带回显）。</p><p>看一段代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;conio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> <span class="token function">getche</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>该函数的输入输出示例：</p><pre class=" language-c"><code class="language-c">dd</code></pre><p>也就是说，输入d，直接就输出d，不需要按回车键，即该函数不带缓冲区，且输入有回显。回显的意思就是在控制台显示输入的字符。</p><h3 id="3、getch-函数"><a href="#3、getch-函数" class="headerlink" title="3、getch()函数"></a>3、getch()函数</h3><p>所在头文件：<code>conio.h</code></p><p>函数原型：<code>int getch(void);</code></p><p>函数用途：从控制台读取一个字符，但不显示在屏幕上（不带回显）。</p><p>看一段代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;conio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> <span class="token function">getch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输入输出实例：</p><pre class=" language-c"><code class="language-c">d</code></pre><p>输入d，不会显示d，当调用printf函数后才输出d。控制台读取一个字符，但不显示在屏幕上（不带回显）。</p><p>此外，还需要注意的一个问题是：<code>conio.h</code>这个头文件是 windows 平台下特有的，其他平台如 Linux、Mac OS 等平台是没有的，所以使用<code>getch()</code>函数与<code>getche()</code>函数应该注意平台的问题。</p><p>以上就是关于getchar()、getche()、getch()的总结，如有错误欢迎指出！</p><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】#define与typedef的区别？</title>
      <link href="/2018/10/11/c-yu-yan-bi-ji-define-yu-typedef-de-qu-bie/"/>
      <url>/2018/10/11/c-yu-yan-bi-ji-define-yu-typedef-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h3 id="define"><a href="#define" class="headerlink" title="#define"></a>#define</h3><p>define是预处理指令，在编译时不进行任何检查，只进行简单的替换</p><p>宏定义的一般形式为：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> 宏名 字符串</span></code></pre><p>这里所说的字符串是一般意义上的字符序列，不要和C语言中的字符串等同，它不需要双引号。</p><h3 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h3><p>typedef是在C语言中用来为复杂的声明定义简单的别名，它本身是一种存储类的关键字，与auto、extern、mutable、static、register等关键字不能出现在同一个表达式中。</p><p>typedef取别名的一般形式为：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span>  旧名字  新名字</code></pre><h3 id="define与typedef的区别"><a href="#define与typedef的区别" class="headerlink" title="define与typedef的区别"></a>define与typedef的区别</h3><p>（1）#define之后不带分号，typedef之后带分号。</p><p>（2）#define可以使用其他类型说明符对宏类型名进行扩展，而 typedef 不能这样做。如：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> INT1 int</span><span class="token keyword">unsigned</span> INT1 n<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//没问题</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> INT2<span class="token punctuation">;</span><span class="token keyword">unsigned</span> INT2 n<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//有问题</span></code></pre><p>INT1可以使用类型说明符unsigned进行扩展，而INT2不能使用unsigned进行扩展。</p><p>（3）在连续定义几个变量的时候，typedef 能够保证定义的所有变量均为同一类型，而 #define 则无法保证。如：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> PINT1 int*;</span>P_INT1 p1<span class="token punctuation">,</span>p2<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//即int *p1,p2;</span>typedet <span class="token keyword">int</span><span class="token operator">*</span> PINT2<span class="token punctuation">;</span>P_INT2 p1<span class="token punctuation">,</span>p2<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//p1、p2 类型相同</span></code></pre><p>PINT1定义的p1与p2类型不同，即p1为指向整形的指针变量，p2为整形变量；PINT2定义的p1与p2类型相同，即都是指向 int 类型的指针。</p><p>下面看一个关于typedef的重要的问题！！请看代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">char</span> <span class="token operator">*</span>pStr<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> string<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//第一行代码</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p1<span class="token operator">=</span>string<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//第二行代码</span>    <span class="token keyword">const</span> pStr p2 <span class="token operator">=</span> string<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第三行代码</span>    p1<span class="token operator">++</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//第四行代码</span>    p2<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//第五行代码 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这段代码编译会报一个错误：<code>error: increment of read-only variable &#39;p2&#39;</code>，你知道问题出在哪吗？</p><p>答案与解析：</p><p>是第五行代码p2++出错了。这个问题提醒我们：typedef和#define不同，它不是简单的文本替换。上述代码中const pStr p2并不等于const char * p2。const pStr p2和pStr const p2本质上没有区别，都是对变量进行只读限制，只不过此处变量p2的数据类型是我们自己定义的而不是系统固有类型而已。</p><p>因此，const pStr p2的含义是：限定数据类型为char <em>的变量p2为只读，即为char</em> const p2，表明p2是一个指向char类型的常指针，所以p2是不可修改的，因此p2++错误。</p><p>顺便提一下关于const声明的一些例子及其含义：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//①</span><span class="token keyword">int</span> <span class="token keyword">const</span> b<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//②</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>c<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//③ </span><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> d<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//④  </span><span class="token keyword">int</span> <span class="token keyword">const</span> <span class="token operator">*</span> e <span class="token keyword">const</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//⑤ </span></code></pre><p>①a是常数，不可改变； </p><p>②b是常数，不可改变；</p><p>③c是一个指向整型常数的指针，指针可以变，指针指向的内容不可以变；</p><p>④d是一个指向整型变量的常指针，指针不可以变，指针指向的内容可以变；</p><p>⑤e是一个指向整型常数的常指针，指针与指针指向的内容都不可变。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】函数参数压栈的顺序？</title>
      <link href="/2018/10/07/c-yu-yan-bi-ji-han-shu-can-shu-ya-zhan-de-shun-xu/"/>
      <url>/2018/10/07/c-yu-yan-bi-ji-han-shu-can-shu-ya-zhan-de-shun-xu/</url>
      
        <content type="html"><![CDATA[<p>按照日常习惯来看，C语言的函数参数压栈顺序是从左到右吧？但是事实却是相反的，C语言函数参数压栈顺序是从右到左的。下面看一个程序：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">stack_test1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token function">stack_test1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">stack_test1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d, &amp;a = %#x \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b = %d, &amp;b = %#x \n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c = %d, &amp;c = %#x \n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>该程序输出结果为：</p><pre class=" language-c"><code class="language-c">a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a <span class="token operator">=</span> <span class="token number">0x61fef0</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b <span class="token operator">=</span> <span class="token number">0x61fef4</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c <span class="token operator">=</span> <span class="token number">0x61fef8</span></code></pre><p>我们知道，栈是向下生长的，即从高地址向低地址的方向分配内存。由程序输出结果可知，变量c的值首先存储在高地址，其次是b，最后低地址保存a。即函数的参数压栈的顺序是从右到左。</p><p>为什么是从右到左呢？下面使用printf函数来分析：</p><pre class=" language-c"><code class="language-c">printf函数的原型是：<span class="token keyword">int</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们都知道，printf是个变参函数。那么，其参数的个数是如何确定的呢，靠的就是format，如果format首先被压入栈中，就无法知道还有多少个参数还没入栈了；所以，format应该最后入栈，才能确定参数的个数，也即符合参数入栈顺序为“从右到左”的规则。</p><p>以上就是关于函数参数压栈顺序的总结，如有错误欢迎指出！</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】使用notepad++、MinGW来开发C程序</title>
      <link href="/2018/10/05/c-yu-yan-bi-ji-shi-yong-notepad-mingw-lai-kai-fa-c-cheng-xu/"/>
      <url>/2018/10/05/c-yu-yan-bi-ji-shi-yong-notepad-mingw-lai-kai-fa-c-cheng-xu/</url>
      
        <content type="html"><![CDATA[<p>Windows平台下C程序的集成开发工具有很多：</p><h3 id="1、Visual-C-6-0"><a href="#1、Visual-C-6-0" class="headerlink" title="1、Visual C++6.0"></a>1、Visual C++6.0</h3><p><code>Visual C++</code>是Microsoft公司推出的用于开发C/C++程序的一款经典的IDE，很多高校都使用其作为教学工具来讲解C和C++。但是，Visual C++ 6.0在win7、win8、win10下总是存在各种兼容性问题，安装麻烦。</p><h3 id="2、Visual-Studio"><a href="#2、Visual-Studio" class="headerlink" title="2、Visual Studio"></a>2、Visual Studio</h3><p><code>Visual Studio（VS）</code>是美国微软公司的开发工具包系列产品。VS是一个完整的开发工具集，它包括了整个软件生命周期中所需要的大部分工具，如UML工具、代码管控工具、集成开发环境(IDE)等等。VS是目前最流行的Windows平台应用程序的集成开发环境。但是，VS安装包比较庞大，下载不方便，安装时间较长，而且会安装很多暂时用不到的工具。</p><h3 id="3、其他"><a href="#3、其他" class="headerlink" title="3、其他"></a>3、其他</h3><p><code>Dev C++</code>是一款免费开源的C/C++ IDE，内嵌 GCC 编译器。Dev C++的优点是体积小（只有几十兆）、安装卸载方便、学习成本低，缺点是调试功能弱。</p><p><code>C-Free</code>是一款C/C++集成开发环境（IDE）。目前有两个版本，收费的C-Free 5.0专业版和免费的C-Free 4.0 标准版。C-Free中集成了C/C++代码解析器，能够实时解析代码，并且在编写的过程中给出智能的提示。C-Free提供了对目前业界主流C/C++编译器的支持，你可以在C-Free中轻松切换编译器。</p><h3 id="4、本文推荐的：Notepad-MinGW"><a href="#4、本文推荐的：Notepad-MinGW" class="headerlink" title="4、本文推荐的：Notepad++ + MinGW"></a>4、本文推荐的：Notepad++ + MinGW</h3><p>上面介绍的开发环境都是集成的开发环境（编辑器与编译器集成在一个软件中），这里介绍另一种开发环境：<code>notepad++（编辑器） +  MinGW（里面包含编译器）</code>，两者通过 DOS 黑窗口关联。刚开始上手使用这种开发环境可能会有些不适应，但是会让你对C语言程序的编译-连接过程等有更好的理解，包括该开发工具包里有哪些目录，有哪些工具及该工具的环境变量怎么配置等。该开发环境如下图：</p><h3 id="（1）Notepad"><a href="#（1）Notepad" class="headerlink" title="（1）Notepad++"></a>（1）Notepad++</h3><p><code>Notepad++</code>是 Windows 操作系统下的一套文本编辑器，其功比 Windows 中的 Notepad（记事本）强大，除了可以用来制作一般的纯文字说明文件，也十分适合编写计算机程序代码。Notepad++不仅有语法高亮度显示，也有语法折叠功能，并且支持宏以及扩充基本功能的外挂模组。</p><h3 id="（2）MinGW"><a href="#（2）MinGW" class="headerlink" title="（2）MinGW"></a>（2）MinGW</h3><p><code>MinGW</code>，是 Minimalist GNUfor Windows 的缩写。它是一个可自由使用和自由发布的Windows特定头文件和使用GNU工具集导入库的集合。 MinGW 提供了一套完整的开源编译工具集（如gcc等工具），以适合 windows 平台应用开发，且不依赖任何第三方C运行时库。<br>下载方式：</p><blockquote><p>（1）官网下载：<a href="http://www.mingw.org/" target="_blank" rel="noopener">http://www.mingw.org/</a></p></blockquote><blockquote><p>（2）百度云盘：链接：<a href="https://pan.baidu.com/s/1o4Etp0rrW7IxUOwEg9yxyQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1o4Etp0rrW7IxUOwEg9yxyQ</a><br>提取码：lm5j </p></blockquote><h3 id="5、MinGW环境变量配置"><a href="#5、MinGW环境变量配置" class="headerlink" title="5、MinGW环境变量配置"></a>5、MinGW环境变量配置</h3><p>（1）解压MinGW到指定路径中（要记住这个路径，后面需要用的到），如我解压到路径<code>D:\Program Files\</code>中：</p><p><a href="https://imgchr.com/i/V6xshj" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/V6xshj.md.png" alt="V6xshj.md.png"></a></p><p>（2）右击<code>我的电脑</code>，点击<code>属性</code>：</p><p><a href="https://imgchr.com/i/V6xc3n" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/V6xc3n.md.png" alt="V6xc3n.md.png"></a></p><p>（3）点击<code>高级系统设置</code>：</p><p><a href="https://imgchr.com/i/V6xWuV" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/V6xWuV.md.png" alt="V6xWuV.md.png"></a></p><p>（4）在系统变量中找到<code>Path</code>，然后点击<code>编辑</code>按钮：</p><p><a href="https://imgchr.com/i/V6xIN4" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/V6xIN4.md.png" alt="V6xIN4.md.png"></a></p><p>（5）点击<code>新建</code>按钮新建一个<code>D:\Program Files\MinGW\bin</code>变量（bin所在的路径就是刚才解压的路径），然后点击<code>确定</code>：</p><p><a href="https://imgchr.com/i/V6x7C9" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/V6x7C9.md.png" alt="V6x7C9.md.png"></a></p><p>（6）在系统变量中新建一个系统变量，变量名为<code>lib</code>，变量值为 MinGW 中 lib 文件夹的路径，然后点击<code>确定</code>按钮，如图：</p><p><a href="https://imgchr.com/i/V6xH3R" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/V6xH3R.md.png" alt="V6xH3R.md.png"></a></p><p>（7）同步骤（6）新建一个系统变量<code>include</code>，如图：</p><p><a href="https://imgchr.com/i/V6xqjx" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/V6xqjx.md.png" alt="V6xqjx.md.png"></a></p><p>（8）点击<code>确定</code>：</p><p><a href="https://imgchr.com/i/V6xOu6" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/V6xOu6.md.png" alt="V6xOu6.md.png"></a></p><p>（9）点击<code>确定</code>：</p><p><a href="https://imgchr.com/i/V6xxED" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/V6xxED.md.png" alt="V6xxED.md.png"></a></p><p>（10）点击组合键<code>win + r</code>打开运行窗口，输入<code>cmd</code>进入 DOS 窗口：</p><p><a href="https://imgchr.com/i/V6zS4H" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/V6zS4H.md.png" alt="V6zS4H.md.png"></a></p><p>（11）在 DOS 窗口下输入命令：<code>gcc -v</code>，若输出如下所示信息则表明gcc环境变量配置成功，否则配置失败：</p><p><a href="https://imgchr.com/i/V6zC8A" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/V6zC8A.md.png" alt="V6zC8A.md.png"></a></p><h3 id="6、如何使用Notepad-、gcc进行开发？"><a href="#6、如何使用Notepad-、gcc进行开发？" class="headerlink" title="6、如何使用Notepad++、gcc进行开发？"></a>6、如何使用Notepad++、gcc进行开发？</h3><p>首先，使用 notepad++ 编写好代码，这里我们写一个 hello.c 文件，然后在 cmd 窗口中运用命令切换当前路径为 hello.c 所在的路径。然后调用编译命令：<code>gcc hello.c -o hello.exe</code>进行编译。其中，<code>-o</code>参数是给编译生成的可执行文件重新命名为<code>hello.exe</code>，如果不加这个参数，则编译生成的可执行文件默认为<code>a.exe</code>。</p><p>其中，如果你不会通过命令来切换路径，也可以在 notepad++ 里直接进入当前文件所在的路径，具体操作为：</p><p><a href="https://imgchr.com/i/V6zaG9" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/V6zaG9.md.png" alt="V6zaG9.md.png"></a></p><p>除此，编译多个文件.c文件和编译一个.c文件的命令差不多，编译多个文件就把要编译的文件都加到编译命令中就可以了，如：</p><pre class=" language-c"><code class="language-c">gcc cJSON<span class="token punctuation">.</span>c json_parse_now<span class="token punctuation">.</span>c <span class="token operator">-</span>o test<span class="token punctuation">.</span>exe</code></pre><p>以上就是使用notepad++、MinGW开发C程序的环境配置及使用方法，如有错误，欢迎指出。</p><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】main()函数的几种形式</title>
      <link href="/2018/10/02/c-yu-yan-bi-ji-main-han-shu-de-ji-chong-xing-shi/"/>
      <url>/2018/10/02/c-yu-yan-bi-ji-main-han-shu-de-ji-chong-xing-shi/</url>
      
        <content type="html"><![CDATA[<p>在C语言中，main函数是程序的入口。其有四种写法，即：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//写法一</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello notepad++ \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//写法二</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello notepad++ \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//写法三</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello notepad++ \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//写法四</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello notepad++ \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>前面三种不带参数的都是比较常见的写法。第四种写法带的两个参数是什么意思呢？下面简单来介绍一下。首先，主函数不能被其他函数调用，所以形参<code>argc</code>与<code>argv</code>的实际值就不能从其他函数传入，那么其实参应该从哪传入呢？是从操作系统命令行上获得的。因此这两个参数也被称为命令行参数，<code>argc</code>为命令行参数的个数，<code>argv</code>为字符串命令行参数的首地址。</p><p>下面看一个代码实例：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment" spellcheck="true">//写法四</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;&lt;&lt; argument list >>>>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"argc = %d\n"</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"argv[%d] = %s\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello notepad++ \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>键入组合键<code>【win+r】</code>打开<code>运行</code>窗口，输入<code>cmd</code>并回车进入命令行环境：</p><p>输入<code>gcc hello.c -o hello.exe</code>命令进行编译，再输入<code>hello.exe cmd1 cmd2 cmd3 cmd4 cmd5</code>（DOS提示符下命令行的一般形式为： <code>C:\&gt;可执行文件名 参数 参数……）</code>对main函数进行传参，输出结果为：</p><p><a href="https://imgchr.com/i/V5hhQ0" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5hhQ0.md.png" alt="V5hhQ0.md.png"></a></p><p>可见， argv为字符串指针数组，其各元素值为命令行中各字符串(参数均按字符串处理)的首地址，argc为指针数组的长度，即为参数的个数。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C编程练习013</title>
      <link href="/2018/07/01/c-bian-cheng-lian-xi-013/"/>
      <url>/2018/07/01/c-bian-cheng-lian-xi-013/</url>
      
        <content type="html"><![CDATA[<h3 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h3><p>分享一道CVTE（广州视源电子科技股份有限公司）的面试笔试题：</p><blockquote><p>世界上有两种人，一种懂二进制，一种不懂。那么你知道两个 int32 整数 m 和 n 的二进制表达，有多少个位(bit)不同么？ 输入示例：1999 2299 输出示例：7</p></blockquote><h3 id="2、代码"><a href="#2、代码" class="headerlink" title="2、代码"></a>2、代码</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">countBitDiff</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> count<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入两个数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    count <span class="token operator">=</span> <span class="token function">countBitDiff</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d与%d共有%dbit不同\n"</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">countBitDiff</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> m<span class="token operator">^</span>n<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//异或运算后为1的位即为m,n不相同的位</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> len<span class="token operator">--</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 从低位至高为寻找temp的位中1的个数 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> temp <span class="token operator">&amp;</span> <span class="token number">0x01</span> <span class="token punctuation">)</span>          <span class="token punctuation">{</span>         count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        temp <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//temp右移一位</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>题目要比较两个int32的整数的不同的bit有多少，首先想到C语言的按位异或运算：参与运算的两个值，如果两个相应位相同，则结果为0，否则为1。即： <code>0^0=0，1^0=1，0^1=1，1^1=0</code>。以上程序中，首先使用一个变量temp存储两个int32的整数m,n异或后的结果，再用temp的低位至高位和0x01做按位与运算，且前提条件是长度len为真。</p><h3 id="3、运行结果"><a href="#3、运行结果" class="headerlink" title="3、运行结果"></a>3、运行结果</h3><p><img src="https://s2.ax1x.com/2019/07/01/ZGkzid.png" alt="ZGkzid.png"></p><hr><p>我的微信公众号：嵌入式大杂烩</p><p><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></p>]]></content>
      
      
      <categories>
          
          <category> C编程练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C编程练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C编程练习012</title>
      <link href="/2018/06/19/c-bian-cheng-lian-xi-012/"/>
      <url>/2018/06/19/c-bian-cheng-lian-xi-012/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>小易有一个圆心在坐标原点的圆，小易知道圆的半径的平方。小易认为在圆上的点而且横纵坐标都是整数的点是优雅的，小易现在想寻找一个算法计算出优雅的点的个数，请你来帮帮他。例如：半径的平方如果为25优雅的点就有：(+/-3, +/-4), (+/-4, +/-3), (0, +/-5) (+/-5, 0)，一共12个点。</p></blockquote><h3 id="输入描述与输出描述"><a href="#输入描述与输出描述" class="headerlink" title="输入描述与输出描述"></a>输入描述与输出描述</h3><blockquote><p>输入为一个整数，即为圆半径的平方,范围在32位int范围内。 输出为一个整数，即为优雅的点的个数</p></blockquote><h3 id="示例输入与输出"><a href="#示例输入与输出" class="headerlink" title="示例输入与输出"></a>示例输入与输出</h3><blockquote><p>输入25 输出12</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> R<span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入圆半径的平方数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sqrt</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 强制转化为整形</span>    <span class="token comment" spellcheck="true">/* 判断一个双精度浮点型数据的整数部分是否与其小数部分相等 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 标记横、纵坐标有0的情况</span>        r <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> x<span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//坐标没有0的情况：(+/-3, +/-4), (+/-4, +/-3)</span>    <span class="token punctuation">{</span>        <span class="token keyword">double</span> y <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span> R <span class="token operator">-</span> x<span class="token operator">*</span>x <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>y<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> y1 <span class="token operator">==</span> y <span class="token punctuation">)</span>            <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    count <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">==</span> flag <span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//坐标有0的情况：(0, +/-5) (+/-5, 0)</span>    <span class="token punctuation">{</span>        count <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"半径的平方为%d的圆的优雅点的个数为：%d\n"</span><span class="token punctuation">,</span> R<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>（1）找出 <code>(0, +/-5) (+/-5, 0)</code>这种情况； （2）找出<code>(+/-3, +/-4), (+/-4, +/-3)</code>这种情况。</p></blockquote><p>首先，判断半径平方的算术平方根是否等于其整数部分，如果等于，则存在 <code>(0, +/-5) (+/-5, 0)</code>这种情况，使用flag变量标记下来；对于<code>(+/-3, +/-4), (+/-4, +/-3)</code>这类情况使用勾股定理进行判断验证，以x为自变量，循环遍历至r-1,求逐一对应的y的值，同样判断其算术平方根是否等于其整数部分，如果等于，则存在<code>(+/-3, +/-4), (+/-4, +/-3)</code>这一类情况。最后，算出两类情况的优雅的点的总数。</p><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://s2.ax1x.com/2019/07/01/ZGAeij.png" alt="ZGAeij.png"></p><hr><p>我的微信公众号：嵌入式大杂烩</p><p><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></p>]]></content>
      
      
      <categories>
          
          <category> C编程练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C编程练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C编程练习011</title>
      <link href="/2018/06/14/c-bian-cheng-lian-xi-011/"/>
      <url>/2018/06/14/c-bian-cheng-lian-xi-011/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><p>一个10万以内的整数，它加上100后是一个完全平方数，再加上168又是一个完全平方数，请问该数是多少？</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>方法一：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token number">100000</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        y <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">168</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span> x <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>y <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This integer is：%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>方法二：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token number">100000</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        y <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">168</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">*</span>x <span class="token operator">==</span> n <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>y<span class="token operator">*</span>y <span class="token operator">==</span> n <span class="token operator">+</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">168</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This integer is：%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>方法一和方法二都差不多，都是根据判断sqrt(n+100)与sqrt(n+100+168)的值是否为整数来找出符合条件的n的值。</p><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://s2.ax1x.com/2019/06/14/V4ySBR.png" alt="V4ySBR.png"></p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C编程练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C编程练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C编程练习010</title>
      <link href="/2018/06/12/c-bian-cheng-lian-xi-010/"/>
      <url>/2018/06/12/c-bian-cheng-lian-xi-010/</url>
      
        <content type="html"><![CDATA[<h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><blockquote><p>统计文件的字符数</p></blockquote><h2 id="2、代码"><a href="#2、代码" class="headerlink" title="2、代码"></a>2、代码</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/********************************************************************************************************* 题    目: 统计文件的字符数********************************************************************************************************/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> fname<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*存贮文件名*/</span>    FILE <span class="token operator">*</span>rfp<span class="token punctuation">;</span>    <span class="token keyword">long</span> count<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*文件字符计数器*/</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入文件名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>fname<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rfp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span>fname<span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Can't open file %s.\n"</span><span class="token punctuation">,</span>fname<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">fgetc</span><span class="token punctuation">(</span>rfp<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>rfp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*关闭文件*/</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"共有 %ld 个字符在文件 %s 中。\n"</span><span class="token punctuation">,</span>count<span class="token punctuation">,</span>fname<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3、测试结果及分析"><a href="#3、测试结果及分析" class="headerlink" title="3、测试结果及分析"></a>3、测试结果及分析</h2><p>首先，在与该源文件相同文件夹下建一个test.txt的文件，里面输入你要统计的内容：</p><p><img src="https://s2.ax1x.com/2019/06/13/VW2vuj.png" alt="VW2vuj.png"></p><p>其实，不同的编码，其字符（中文、英文字符）的占用的字节数是不一样的。下面测试一下：</p><h4 id="（1）utf-8编码下的英文字符统计"><a href="#（1）utf-8编码下的英文字符统计" class="headerlink" title="（1）utf-8编码下的英文字符统计"></a>（1）utf-8编码下的英文字符统计</h4><p><a href="https://imgchr.com/i/VWRiCT" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/13/VWRiCT.md.png" alt="VWRiCT.md.png"></a></p><p>可见，utf-8编码下，一个英文字符占用一个字节。</p><h4 id="（2）utf-8编码下的中文字符统计"><a href="#（2）utf-8编码下的中文字符统计" class="headerlink" title="（2）utf-8编码下的中文字符统计"></a>（2）utf-8编码下的中文字符统计</h4><p><a href="https://imgchr.com/i/VWRQPK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/13/VWRQPK.md.png" alt="VWRQPK.md.png"></a></p><p>可见，utf-8编码下，一个中文字符占用三个字节。</p><h4 id="（3）GB2312编码下的英文字符统计"><a href="#（3）GB2312编码下的英文字符统计" class="headerlink" title="（3）GB2312编码下的英文字符统计"></a>（3）GB2312编码下的英文字符统计</h4><p><a href="https://imgchr.com/i/VWRGKH" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/13/VWRGKH.md.png" alt="VWRGKH.md.png"></a></p><p>可见，GB2312编码下，一个英文字符占用一个字节。</p><h4 id="（4）GB2312编码下的中文字符统计"><a href="#（4）GB2312编码下的中文字符统计" class="headerlink" title="（4）GB2312编码下的中文字符统计"></a>（4）GB2312编码下的中文字符统计</h4><p><a href="https://imgchr.com/i/VWRYqA" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/13/VWRYqA.md.png" alt="VWRYqA.md.png"></a></p><p>可见，GB2312编码下，一个中文字符占用两个字节。</p><h3 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h3><p>中、英文字符占用的字节数与编码有关。在notepad++中可修改编码，如：</p><p><a href="https://imgchr.com/i/VWR6qs" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/13/VWR6qs.md.png" alt="VWR6qs.md.png"></a></p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C编程练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C编程练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C编程练习009</title>
      <link href="/2018/06/11/c-bian-cheng-lian-xi-009/"/>
      <url>/2018/06/11/c-bian-cheng-lian-xi-009/</url>
      
        <content type="html"><![CDATA[<h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><blockquote><p>将一个数分解质因数</p></blockquote><h2 id="2、代码"><a href="#2、代码" class="headerlink" title="2、代码"></a>2、代码</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/********************************************************************************************************* 题    目: 将一个数分解质因数** 样例输入：50** 样例输出：50 = 2 * 5 * 5********************************************************************************************************/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span> </span><span class="token keyword">void</span> <span class="token function">SeparateFactor</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>                <span class="token function">SeparateFactor</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 分解质因数</span><span class="token keyword">void</span> <span class="token function">SeparateFactor</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        a <span class="token operator">=</span> n<span class="token punctuation">;</span>        top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">%</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                array<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                a <span class="token operator">/</span><span class="token operator">=</span> i<span class="token punctuation">;</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d = "</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> top<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d * "</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://s2.ax1x.com/2019/06/10/V64vKs.png" alt="V64vKs.png"></p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C编程练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C编程练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C编程练习008</title>
      <link href="/2018/06/10/c-bian-cheng-lian-xi-008/"/>
      <url>/2018/06/10/c-bian-cheng-lian-xi-008/</url>
      
        <content type="html"><![CDATA[<h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><blockquote><p>自定义atoi函数</p></blockquote><p>atoi (表示 ascii to integer)是把字符串转换成整型数的一个函数，应用在计算机程序和办公软件中。<code>int atoi(const char *nptr)</code>函数会扫描参数 nptr字符串，会跳过前面的空白字符（例如空格，tab缩进）等。</p><h2 id="2、代码"><a href="#2、代码" class="headerlink" title="2、代码"></a>2、代码</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/********************************************************************************************************* 题    目: 自定义atoi函数********************************************************************************************************/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">my_atoi</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>nptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个数字字符串："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> str_to_int <span class="token operator">=</span> <span class="token function">my_atoi</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str_to_int = %d\n"</span><span class="token punctuation">,</span>str_to_int<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">my_atoi</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>nptr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> nptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'\0'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>nptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res <span class="token operator">=</span> res<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> nptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://s2.ax1x.com/2019/06/09/VsXK6U.png" alt="VsXK6U.png"></p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C编程练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C编程练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C编程练习007</title>
      <link href="/2018/06/06/c-bian-cheng-lian-xi-007/"/>
      <url>/2018/06/06/c-bian-cheng-lian-xi-007/</url>
      
        <content type="html"><![CDATA[<h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><blockquote><p>给定两个仅由大写字母或小写字母组成的字符串(长度介于1到10之间)，它们之间的关系是以下4中情况之一：<br>　　<br>1：两个字符串长度不等。比如 Beijing 和 Hebei<br>　　<br>2：两个字符串不仅长度相等，而且相应位置上的字符完全一致(区分大小写)，比如 Beijing 和 Beijing<br>　　<br>3：两个字符串长度相等，相应位置上的字符仅在不区分大小写的前提下才能达到完全一致（也就是说，它并不满足情况2）。<br>                比如 beijing 和 BEIjing<br>　　<br>4：两个字符串长度相等，但是即使是不区分大小写也不能使这两个字符串一致。比如 Beijing 和 Nanjing<br>　　         编程判断输入的两个字符串之间的关系属于这四类中的哪一类，给出所属的类的编号。</p></blockquote><h4 id="1-1-输入"><a href="#1-1-输入" class="headerlink" title="1.1 输入"></a>1.1 输入</h4><blockquote><p>包括两行，每行都是一个字符串</p></blockquote><h4 id="1-2-输出"><a href="#1-2-输出" class="headerlink" title="1.2 输出"></a>1.2 输出</h4><blockquote><p>仅有一个数字，表明这两个字符串的关系编号</p></blockquote><h4 id="1-3-样例输入"><a href="#1-3-样例输入" class="headerlink" title="1.3 样例输入"></a>1.3 样例输入</h4><blockquote><p>BEIjing </p></blockquote><blockquote><p>beiJing</p></blockquote><h4 id="1-4-样例输出"><a href="#1-4-样例输出" class="headerlink" title="1.4 样例输出"></a>1.4 样例输出</h4><blockquote><p>3</p></blockquote><h2 id="2、代码"><a href="#2、代码" class="headerlink" title="2、代码"></a>2、代码</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/********************************************************************************************************* 题    目: 给定两个仅由大写字母或小写字母组成的字符串(长度介于1到10之间)，它们之间的关系是以下4中情况之一：　　         1：两个字符串长度不等。比如 Beijing 和 Hebei　　         2：两个字符串不仅长度相等，而且相应位置上的字符完全一致(区分大小写)，比如 Beijing 和 Beijing　　         3：两个字符串长度相等，相应位置上的字符仅在不区分大小写的前提下才能达到完全一致（也就是说，它并不满足情况2）。                比如 beijing 和 BEIjing　　         4：两个字符串长度相等，但是即使是不区分大小写也不能使这两个字符串一致。比如 Beijing 和 Nanjing　　         编程判断输入的两个字符串之间的关系属于这四类中的哪一类，给出所属的类的编号。** 输    入: 包括两行，每行都是一个字符串** 输    出: 仅有一个数字，表明这两个字符串的关系编号** 样例输入：               BEIjing            beiJing** 样例输出：3********************************************************************************************************/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span><span class="token comment" spellcheck="true">// 主函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> arr2<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arr1_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> arr2_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s%s"</span><span class="token punctuation">,</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>    arr1_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>    arr2_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 两字符串长度不相等，输出1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1_len <span class="token operator">!=</span> arr2_len<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 两字符串长度相等</span>    <span class="token keyword">else</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 两字符串各字符相同，输出2</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 两字符串各字符不全相同</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 两字符串各字符转换为小写</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1_len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">tolower</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">tolower</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 再次判断，若各字符相同则输出3</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 若各字符不同则输出4</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"4\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://s2.ax1x.com/2019/06/06/VUvLJe.png" alt="VUvLJe.png"></p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C编程练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C编程练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C编程练习006</title>
      <link href="/2018/06/05/c-bian-cheng-lian-xi-006/"/>
      <url>/2018/06/05/c-bian-cheng-lian-xi-006/</url>
      
        <content type="html"><![CDATA[<h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><blockquote><p>在一个有限的正整数序列中，有些数会多次重复出现在这个序列中。如序列<code>3,1,2,1,5,1,2</code>。其中1就出现3次，2出现2次，3出现1次，5出现1次。要求对于给定的正整数序列，从小到大依次输出序列中出现的数及出现的次数。</p></blockquote><h4 id="数据约定"><a href="#数据约定" class="headerlink" title="数据约定"></a>数据约定</h4><blockquote><p>n&lt;=100; 0&lt;x&lt;1000000.</p></blockquote><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><blockquote><p>第一行正整数n，表示给定序列中正整数的个数。第二行是n个用空格隔开的正整数x，代表给定的序列。</p></blockquote><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><blockquote><p>若干行，每行两个用一个空格隔开的数，第一个是数列中出现的数第二个是该数在序列中出现的次数。</p></blockquote><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><blockquote><p>12<br> 8 2 8 2 2 11 1 1 8 1 13 13</p></blockquote><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><blockquote><p>1 3</p></blockquote><blockquote><p>2 3</p></blockquote><blockquote><p>8 3</p></blockquote><blockquote><p>11 1</p></blockquote><blockquote><p>13 2</p></blockquote><h2 id="2、代码"><a href="#2、代码" class="headerlink" title="2、代码"></a>2、代码</h2><p>首先，先从控制台输入数据保存到目标数组中；其次给目标数组元素进行从小到大排序；最后再进行数据统计。</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/********************************************************************************************************* 题    目: 在一个有限的正整数序列中，有些数会多次重复出现在这个序列中。如序列3,1,2,1,5,1,2。             其中1就出现3次，2出现2次，3出现1次，5出现1次。要求对于给定的正整数序列，从小到大             依次输出序列中出现的数及出现的次数。** 数据约定：n&lt;=1000; 0&lt;x&lt;1000000.             ** 输    入: 第一行正整数n，表示给定序列中正整数的个数。             第二行是n个用空格隔开的正整数x，代表给定的序列。** 输    出: 若干行，每行两个用一个空格隔开的数，第一个是数列中出现的数             第二个是该数在序列中出现的次数。** 样例输入：12             8 2 8 2 2 11 1 1 8 1 13 13** 样例输出：1 3             2 3             8 3             11 1             13 2********************************************************************************************************/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">BubbleSortSmallToBig</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// O(n*n)    </span><span class="token comment" spellcheck="true">// 主函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 数据输入</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 从小到大排序</span>    <span class="token function">BubbleSortSmallToBig</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 处理方式如下</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>         num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 数组内元素交换</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 从小到大排序</span><span class="token keyword">void</span> <span class="token function">BubbleSortSmallToBig</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// O(n*n)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>len<span class="token number">-1</span><span class="token punctuation">;</span> j<span class="token operator">></span>i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://s2.ax1x.com/2019/06/05/VN8ccj.png" alt="VN8ccj.png"></p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C编程练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C编程练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C编程练习005</title>
      <link href="/2018/06/04/c-bian-cheng-lian-xi-005/"/>
      <url>/2018/06/04/c-bian-cheng-lian-xi-005/</url>
      
        <content type="html"><![CDATA[<h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><blockquote><p>在已知两个从小到大有序的数表中寻找都出现的第一个元素</p></blockquote><h2 id="2、代码"><a href="#2、代码" class="headerlink" title="2、代码"></a>2、代码</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/********************************************************************************************************* 题    目: 在已知两个从小到大有序的数表中寻找都出现的第一个元素********************************************************************************************************/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;conio.h></span></span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>pa<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>pb<span class="token punctuation">,</span><span class="token keyword">int</span> an<span class="token punctuation">,</span><span class="token keyword">int</span> bn<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>ca<span class="token punctuation">,</span><span class="token operator">*</span>cb<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 为ca、cb设定初值 */</span>    ca <span class="token operator">=</span> pa<span class="token punctuation">;</span>    cb <span class="token operator">=</span> pb<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ca<span class="token operator">&lt;</span>pa<span class="token operator">+</span>an<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>cb<span class="token operator">&lt;</span>pb<span class="token operator">+</span>bn<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/*两个数表都未考察完*/</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 在两个数表中找下一个相等的元素 */</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>ca<span class="token operator">&lt;</span><span class="token operator">*</span>cb<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/*数表1的当前元素&lt;数表2的当前元素*/</span>        <span class="token punctuation">{</span>            ca<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*调整数表1的当前元素指针*/</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>ca<span class="token operator">></span><span class="token operator">*</span>cb<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*数表1的当前元素>数表2的当前元素*/</span>        <span class="token punctuation">{</span>            cb<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*调整数表2的当前元素指针*/</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            <span class="token comment" spellcheck="true">/*数表1的当前元素==数表2的当前元素*/</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> ca<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*返回在这两个数表中找到相等元素*/</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 主函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>vp<span class="token punctuation">,</span>i<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"The elements of array a is:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\nThe elements of array b is:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vp <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>vp<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nThe first same number in both arrays is %d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>vp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>     <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Not found!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\n Press any key to quit...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://s2.ax1x.com/2019/06/03/VYJ6yR.png" alt="VYJ6yR.png"></p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C编程练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C编程练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C编程练习004</title>
      <link href="/2018/06/01/c-bian-cheng-lian-xi-004/"/>
      <url>/2018/06/01/c-bian-cheng-lian-xi-004/</url>
      
        <content type="html"><![CDATA[<h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><blockquote><p>寻找数组元素第一次出现的位置</p></blockquote><p>假如有如下一个数组：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">999</span><span class="token punctuation">,</span><span class="token number">666</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>该怎么从这个数组中查找<code>66</code>第一次出现的位置（数组下标）呢？</p><h2 id="2、代码"><a href="#2、代码" class="headerlink" title="2、代码"></a>2、代码</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/********************************************************************************************************* 题    目: 寻找数组元素第一次出现的位置********************************************************************************************************/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;conio.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span>  Method   1  </span><span class="token comment" spellcheck="true">// 非0：方法一  0：方法二</span><span class="token macro property">#<span class="token directive keyword">if</span> Method</span><span class="token comment" spellcheck="true">// 方法一：函数返回找到元素的下标（使用指针的方式）</span><span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 已知数表的首元指针</span>           <span class="token keyword">int</span> n<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 数表中元素个数</span>           <span class="token keyword">int</span> key<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 要寻找的值</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> arr<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> arr<span class="token operator">+</span>n<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">==</span> key<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> p <span class="token operator">-</span> arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回找到元素的下标</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 未查找到key</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">else</span></span><span class="token comment" spellcheck="true">// 方法二：函数返回找到元素的下标（使用数组的方式）</span><span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 已知数表的首元指针</span>           <span class="token keyword">int</span> n<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 数表中元素个数</span>           <span class="token keyword">int</span> key<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 要寻找的值</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回找到元素的下标</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 未查找到key</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token comment" spellcheck="true">// 定义一个全局数组</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">999</span><span class="token punctuation">,</span><span class="token number">666</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 主函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> key<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The elements of array a is:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\nPlease input the key number you want to search:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nThe index of the key number %d in the array is: %d."</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>小知识：平时也有看到如下写法</p><pre class=" language-c"><code class="language-c"><span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span></code></pre><p>但<code>int arr[]</code> 最终都会转换为 <code>int *arr</code> 这样的指针。</p><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><img src="https://s2.ax1x.com/2019/06/23/ZPCC0P.png" alt="ZPCC0P.png"></p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C编程练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C编程练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C编程练习003</title>
      <link href="/2018/05/31/c-bian-cheng-lian-xi-003/"/>
      <url>/2018/05/31/c-bian-cheng-lian-xi-003/</url>
      
        <content type="html"><![CDATA[<h1 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h1><blockquote><p>遍历数组</p></blockquote><h1 id="2、代码"><a href="#2、代码" class="headerlink" title="2、代码"></a>2、代码</h1><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/********************************************************************************************************* 题    目: 遍历数组********************************************************************************************************/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> N sizeof(a)/sizeof(a[0])</span><span class="token comment" spellcheck="true">// 主函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 游标变量</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 指针变量</span>    <span class="token comment" spellcheck="true">/* 方法一：数组名和下标顺序访问数组的元素 */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"方法一：数组名和下标顺序访问数组的元素\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a[%d]\t= %d\n"</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 方法二：让指针顺序指向数组的各元素，遍历数组 */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"方法二：让指针顺序指向数组的各元素，遍历数组\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> a<span class="token operator">+</span>N<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*p\t= %d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 方法三：指针与游标变量结合，改变游标变量遍历数组 */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"方法三：指针与游标变量结合，改变游标变量遍历数组\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> a<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> p<span class="token operator">+</span>j <span class="token operator">&lt;</span> a<span class="token operator">+</span>N<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*(p+%d)\t= %d\n"</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://s2.ax1x.com/2019/06/23/ZPptC4.png" alt="ZPptC4.png"></p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C编程练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C编程练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C编程练习002</title>
      <link href="/2018/05/30/c-bian-cheng-lian-xi-002/"/>
      <url>/2018/05/30/c-bian-cheng-lian-xi-002/</url>
      
        <content type="html"><![CDATA[<h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><blockquote><p>求数组元素之和    </p></blockquote><h2 id="2、代码"><a href="#2、代码" class="headerlink" title="2、代码"></a>2、代码</h2><p>首先，需要构造一个求和函数。这里求和函数有两种构造方法，一种是迭代法，另一个种是递归法。</p><h3 id="2-1-迭代法求和函数"><a href="#2-1-迭代法求和函数" class="headerlink" title="2.1 迭代法求和函数"></a>2.1 迭代法求和函数</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arr_sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        arr_sum <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr_sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-递归法求和函数"><a href="#2-2-递归法求和函数" class="headerlink" title="2.2 递归法求和函数"></a>2.2 递归法求和函数</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-3-完整代码"><a href="#2-3-完整代码" class="headerlink" title="2.3 完整代码"></a>2.3 完整代码</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/********************************************************************************************************* 题    目: 求数组元素之和    ********************************************************************************************************/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;conio.h></span>   </span><span class="token comment" spellcheck="true">// getch函数在这个头文件中声明</span><span class="token macro property">#<span class="token directive keyword">define</span>  Method   0  </span><span class="token comment" spellcheck="true">// 1：迭代法  0：递归法</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> Method </span><span class="token comment" spellcheck="true">// 方法一：迭代法</span><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arr_sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        arr_sum <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr_sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">else</span> </span><span class="token comment" spellcheck="true">// 方法二：递归法</span><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token comment" spellcheck="true">// 主函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// cmd窗口清屏</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n The arry is:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n SUM of the arry is: %d\n"</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n Press any key to quit...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 从控制台无回显地取一个字符</span><span class="token punctuation">}</span></code></pre><blockquote><p>小知识：getch是一个计算机函数，在windows平台下从控制台无回显地取一个字符，在linux下是有回显的。用法是int getch(void)。在WINDOWS/MS-DOS中，也可以利用getch()函数让程序调试运行结束后等待编程者按下键盘才返回编辑界面,用法：包含conio.h头文件后，在主函数结尾，return 0;之前加上getch();即可</p></blockquote><p>关于getch、getchar、getche的区别可查看往期笔记：<a href="https://zhengnianli.github.io/2018/10/11/c-yu-yan-bi-ji-getchar-getche-getch-de-qu-bie/">【C语言笔记】getchar()、getche()、getch()的区别</a></p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C编程练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C编程练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C编程练习001</title>
      <link href="/2018/05/29/c-bian-cheng-lian-xi-001/"/>
      <url>/2018/05/29/c-bian-cheng-lian-xi-001/</url>
      
        <content type="html"><![CDATA[<h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><blockquote><p>斐波纳契数列 1，1，2，3，5，8，13，21，34，55，89……这个数列则称为“斐波纳契数列”，其中每个数字都是“斐波纳契数”。</p></blockquote><h3 id="1-1-输入与输出"><a href="#1-1-输入与输出" class="headerlink" title="1.1 输入与输出"></a>1.1 输入与输出</h3><blockquote><p>输入：一个整数N(N不能大于40)</p></blockquote><blockquote><p>输出：由N个“斐波纳契数”组成的“斐波纳契数列”。</p></blockquote><h3 id="1-2-样例输入与输出"><a href="#1-2-样例输入与输出" class="headerlink" title="1.2 样例输入与输出"></a>1.2 样例输入与输出</h3><blockquote><p>样例输入：6</p></blockquote><blockquote><p>样例输出：1 1 2 3 5 8</p></blockquote><h2 id="2、代码"><a href="#2、代码" class="headerlink" title="2、代码"></a>2、代码</h2><blockquote><p>规律：当前数=前一个数+前前一个数。如<code>2=1+1, 5=3+2, 8=5+3</code>。有两种方法求解，一种方法是使用<code>迭代法</code>，另一种方法是通过<code>递归</code>的方式。完整代码如下：</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/********************************************************************************************************* 题    目: 斐波纳契数列1，1，2，3，5，8，13，21，34，55，89……                 这个数列则称为“斐波纳契数列”，其中每个数字都是“斐波纳契数”。** 输    入: 一个整数N(N不能大于40)** 输    出: 由N个“斐波纳契数”组成的“斐波纳契数列”。** 样例输入：6    ** 样例输出：1 1 2 3 5 8 ********************************************************************************************************/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span>  Method   0  </span><span class="token comment" spellcheck="true">// 1：迭代法  0：递归法</span><span class="token macro property">#<span class="token directive keyword">if</span> Method </span><span class="token comment" spellcheck="true">// 方法一：迭代法</span><span class="token keyword">long</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> result<span class="token punctuation">;</span>    <span class="token keyword">long</span> pre_result<span class="token punctuation">;</span>    <span class="token keyword">long</span> pre_pre_result<span class="token punctuation">;</span>    pre_result <span class="token operator">=</span> pre_pre_result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        result <span class="token operator">=</span> pre_result <span class="token operator">+</span> pre_pre_result<span class="token punctuation">;</span>        pre_pre_result <span class="token operator">=</span> pre_result<span class="token punctuation">;</span>        pre_result <span class="token operator">=</span> result<span class="token punctuation">;</span>        n<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">else</span> </span><span class="token comment" spellcheck="true">// 方法二：递归法</span><span class="token keyword">long</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token comment" spellcheck="true">// 主函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%ld "</span><span class="token punctuation">,</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果为：</p><p><img src="https://s2.ax1x.com/2019/06/23/ZPSJ1A.png" alt="ZPSJ1A.png"></p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C编程练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C编程练习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
