<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【RT-Thread笔记】裸机系统与多线程系统</title>
      <link href="/2019/06/16/rt-thread-bi-ji-luo-ji-xi-tong-yu-duo-xian-cheng-xi-tong/"/>
      <url>/2019/06/16/rt-thread-bi-ji-luo-ji-xi-tong-yu-duo-xian-cheng-xi-tong/</url>
      
        <content type="html"><![CDATA[<p>单片机编程中有<code>裸机系统</code>与<code>多线程系统</code>的区别。</p><h3 id="裸机系统"><a href="#裸机系统" class="headerlink" title="裸机系统"></a>裸机系统</h3><p>裸机系统通常分成<code>轮询系统</code>和<code>前后台系统</code>。</p><h3 id="1、轮询系统"><a href="#1、轮询系统" class="headerlink" title="1、轮询系统"></a>1、轮询系统</h3><p>轮询系统即是在裸机编程的时候，先初始化好相关的硬件，然后让主程序在一个死循环里面不断循环，顺序地做各种事情，大概的伪代码具体如代码清单 1-1所示：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 硬件相关初始化 */</span> <span class="token function">HardWareInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 无限循环 */</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 处理事情 1 */</span>   <span class="token function">DoSomething1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 处理事情 2 */</span>   <span class="token function">DoSomethingg2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 处理事情 3 */</span>   <span class="token function">DoSomethingg3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>轮询系统是一种非常简单的软件结构，通常只适用于那些只需要顺序执行代码且不需要外部事件来驱动的就能完成的事情。在代码清单 1-1 中，如果只是实现 LED 翻转，串口输出，液晶显示等这些操作，那么使用轮询系统将会非常完美。但是，如果加入了按键操作等需要检测外部信号的事件，用来模拟紧急报警，那么整个系统的实时响应能力就不会那么好了。</p><p>假设DoSomethingg3 是按键扫描，当外部按键被按下，相当于一个警报，这个时候，需要立马响 应 ， 并 做 紧 急 处 理 ， 而 这 个 时 候 程 序 刚 好 执 行 到 DoSomethingg1 ， 要 命 的 是DoSomethingg1 需要执行的时间比较久，久到按键释放之后都没有执行完毕，那么当执行到 DoSomethingg3 的时候就会丢失掉一次事件。足见，轮询系统只适合顺序执行的功能代码，当有外部事件驱动时，实时性就会降低。</p><h3 id="2、前后台系统"><a href="#2、前后台系统" class="headerlink" title="2、前后台系统"></a>2、前后台系统</h3><p>相比轮询系统，前后台系统是在轮询系统的基础上加入了中断。外部事件的响应在中断里面完成，事件的处理还是回到轮询系统中完成，中断在这里我们称为前台， main 函数里面的无限循环我们称为后台，大概的伪代码见代码清单 1-2所示：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> flag1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> flag2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> flag3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 硬件相关初始化 */</span> <span class="token function">HardWareInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 无限循环 */</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>flag1<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/* 处理事情 1 */</span>     <span class="token function">DoSomething1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>flag2<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/* 处理事情 2 */</span>     <span class="token function">DoSomethingg2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>flag3<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/* 处理事情 3 */</span>     <span class="token function">DoSomethingg3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ISR1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 置位标志位 */</span> flag1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 如果事件处理时间很短，则在中断里面处理 如果事件处理时间比较长，在回到后台处理 */</span> <span class="token function">DoSomething1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ISR2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 置位标志位 */</span> flag2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 如果事件处理时间很短，则在中断里面处理 如果事件处理时间比较长，在回到后台处理 */</span> <span class="token function">DoSomething2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ISR3</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 置位标志位 */</span> flag3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 如果事件处理时间很短，则在中断里面处理 如果事件处理时间比较长，在回到后台处理 */</span> <span class="token function">DoSomething3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在顺序执行后台程序的时候，如果有中断来临，那么中断会打断后台程序的正常执行流，转而去执行中断服务程序，在中断服务程序里面标记事件，如果事件要处理的事情很简短，则可在中断服务程序里面处理，如果事件要处理的事情比较多，则返回到后台程序里面处理。</p><p>虽然事件的响应和处理是分开了，但是事件的处理还是在后台里面顺序执行的，但相比轮询系统，前后台系统确保了事件不会丢失，再加上中断具有可嵌套的功能，这可以大大的提高程序的实时响应能力。在大多数的中小型项目中，前后台系统运用的好，堪称有操作系统的效果。</p><h3 id="多线程系统"><a href="#多线程系统" class="headerlink" title="多线程系统"></a>多线程系统</h3><p>相比前后台系统，多线程系统的事件响应也是在中断中完成的，但是事件的处理是在线程中完成的。在多线程系统中，线程跟中断一样，也具有优先级，优先级高的线程会被优先执行。</p><p>当一个紧急的事件在中断被标记之后，如果事件对应的线程的优先级足够高，就会立马得到响应。相比前后台系统，多线程系统的实时性又被提高了。多线程系统大概的伪代码具体见代码清单 1-3所示：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> flag1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> flag2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> flag3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 硬件相关初始化 */</span> <span class="token function">HardWareInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* OS 初始化 */</span> <span class="token function">RTOSInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* OS 启动，开始多线程调度，不再返回 */</span> <span class="token function">RTOSStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ISR1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 置位标志位 */</span> flag1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ISR2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 置位标志位 */</span> flag2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ISR3</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 置位标志位 */</span> flag3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">DoSomething1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 无限循环，不能返回 */</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 线程实体 */</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>flag1<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">DoSomething2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 无限循环，不能返回 */</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 线程实体 */</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>flag2<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">DoSomething3</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* 无限循环，不能返回 */</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 线程实体 */</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>flag3<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>相比前后台系统中后台顺序执行的程序主体，在多线程系统中，根据程序的功能，我们把这个程序主体分割成一个个独立的，无限循环且不能返回的小程序，这个小程序我们称之为<code>线程</code>。</p><p>每个线程都是独立的，互不干扰的，且具备自身的优先级，它由操作系统调度管理。加入操作系统后，我们在编程的时候不需要精心地去设计程序的执行流，不用担心每个功能模块之间是否存在干扰。</p><p>加入了操作系统，我们的编程反而变得简单了。整个系统随之带来的额外开销就是操作系统占据的那一丁点的 FLASH 和 RAM。现如今，单片机的 FLASH 和 RAM 是越来越大，完全足以抵挡 RTOS 那点开销。</p><p>轮询、前后台和多线程系统软件模型区别：</p><p><a href="https://imgchr.com/i/VTw6V1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/16/VTw6V1.md.png" alt="VTw6V1.md.png"></a></p><p>以上是关于裸机系统与多线程系统的笔记，摘抄于《RT-Thread内核实现与应用开发实践指南》一书。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】如何查看数据类型范围？</title>
      <link href="/2018/12/07/c-yu-yan-bi-ji-ru-he-cha-kan-shu-ju-lei-xing-fan-wei/"/>
      <url>/2018/12/07/c-yu-yan-bi-ji-ru-he-cha-kan-shu-ju-lei-xing-fan-wei/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点一：查看整数范围"><a href="#知识点一：查看整数范围" class="headerlink" title="知识点一：查看整数范围"></a>知识点一：查看整数范围</h3><p>当前的编译环境下，你可能不知道int的数据范围是多少，或者记不清无符号短整型的范围是<code>0~65535</code>还是<code>0~65536</code>?这时候就可以按照如下程序进行输出查看：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;limits.h></span></span><span class="token comment" spellcheck="true">/* 输出当前编译器数据类型范围 */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nchar的范围为: %d —— %d\n"</span><span class="token punctuation">,</span> CHAR_MIN<span class="token punctuation">,</span> CHAR_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned char的范围为: %u —— %u\n\n"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> UCHAR_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"short的范围为: %hd —— %hd\n"</span><span class="token punctuation">,</span> SHRT_MIN<span class="token punctuation">,</span> SHRT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned short的范围为: %hu —— %hu\n\n"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> USHRT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"int的范围为: %d —— %d\n"</span><span class="token punctuation">,</span> INT_MIN<span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned int的范围为: %u —— %u\n\n"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> UINT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"long的范围为: %ld —— %ld\n"</span><span class="token punctuation">,</span> LONG_MIN<span class="token punctuation">,</span> LONG_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned long的范围为: %lu —— %lu\n\n"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ULONG_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"long long的范围为: %lld —— %lld\n"</span><span class="token punctuation">,</span> LLONG_MIN<span class="token punctuation">,</span> LLONG_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned long long的范围为: %llu —— %llu\n\n"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ULLONG_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序输出结果为：</p><p><a href="https://imgchr.com/i/VH925D" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VH925D.md.png" alt="VH925D.md.png"></a></p><p>其中，<code>CHAR_MIN</code>、<code>CHAR_MAX</code>等符号常量是从哪来的呢？其实这些符号常量是头文件<code>limits.h</code>里的宏定义，<code>limits.h</code>内容部分截图如下：</p><p><a href="https://imgchr.com/i/VH9h2d" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VH9h2d.md.png" alt="VH9h2d.md.png"></a></p><p>以上输出的范围中，<code>long long</code>与<code>unsigned long long</code>是<code>C99标准</code>引进的新的数据类型，关于C语言的几个标准可以查看小编的上一篇笔记：【C语言笔记】什么是ANSI C标准？</p><h3 id="知识点二：C语言的预定义宏"><a href="#知识点二：C语言的预定义宏" class="headerlink" title="知识点二：C语言的预定义宏"></a>知识点二：C语言的预定义宏</h3><p>标准C语言预处理要求定义某些对象宏，每个预定义宏的名称由两个下划线开头和两个下划线结尾，这些预定义宏不能被取消定义<code>（#undef）</code>。</p><p>常用的几个预处理宏有：</p><pre class=" language-c"><code class="language-c"><span class="token constant">__LINE__</span>：表示当前源代码的行号；<span class="token constant">__FILE__</span>：表示当前源文件的名称；<span class="token constant">__DATE__</span>：表示当前的编译日期；<span class="token constant">__TIME__</span>：表示当前的编译时间；__FUNCTION__：表示当前函数；</code></pre><p>代码演示：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前代码行号：%d\n"</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前编译日期：%s\n"</span><span class="token punctuation">,</span> <span class="token constant">__DATE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前编译时间：%s\n"</span><span class="token punctuation">,</span> <span class="token constant">__TIME__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前文件名称：%s\n"</span><span class="token punctuation">,</span> <span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前函数名称：%s\n"</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序输出结果为：</p><p><a href="https://imgchr.com/i/VH9XGQ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/17/VH9XGQ.md.png" alt="VH9XGQ.md.png"></a></p><p>预定义宏常用于程序运行异常的跟踪，<code>__FILE__</code>，<code>__LINE__</code>，<code>__FUNCTION__</code>这是最常用的组合，表示文件名、行数和函数名。除了以上提到的这五个预定义宏之外，还有<code>C99标准</code>提出的预定义宏如：<code>__STDC_HOSTED__</code>等，有兴趣的可以查一下。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】变参函数</title>
      <link href="/2018/11/22/c-yu-yan-bi-ji-bian-can-han-shu/"/>
      <url>/2018/11/22/c-yu-yan-bi-ji-bian-can-han-shu/</url>
      
        <content type="html"><![CDATA[<p>提到变参函数，我们的感觉是不是既熟悉又陌生？感觉熟悉是因为我们平时都在使用着，如我们常使用的printf()函数与scanf()函数就是典型的变参函数。因为printf()函数是变参函数我们才可以根据我们的需要灵活地输出变量的值。如：</p><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//给printf函数传入1个参数</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//给printf函数传入2个参数</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s  %d"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//给printf函数传入3个参数</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                      <span class="token comment" spellcheck="true">//给printf函数传入n个参数</span></code></pre><p>我们可以根据需要给printf()函数传入n个参数，这就是变参函数。</p><p>感觉陌生是因为我们没有试着创建变参函数。要创建变参函数需要包含头文件<code>stdarg.h</code>，并且创建变参函数应按照如下步骤进行：</p><p><code>【第一步】</code>定义一个使用省略号的函数原型，如printf()与scanf()函数的原型为</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>__format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">scanf</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>【第二步】</code>在函数定义中创建一个<code>va_list</code>类型的变量，用于存储不定的参数；</p><p><code>【第三步】</code>用宏<code>va_start</code>把该变量初始化为一个参数列表；</p><p><code>【第四步】</code>用宏<code>va_arg</code>访问参数列表；</p><p><code>【第五步】</code>用宏<code>va_end</code>完成清理工作。</p><p>示例程序：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span></span><span class="token comment" spellcheck="true">/*【第一步】:定义一个使用省略号的函数原型 */</span><span class="token keyword">double</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> lim<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*【第二步】:声明一个va_list类型的变量ap */</span> va_list ap<span class="token punctuation">;</span>     <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用于保存参数之和</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*【第三步】:使用va_start把变量ap初始化为参数列表 */</span> <span class="token function">va_start</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> lim<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lim<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/*【第四步】: 使用va_arg访问参数列表。    这里第二个参数是double类型，传入的不定参数就应是double类型   */</span>   sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/*【第五步】:使用va_end完成清理工作 */</span> <span class="token function">va_end</span><span class="token punctuation">(</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">double</span> sum1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 计算 */</span> sum1 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">3.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   sum2 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum1 = %f\n"</span><span class="token punctuation">,</span> sum1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum2 = %f\n"</span><span class="token punctuation">,</span> sum2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>变参函数sum()用于求lim个数之和，并且这lim个数的类型必须是double类型，因为sum函数实体中使用va_arg访问参数列表中的参数类型为double类型。</p><p>程序输出结果为：</p><p><a href="https://imgchr.com/i/V5haRI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5haRI.md.png" alt="V5haRI.md.png"></a></p><p>以上就是小编关于可变参数的一点小总结。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】时间日期函数</title>
      <link href="/2018/11/16/c-yu-yan-bi-ji-shi-jian-shi-qi-han-shu/"/>
      <url>/2018/11/16/c-yu-yan-bi-ji-shi-jian-shi-qi-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>time.h是C/C++中的日期和时间头文件。用于需要时间方面的函数。下面分享time.h头文件中几个常用函数的用法：</p><p><a href="https://imgchr.com/i/V5fE4A" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5fE4A.md.png" alt="V5fE4A.md.png"></a></p><h3 id="time-函数"><a href="#time-函数" class="headerlink" title="time()函数"></a>time()函数</h3><p>1、函数原型</p><pre class=" language-c"><code class="language-c">time_t <span class="token function">time</span><span class="token punctuation">(</span>time_t <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2、函数说明</p><p>time_t 是long int 类型。此函数会返回从公元1970年1月1日的UTC时间从0时0 分0秒算起到现在所经过的秒数。如果t是空指针，直接返回当前时间。如果t不是空指针，返回当前时间的同时，将返回值赋予t指向的内存空间。</p><p>3、函数返回值<br>成功则返回秒数，失败则返回((time_t)-1)值，错误原因存于errno中。</p><p>4、示例程序</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   time_t sec <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">(</span>time_t<span class="token operator">*</span><span class="token punctuation">)</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1970-01-01至现在的秒数为：%d\n"</span><span class="token punctuation">,</span> sec<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果</p><pre><code>1970-01-01至现在的秒数为：1542377079</code></pre><h3 id="gmtime-函数"><a href="#gmtime-函数" class="headerlink" title="gmtime()函数"></a>gmtime()函数</h3><p>1、函数原型</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> tm <span class="token operator">*</span><span class="token function">gmtime</span><span class="token punctuation">(</span><span class="token keyword">const</span> time_t <span class="token operator">*</span>timep<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2、函数说明</p><p>gmtime()将参数timep所指的time_t结构中的信息转换成真实世界所使用的时间日期表示方法，然后将结果由结构tm返回。</p><p>结构tm的定义为：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> tm<span class="token punctuation">{</span>   <span class="token keyword">int</span> tm_sec<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//代表目前秒数, 正常范围为0-59, 但允许至61 秒</span>   <span class="token keyword">int</span> tm_min<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//代表目前分数, 范围0-59</span>   <span class="token keyword">int</span> tm_hour<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//从午夜算起的时数, 范围为0-23</span>   <span class="token keyword">int</span> tm_mday<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//目前月份的日数, 范围01-31</span>   <span class="token keyword">int</span> tm_mon<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//代表目前月份, 从一月算起, 范围从0-11</span>   <span class="token keyword">int</span> tm_year<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//从1900 年算起至今的年数</span>   <span class="token keyword">int</span> tm_wday<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//一星期的日数, 从星期一算起, 范围为0-6</span>   <span class="token keyword">int</span> tm_yday<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//从今年1 月1 日算起至今的天数, 范围为0-365</span>   <span class="token keyword">int</span> tm_isdst<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//日光节约时间的旗标</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>3、函数返回值</p><p>返回结构tm代表目前UTC时间。</p><p>4、示例程序</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">char</span> <span class="token operator">*</span>wday<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Sun"</span><span class="token punctuation">,</span> <span class="token string">"Mon"</span><span class="token punctuation">,</span> <span class="token string">"Tue"</span><span class="token punctuation">,</span> <span class="token string">"Wed"</span><span class="token punctuation">,</span> <span class="token string">"Thu"</span><span class="token punctuation">,</span> <span class="token string">"Fri"</span><span class="token punctuation">,</span> <span class="token string">"Sat"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   time_t t<span class="token punctuation">;</span>   <span class="token keyword">struct</span> tm <span class="token operator">*</span>p<span class="token punctuation">;</span>   <span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mon <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mday <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> hour <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> <span class="token operator">*</span>week <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>   <span class="token function">time</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>   p <span class="token operator">=</span> <span class="token function">gmtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>   year <span class="token operator">=</span> <span class="token number">1900</span> <span class="token operator">+</span> p<span class="token operator">-></span>tm_year<span class="token punctuation">;</span>   mon <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> p<span class="token operator">-></span>tm_mon<span class="token punctuation">;</span>   mday <span class="token operator">=</span> p<span class="token operator">-></span>tm_mday<span class="token punctuation">;</span>   week <span class="token operator">=</span> wday<span class="token punctuation">[</span>p<span class="token operator">-></span>tm_wday<span class="token punctuation">]</span><span class="token punctuation">;</span>   hour <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">+</span> p<span class="token operator">-></span>tm_hour<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取当地时间，与UTC时间相差8小时   </span>   min <span class="token operator">=</span> p<span class="token operator">-></span>tm_min<span class="token punctuation">;</span>   sec <span class="token operator">=</span> p<span class="token operator">-></span>tm_sec<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d-%d-%d %s"</span><span class="token punctuation">,</span> year<span class="token punctuation">,</span> mon<span class="token punctuation">,</span> mday<span class="token punctuation">,</span> week<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %.2d:%.2d:%.2d\n"</span><span class="token punctuation">,</span> hour<span class="token punctuation">,</span> min<span class="token punctuation">,</span> sec<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果</p><pre class=" language-c"><code class="language-c"><span class="token number">2018</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">16</span> Fri <span class="token number">22</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">25</span>```### <span class="token function">localtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数<span class="token number">1</span>、函数原型```c<span class="token keyword">struct</span> tm <span class="token operator">*</span><span class="token function">localtime</span><span class="token punctuation">(</span><span class="token keyword">const</span> time_t <span class="token operator">*</span> timep<span class="token punctuation">)</span><span class="token punctuation">;</span>```<span class="token number">2</span>、函数说明<span class="token function">localtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>将参数timep所指的time_t 结构中的信息转换成真实世界所使用的时间日期表示方法，然后将结果由结构tm返回。<span class="token number">3</span>、函数返回值返回结构tm代表目前的当地时间。<span class="token number">4</span>、示例程序```c<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">char</span> <span class="token operator">*</span>wday<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Sun"</span><span class="token punctuation">,</span> <span class="token string">"Mon"</span><span class="token punctuation">,</span> <span class="token string">"Tue"</span><span class="token punctuation">,</span> <span class="token string">"Wed"</span><span class="token punctuation">,</span> <span class="token string">"Thu"</span><span class="token punctuation">,</span> <span class="token string">"Fri"</span><span class="token punctuation">,</span> <span class="token string">"Sat"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   time_t t<span class="token punctuation">;</span>   <span class="token keyword">struct</span> tm <span class="token operator">*</span>p<span class="token punctuation">;</span>   <span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mon <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mday <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> hour <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> <span class="token operator">*</span>week <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>   <span class="token function">time</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>   p <span class="token operator">=</span> <span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取得当地时间</span>   year <span class="token operator">=</span> <span class="token number">1900</span> <span class="token operator">+</span> p<span class="token operator">-></span>tm_year<span class="token punctuation">;</span>   mon <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> p<span class="token operator">-></span>tm_mon<span class="token punctuation">;</span>   mday <span class="token operator">=</span> p<span class="token operator">-></span>tm_mday<span class="token punctuation">;</span>   week <span class="token operator">=</span> wday<span class="token punctuation">[</span>p<span class="token operator">-></span>tm_wday<span class="token punctuation">]</span><span class="token punctuation">;</span>   hour <span class="token operator">=</span> p<span class="token operator">-></span>tm_hour<span class="token punctuation">;</span>   min <span class="token operator">=</span> p<span class="token operator">-></span>tm_min<span class="token punctuation">;</span>   sec <span class="token operator">=</span> p<span class="token operator">-></span>tm_sec<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d-%d-%d %s"</span><span class="token punctuation">,</span> year<span class="token punctuation">,</span> mon<span class="token punctuation">,</span> mday<span class="token punctuation">,</span> week<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %.2d:%.2d:%.2d\n"</span><span class="token punctuation">,</span> hour<span class="token punctuation">,</span> min<span class="token punctuation">,</span> sec<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> ```输出结果```c<span class="token number">2018</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">16</span> Fri <span class="token number">22</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token number">27</span>```### <span class="token function">ctime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数<span class="token number">1</span>、函数原型```c<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">ctime</span><span class="token punctuation">(</span><span class="token keyword">const</span> time_t <span class="token operator">*</span>timep<span class="token punctuation">)</span><span class="token punctuation">;</span>```<span class="token number">2</span>、函数说明<span class="token function">ctime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>将参数timep所指的time_t结构中的信息转换成真实世界所使用的时间日期表示方法，然后将结果以字符串形态返回。此函数已经由时区转换成当地时间。注意：若再调用相关的时间日期函数，此字符串可能会被破坏。<span class="token number">3</span>、函数返回值返回一字符串表示目前当地的时间日期。格式：星期<span class="token punctuation">,</span>月<span class="token punctuation">,</span>日<span class="token punctuation">,</span>小时<span class="token punctuation">:</span>分<span class="token punctuation">:</span>秒<span class="token punctuation">,</span>年。<span class="token number">4</span>、示例程序```c<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   time_t t<span class="token punctuation">;</span>   <span class="token function">time</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>```输出结果```cFri Nov <span class="token number">16</span> <span class="token number">22</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">51</span> <span class="token number">2018</span>```### <span class="token function">asctime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数<span class="token number">1</span>、函数原型```c<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">asctime</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> tm <span class="token operator">*</span> timeptr<span class="token punctuation">)</span><span class="token punctuation">;</span>```<span class="token number">2</span>、函数说明<span class="token function">asctime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>将参数timeptr所指的tm结构中的信息转换成真实世界所使用的时间日期表示方法，然后将结果以字符串形态返回。此函数已经由时区转换成当地时间。注意：若再调用相关的时间日期函数，此字符串可能会被破坏。与<span class="token function">ctime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数的不同在于传入参数结构不同。<span class="token number">3</span>、函数返回值返回一字符串表示目前当地的时间日期。格式：星期<span class="token punctuation">,</span>月<span class="token punctuation">,</span>日<span class="token punctuation">,</span>小时<span class="token punctuation">:</span>分<span class="token punctuation">:</span>秒<span class="token punctuation">,</span>年。<span class="token number">4</span>、示例程序```c<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   time_t t<span class="token punctuation">;</span>   <span class="token keyword">struct</span> tm <span class="token operator">*</span>p<span class="token punctuation">;</span>   <span class="token keyword">char</span> <span class="token operator">*</span>date <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>   <span class="token function">time</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>   p <span class="token operator">=</span> <span class="token function">gmtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>   date <span class="token operator">=</span> <span class="token function">asctime</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>```输出结果```cFri Nov <span class="token number">16</span> <span class="token number">14</span><span class="token punctuation">:</span><span class="token number">48</span><span class="token punctuation">:</span><span class="token number">29</span> <span class="token number">2018</span>```以上就是关于time<span class="token punctuation">.</span>h头文件里一些时间函数的介绍。其中<span class="token function">gmtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数与<span class="token function">localtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数类似，<span class="token function">ctime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数与<span class="token function">asctime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数类似，应把这两对函数对比来看。```c参考资料：百度百科及C语言中文网```<span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">!</span><span class="token punctuation">[</span>VcSFJJ<span class="token punctuation">.</span>md<span class="token punctuation">.</span>png<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>s2<span class="token punctuation">.</span>ax1x<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token number">2019</span><span class="token operator">/</span><span class="token number">06</span><span class="token operator">/</span><span class="token number">11</span><span class="token operator">/</span>VcSFJJ<span class="token punctuation">.</span>md<span class="token punctuation">.</span>png<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>imgchr<span class="token punctuation">.</span>com<span class="token operator">/</span>i<span class="token operator">/</span>VcSFJJ<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】两个小知识</title>
      <link href="/2018/11/13/c-yu-yan-bi-ji-liang-ge-xiao-zhi-shi/"/>
      <url>/2018/11/13/c-yu-yan-bi-ji-liang-ge-xiao-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p>一、关于头文件包含问题</p><p>C语言包含头文件时应该使用尖括号还是双引号？使用尖括号&lt;&gt;,编译器会到系统路径下查找头文件；而使用双引号“”，编译器首先在当前路径目录下查找头文件，如果没有找到，再转到系统目录下查找。所以，通常使用尖括号包含标准头文件，使用双引号包含自定义头文件。如：</p><p><a href="https://imgchr.com/i/V5W5pq" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5W5pq.md.png" alt="V5W5pq.md.png"></a></p><p>二、关于头文件重复包含问题</p><p>同一个头文件在不同的C文件里可能会被包含很多次，可能会产生重复包含的错误。我们可以使用宏保护来解决这个问题，如test.h中可以使用如下宏保护：</p><p><a href="https://imgchr.com/i/V5WocV" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5WocV.md.png" alt="V5WocV.md.png"></a></p><p>第一次包含头文件，会定义宏_TEST_H，并执行“头文件“的代码；第二次包含时因为之前已经有定义宏_TEST_H，不会重复执行”#ifndef _TEST_H“与”#endif“之间的代码。</p><p>stm32单片机中的库文件就是这么做的，如</p><p><a href="https://imgchr.com/i/V5WOAJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5WOAJ.md.png" alt="V5WOAJ.md.png"></a></p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】数组a与&amp;a有什么不同？</title>
      <link href="/2018/11/13/c-yu-yan-bi-ji-shu-zu-a-yu-a-you-shi-me-bu-tong/"/>
      <url>/2018/11/13/c-yu-yan-bi-ji-shu-zu-a-yu-a-you-shi-me-bu-tong/</url>
      
        <content type="html"><![CDATA[<p>首先，看一段代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d , &amp;a = %d \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>该代码运行结果为：</p><p><a href="https://imgchr.com/i/V5MJSO" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5MJSO.md.png" alt="V5MJSO.md.png"></a></p><p>可见，对于一个数组：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>a与&amp;a的值是相同的。为什么呢？</p><p>a是数组名，是一个数据区的常量，对其取地址（&amp;a）就可以得到数组存储区域的地址，同样，a本身也代表了数组存储区的首地址。所以，a与&amp;a的值是一样的。但是，虽然a与&amp;a指向同一个地址，但是他们的含义是不同的。下面我们修改一下上面的代码看看”a+1”与”&amp;a+1”是否还相等？修改后的代码运行结果为：</p><p><a href="https://imgchr.com/i/V5GRnU" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5GRnU.md.png" alt="V5GRnU.md.png"></a></p><p>可见，a+1的值比a的值大4，即sizeof(a[0])；&amp;a+1比&amp;a的值大20，即sizeof(a)。由此，可得出结论：a+1指向的地址相对与a指向的地址向后偏移了sizeof（a[0]）个字节，&amp;a+1指向的地址相对与&amp;a指向的地址向后偏移了sizeof(a)个字节，其描述图如下：</p><p><a href="https://imgchr.com/i/V5G5N9" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5G5N9.md.png" alt="V5G5N9.md.png"></a></p><p>下面分析一段代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*(a+1) = %d, *(ptr-1) = %d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果为：</p><pre class=" language-c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">4</span></code></pre><p><code>*(a+1) = 1</code>，是因为<code>a+1</code>代表数组第二个元素的地址，即<code>&amp;a[1]</code>，<code>*(a+1)</code>为取该地址上的值，即为1；<code>*（ptr-1)=4</code>，是因为ptr指向的是整个数组内存区域之后的内存，即数组最后一个元素之后的地址，<code>ptr-1</code>就是指向数组的最后一个元素，<code>*（ptr-1)</code>为取该地址上的值，即为4。</p><p>以上就是今天分享的关于数组的一个小知识点,如有错误欢迎指出！</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】指针函数与函数指针？</title>
      <link href="/2018/11/08/c-yu-yan-bi-ji-zhi-zhen-han-shu-yu-han-shu-zhi-zhen/"/>
      <url>/2018/11/08/c-yu-yan-bi-ji-zhi-zhen-han-shu-yu-han-shu-zhi-zhen/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>函数、指针这两个词结合的顺序不同其意义也不同，即指针函数与函数指针的意义不同。</p><p>###指针函数</p><p>指针函数的本质是一个函数，其返回值是一个指针。示例如下：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">pfun</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>由于“*”的优先级低于“()”的优先级，因而pfun首先和后面的“()”结合，也就意味着，pfun是一个函数。即：<code>int *(pfun(int, int));</code></p><p>接着再和前面的“*”结合，说明这个函数的返回值是一个指针。由于前面还有一个int，也就是说，pfun是一个返回值为整型指针的函数。</p><p>指针函数示例程序如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment" spellcheck="true">//这是一个指针函数的声明</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">pfun</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指针函数的调用</span> p <span class="token operator">=</span> <span class="token function">pfun</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"array[%d] = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这是一个指针函数，其返回值为指向整形的指针</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">pfun</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> arr<span class="token punctuation">;</span> <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序运行结果如下：</p><p><a href="https://imgchr.com/i/V5wndf" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5wndf.md.png" alt="V5wndf.md.png"></a></p><p>主函数中，把一个数组的首地址与数组长度作为实参传入指针函数pfun里，把指针函数的返回值（即指向数组的指针）赋给整形指针p。最后使用指针p来遍历数组元素并打印输出。</p><h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p>函数指针其本质是一个指针变量，该指针变量指向一个函数。C程序在编译时，每一个函数都有一个入口地址，该入口地址就是函数指针所指向的地址。函数指针示例：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*声明一个函数指针 */</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fptr<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 函数指针指向函数func */</span>fptr <span class="token operator">=</span> func<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 或者fptr = &amp;func;</span></code></pre><p>func是一个函数名，那么func与&amp;func都表示的是函数的入口地址。同样的，在函数的调用中可以使用：方式一：func()，也可以使用方式二：(*fun)()。这两种调用方式是等价的，只是我们平时大多都习惯用方式一的调用方法。</p><p>至于为什么func与&amp;func的含义相同，<code>《嵌入式Linux上的C语言编程实践》</code>这本书中有如下解释：</p><blockquote><p>对于函数func来说，函数的名称就是函数代码区的常量，对它取地址(&amp;func)可以得到函数代码区的地址，同时，func本身也可以视为函数代码区的地址。因此，函数名称和对其取地址其含义是相同的。</p></blockquote><p>函数指针示例程序如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fptr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义一个函数指针</span> <span class="token keyword">int</span> res<span class="token punctuation">;</span> fptr <span class="token operator">=</span> add<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//函数指针fptr指向函数add</span> <span class="token comment" spellcheck="true">/* 通过函数指针调用函数 */</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>fptr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//等价于res = fptr(1,2);</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a + b = %d\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>int add(int a, int b)<br>{ return a + b;<br>}</p><p>程序运行结果如下：</p><p><a href="https://imgchr.com/i/V5wJLq" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5wJLq.md.png" alt="V5wJLq.md.png"></a></p><p>以上就是关于指针函数与函数指针的简单区分。其中，函数指针广泛应用于嵌入式软件开发中，其常用的两个用途：调用函数和做函数的参数。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】关于有符号数与无符号数的一些总结</title>
      <link href="/2018/10/30/c-yu-yan-bi-ji-guan-yu-you-fu-hao-shu-yu-wu-fu-hao-shu-de-yi-xie-zong-jie/"/>
      <url>/2018/10/30/c-yu-yan-bi-ji-guan-yu-you-fu-hao-shu-yu-wu-fu-hao-shu-de-yi-xie-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="有、无符号数之间的运算"><a href="#有、无符号数之间的运算" class="headerlink" title="有、无符号数之间的运算"></a>有、无符号数之间的运算</h3><p>有符号数与无符号数之间的运算，编译器会进行隐式类型转换。</p><p>请看如下代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> a<span class="token operator">+</span>b <span class="token operator">></span> <span class="token number">6</span> <span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a+b大于6\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a+b小于6\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序输出结果为：</p><pre class=" language-c"><code class="language-c">a<span class="token operator">+</span>b大于<span class="token number">6</span></code></pre><p>原因是因为编译器会将有符号数b转换成为一个无符号数，即此处<code>a+b</code>等价于<code>a+(unsigned int)b</code>。</p><p>该程序运行在32bit环境下，b的值为<code>0xFFFFFFFF-20+1 = 4294967276</code>，即a+b将远远大于6。</p><p>C 语言按照一定的规则来进行此类运算的转换，这种规则称为<code>正常算术转换</code>，转换的顺序为：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">double</span><span class="token operator">></span><span class="token keyword">float</span><span class="token operator">></span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">></span><span class="token keyword">long</span><span class="token operator">></span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token keyword">int</span></code></pre><p>即操作数类型排在后面的与操作数类型排在前面的进行运算时，排在后面的类型将隐式转换为排在前面的类型。</p><h3 id="有、无符号数转化为更大类型"><a href="#有、无符号数转化为更大类型" class="headerlink" title="有、无符号数转化为更大类型"></a>有、无符号数转化为更大类型</h3><p>请看如下代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//情况一</span> <span class="token keyword">signed</span> <span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span>   <span class="token keyword">unsigned</span> <span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span> <span class="token keyword">int</span> a1<span class="token punctuation">,</span>a2<span class="token punctuation">;</span> a1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c1<span class="token punctuation">;</span> a2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c2<span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a1=%d(%#.8X),a2=%d(%#.8X)\n"</span><span class="token punctuation">,</span>a1<span class="token punctuation">,</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">,</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//情况二</span> <span class="token keyword">signed</span> <span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> c4 <span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span> <span class="token keyword">int</span> a3<span class="token punctuation">,</span>a4<span class="token punctuation">;</span> a3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c3<span class="token punctuation">;</span> a4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c4<span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a3=%d(%#.8X),a4=%d(%#.8X)\n"</span><span class="token punctuation">,</span>a3<span class="token punctuation">,</span>a3<span class="token punctuation">,</span>a4<span class="token punctuation">,</span>a4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//情况三</span> <span class="token keyword">signed</span> <span class="token keyword">char</span> c5 <span class="token operator">=</span> <span class="token number">0x7f</span><span class="token punctuation">;</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> c6 <span class="token operator">=</span> <span class="token number">0x7f</span><span class="token punctuation">;</span> <span class="token keyword">int</span> a5<span class="token punctuation">,</span>a6<span class="token punctuation">;</span> a5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c5<span class="token punctuation">;</span> a6 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c6<span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a5=%d(%#.8X),a6=%d(%#.8X)\n"</span><span class="token punctuation">,</span>a5<span class="token punctuation">,</span>a5<span class="token punctuation">,</span>a6<span class="token punctuation">,</span>a6<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序输出结果为：</p><pre class=" language-c"><code class="language-c">a1<span class="token operator">=</span><span class="token operator">-</span><span class="token function">1</span><span class="token punctuation">(</span><span class="token number">0XFFFFFFFF</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a2<span class="token operator">=</span><span class="token function">255</span><span class="token punctuation">(</span><span class="token number">0X000000FF</span><span class="token punctuation">)</span>a3<span class="token operator">=</span><span class="token operator">-</span><span class="token function">128</span><span class="token punctuation">(</span><span class="token number">0XFFFFFF80</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a4<span class="token operator">=</span><span class="token function">128</span><span class="token punctuation">(</span><span class="token number">0X00000080</span><span class="token punctuation">)</span>a5<span class="token operator">=</span><span class="token function">127</span><span class="token punctuation">(</span><span class="token number">0X0000007F</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a6<span class="token operator">=</span><span class="token function">127</span><span class="token punctuation">(</span><span class="token number">0X0000007F</span><span class="token punctuation">)</span></code></pre><p>可见：</p><p>（1）将无符号数转换为更大的数据类型时, 只需简单地在开头添加0至所需位数，这种运算称为0扩展。</p><p>（2）将有符号数转换为更大的数据类型需要执行符号扩展，规则是将符号位扩展至所需的位数，即符号位为0时在开头添加0至所需位数，符号位为1时在开头添加1至所需位数。</p><p>此外，还需注意，对于一个signed char类型数据，0xff代表的是-1，因为整数在内存中是以补码的形式存储的。</p><p>正数的原码、反码、补码都相等。负数的反码是将原码中除符号位以外的所有位（数值位）取反，也就是 0 变成 1，1 变成 0；负数的补码是其反码加 1。</p><p>此处，对于一个signed char类型数据，-1的原码为1000 0001，反码为1111 1110，所以补码为1111 1111。</p><p>signed char的负数对应表为（图片来源于网络）：</p><p><a href="https://imgchr.com/i/V5Fk0U" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5Fk0U.md.png" alt="V5Fk0U.md.png"></a></p><p>其中，-128最为特殊，需要特别记住，其不遵循传统的由补码计算原码的方法。</p><p>以上就是关于有符号数与无符号数的两点总结：（1）有符号数与无符号数之间的运算，编译器会进行隐式类型转换。（2）有符号数、无符号数转换为更大的数据类型。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】static关键字</title>
      <link href="/2018/10/25/c-yu-yan-bi-ji-static-guan-jian-zi/"/>
      <url>/2018/10/25/c-yu-yan-bi-ji-static-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<pre class=" language-c"><code class="language-c">参考：https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span>keyeagle<span class="token operator">/</span>article<span class="token operator">/</span>details<span class="token operator">/</span><span class="token number">6708077</span><span class="token operator">?</span>utm_source<span class="token operator">=</span>copy </code></pre><p>C语言代码是以文件为单位来组织的，在一个源程序的所有源文件中，一个外部变量（注意不是局部变量）或者函数只能在一个源程序中定义一次，如果有重复定义的话编译器就会报错。</p><p>伴随着不同源文件变量和函数之间的相互引用以及相互独立的关系，产生了extern和static关键字。</p><p>下面，详细分析一下static关键字在编写程序时有的三大类用法：</p><h3 id="static定义全局变量"><a href="#static定义全局变量" class="headerlink" title="static定义全局变量"></a>static定义全局变量</h3><p>一个进程在内存中的布局如图1所示：</p><p><a href="https://imgchr.com/i/V5F0nf" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5F0nf.md.png" alt="V5F0nf.md.png"></a></p><p>其中<code>.text段</code>保存进程所执行的程序二进制文件，<code>.data段</code>保存进程所有的已初始化的全局变量，<code>.bss段</code>保存进程未初始化的全局变量（其他段中还有很多乱七八糟的段，暂且不表）。在进程的整个生命周期中，.data段和.bss段内的数据时跟整个进程同生共死的，也就是在进程结束之后这些数据才会寿终就寝。</p><p>当一个进程的全局变量被声明为static之后，它的中文名叫<code>静态全局变量</code>。静态全局变量和其他的全局变量的存储地点并没有区别，都是在.data段（已初始化）或者.bss段（未初始化）内，但是它只在定义它的源文件内有效，其他源文件无法访问它。所以，普通全局变量穿上static外衣后，它就变成了新娘，已心有所属，只能被定义它的源文件（新郎）中的变量或函数访问。</p><p>以下是示例程序：</p><p>file1.h如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">printStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们在file1.c中定义一个静态全局变量hello, 供file1.c中的函数printStr访问。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"file1.h"</span></span><span class="token keyword">static</span> <span class="token keyword">char</span><span class="token operator">*</span> hello <span class="token operator">=</span> <span class="token string">"hello ZhengNian!"</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">printStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> hello<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>main.c如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"file1.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> hello<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>main.c是我们的主程序所在文件，main.c中如果引用hello会编译出错，报错如下：</p><p><a href="https://imgchr.com/i/V5knUg" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5knUg.md.png" alt="V5knUg.md.png"></a></p><p>如果我们将main.c改为下面的形式：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"file1.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>则会顺利编译连接。运行结果如下：</p><p><a href="https://imgchr.com/i/V5ku5Q" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5ku5Q.md.png" alt="V5ku5Q.md.png"></a></p><h3 id="static定义局部变量"><a href="#static定义局部变量" class="headerlink" title="static定义局部变量"></a>static定义局部变量</h3><p>static局部变量中文名叫静态局部变量。它与普通的局部变量比起来有如下几个区别：</p><p>（1）位置：静态局部变量被编译器放在全局存储区.data（注意：不在.bss段内，原因见（3）），所以它虽然是局部的，但是在程序的整个生命周期中存在。</p><p>（2）访问权限：静态局部变量只能被其作用域内的变量或函数访问。也就是说虽然它会在程序的整个生命周期中存在，由于它是static的，它不能被其他的函数和源文件访问。</p><p>（3）值：静态局部变量如果没有被用户初始化，则会被编译器自动赋值为0，以后每次调用静态局部变量的时候都用上次调用后的值。这个比较好理解，每次函数调用静态局部变量的时候都修改它然后离开，下次读的时候从全局存储区读出的静态局部变量就是上次修改后的值。</p><p>以下是示例程序：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> normal_var <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">static</span> <span class="token keyword">int</span> static_var <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"normal_var:%d  static_var:%d\n"</span><span class="token punctuation">,</span> normal_var<span class="token punctuation">,</span> static_var<span class="token punctuation">)</span><span class="token punctuation">;</span> normal_var<span class="token operator">++</span><span class="token punctuation">;</span> static_var<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果如下：</p><p><a href="https://imgchr.com/i/V5kl2n" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5kl2n.md.png" alt="V5kl2n.md.png"></a></p><p>可以看出，函数每次被调用，普通局部变量都是重新分配，而静态局部变量保持上次调用的值不变。</p><p>需要注意的是由于static局部变量的这种特性，使得含静态局部变量的函数变得不可重入，即每次调用可能会产生不同的结果。这在多线程编程时可能会成为一种隐患。需要多加注意。</p><h3 id="static定义函数"><a href="#static定义函数" class="headerlink" title="static定义函数"></a>static定义函数</h3><p>当你的程序中有很多个源文件的时候，你肯定会让某个源文件只提供一些外界需要的接口，其他的函数可能是为了实现这些接口而编写，这些其他的函数你可能并不希望被外界（非本源文件）所看到，这时候就可以用static修饰这些“其他的函数”。</p><p>所以static函数的作用域是本源文件。static定义函数与static定义全局变量类似，不再举例说明，可参考“static定义全局变量”的程序定义全局变量的套路。</p><p>以上就是关于static的三种用法，如有错误，欢迎指出！</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】数组与指针不等价</title>
      <link href="/2018/10/25/c-yu-yan-bi-ji-shu-zu-yu-zhi-zhen-bu-deng-jie/"/>
      <url>/2018/10/25/c-yu-yan-bi-ji-shu-zu-yu-zhi-zhen-bu-deng-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>数组与指针是不等价的，如：</p><ul><li><p>数组名不可以改变，而指向数组的指针是可以改变的。</p></li><li><p>字符串指针指向的字符串中的字符是不能改变的，而字符数组中的字符是可以改变的。</p></li><li><p>求数组长度时，借用数组名可求得数组长度，而借用指针却得不到数组长度。</p></li></ul><h3 id="区别一"><a href="#区别一" class="headerlink" title="区别一"></a>区别一</h3><p>数组名的指向不可以改变，而指向数组的指针是可以改变的。</p><p>请看如下代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数组遍历方式一</span> <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a[%d] = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 数组遍历方式二</span> <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a[%d] = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>数组遍历方式一：使用指针遍历数组元素，<em>p++等价于</em>(p++)，即指针指向的地址每次后移一个单位，然后再取地址上的值。这里的一个单位是sizeof(int)个字节。</p><p>数组遍历方式二：使用数组名自增遍历数组元素，编译出错，错误如下：</p><pre class=" language-c"><code class="language-c">error<span class="token punctuation">:</span> value required as increment operand</code></pre><p>因为数组名的指向是不可以改变的，使用自增运算符自增就会改变其指向，这是不对的，数组名只能指向数组的开头。但是可以改为如下遍历方式：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a[%d] = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>这可以正确遍历数组元素。因为*(a+i)与a[i]是等价的。</p><h3 id="区别二"><a href="#区别二" class="headerlink" title="区别二"></a>区别二</h3><p>字符串指针指向的字符串中的字符是不能改变的，而字符数组中的字符是可以改变的。</p><p>请看如下代码：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//字符串定义方式一</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"happy"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符串定义方式二</span><span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token string">"happy"</span><span class="token punctuation">;</span></code></pre><p>字符串定义方式一：字符串中的字符是可以改变的。如可以使用类似str[3]=’q’这样的语句来改变其中的字符。原因就是：这种方式定义的字符串保存在全局数据区或栈区，是可读写的。</p><p>字符串定义方式二：字符串中的字符是不可以改变的。原因就是：这种方式定义的字符串保存在常量区，是不可修改的。</p><h3 id="区别三"><a href="#区别三" class="headerlink" title="区别三"></a>区别三</h3><p>求数组长度时，借用数组名可求得数组长度，而借用指针却得不到数组长度。</p><p>请看如下代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token keyword">char</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 求数组长度方式一</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"方式一：len=%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 求数组长度方式二</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"方式二：len=%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果</p><pre class=" language-c"><code class="language-c">方式一：len<span class="token operator">=</span><span class="token number">5</span>方式二：len<span class="token operator">=</span><span class="token number">1</span></code></pre><p>求数组长度方式一：借用数组名来求数组长度，可求得数组有5个元素，正确。</p><p>求数组长度方式二：借用指针求数组长度，求得长度为1，错误。原因是：</p><p>p只是一个指向int类型的指针，编译器不知道其指向的是一个整数还是指向一个数组。sizeof(p)求得的是p这个指针变量本身所占用的字节数，而不是整个数组占用的字节数。</p><p>以上就是指针与其指向的数组的三个典型的区别：（1）遍历数组时需要注意；（2）修改字符串中的字符时需要注意；（3）求数组长度时需要注意。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】char *str与char str[]的区别</title>
      <link href="/2018/10/14/c-yu-yan-bi-ji-char-str-yu-char-str-de-qu-bie/"/>
      <url>/2018/10/14/c-yu-yan-bi-ji-char-str-yu-char-str-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>C语言中没有特定的字符串类型，常用以下两种方式定义字符串：一种是字符数组，另一种是指向字符串的指针。如下：</p><pre class=" language-c"><code class="language-c"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"happy"</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token string">"happy"</span><span class="token punctuation">;</span></code></pre><p>这种方式有什么不同呢？</p><p>下面看两个例子：修改字符串中的字符</p><p>示例1：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre class=" language-c"><code class="language-c">Hello</code></pre><p>示例2：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre class=" language-c"><code class="language-c">无打印信息输出</code></pre><p>可见，使用（1）方式定义的字符串其字符是可以修改的，使用（2）方式定义的字符串其字符是不可以修改的。（2）中可以成功编译和链接，但运行时可能会出现错误，我编译与运行的平台是window10平台，运行结果是无打印信息输出，在其他不同的平台运行可能会出现<code>段错误（Segment Fault）</code>或者写入位置错误。</p><p>这两种表示字符串的方式的主要区别是：字符串指针指向的内容是不可修改的，字符数组是可以修改的，即（2）方式定义的字符串保存在常量区，是不可更改的，（1）方式定义的字符串保存在全局数据区或栈区，是可修改的。</p><p>内存的分配方式：</p><p>内存分配可分为三种：静态存储区、栈区、堆区。</p><p><code>1、静态存储区</code>：该内存在程序编译的时候就已经分配好，这块内存在程序的整个运行期间都存在，它主要存放静态数据、全局数据和常量。</p><p><code>2、栈区</code>：它的用途是完成函数的调用。在执行函数时，函数内局部变量及函数参数的存储单元在栈上创建，函数调用结束时这些存储单元自动被释放。</p><p><code>3、堆区</code>：程序在运行时使用库函数为变量申请内存，在变量使用结束后再调用库函数释放内存。动态内存的生存期是由我们决定的，如果我们不释放内存，就会导致内存泄漏。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】C语言编译的过程</title>
      <link href="/2018/10/14/c-yu-yan-bi-ji-c-yu-yan-bian-yi-de-guo-cheng/"/>
      <url>/2018/10/14/c-yu-yan-bi-ji-c-yu-yan-bian-yi-de-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h3><p>如果你使用的是集成开发环境，那么你点击编译按钮就可生成可执行文件，然后点击运行即可运行。那么，你知道从源代码到可执行文件经历了哪些过程吗。仅仅是编译？</p><p>下面以<code>windows</code>环境下的<code>test.c</code>为例，<code>test.c</code>里的代码为：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This is a test program!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其经历如下过程：</p><p><a href="https://imgchr.com/i/V5fr59" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5fr59.md.png" alt="V5fr59.md.png"></a></p><p>如图，编译生成可执行文件的过程实际包含四个过程：（1）预处理；（2）编译；（3）汇编；（4）链接。</p><h3 id="2、预处理（Preprpcessing）"><a href="#2、预处理（Preprpcessing）" class="headerlink" title="2、预处理（Preprpcessing）"></a>2、预处理（Preprpcessing）</h3><p>使用预处理器把源文件<code>test.c</code>经过预处理生成<code>test.i</code>文件，预处理用于将所有的#include头文件以及宏定义替换成其真正的内容。</p><p>预处理的命令为：</p><pre class=" language-c"><code class="language-c">gcc <span class="token operator">-</span>E test<span class="token punctuation">.</span>c <span class="token operator">-</span>o test<span class="token punctuation">.</span>i</code></pre><p>上述命令中<code>-E</code>是让编译器在预处理之后就退出，不进行后续编译过程；<code>-o</code>是指定输出文件名。</p><p>预处理之后得到的仍然是文本文件。test.i文件部分内容截图如下：</p><p><a href="https://imgchr.com/i/V5fRKK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5fRKK.md.png" alt="V5fRKK.md.png"></a></p><p>3、编译（Compilation）</p><p>使用编译器将预处理文件<code>test.i</code>编译成汇编文件<code>test.s</code>。</p><p>编译的命令为：</p><pre class=" language-c"><code class="language-c">gcc <span class="token operator">-</span>S test<span class="token punctuation">.</span>i <span class="token operator">-</span>o test<span class="token punctuation">.</span>s</code></pre><p>上述命令中-S让编译器在编译之后停止，不进行后续过程；-o是指定输出文件名。汇编文件test.s是文本文件，部分内容截图如下：</p><p><a href="https://imgchr.com/i/V5fLKf" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5fLKf.md.png" alt="V5fLKf.md.png"></a></p><p>4、汇编（Assemble）</p><p>使用汇编器将汇编文件<code>test.s</code>转换成目标文件<code>test.o</code>。</p><p>汇编过程的命令为：</p><pre class=" language-c"><code class="language-c">gcc <span class="token operator">-</span>c test<span class="token punctuation">.</span>s <span class="token operator">-</span>o test<span class="token punctuation">.</span>o</code></pre><p>上述命令中<code>-c</code>、<code>-o</code>让汇编器把汇编文件<code>test.s</code>转换成目标文件<code>test.o</code>。目标文件<code>test.o</code>是二进制文件，部分内容截图如下：</p><p><a href="https://imgchr.com/i/V5fxaQ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5fxaQ.md.png" alt="V5fxaQ.md.png"></a></p><p>5、链接（Linking）</p><p>链接过程使用链接器将该目标文件与其他目标文件、库文件、启动文件等链接起来生成可执行文件。</p><p>链接过程的命令为：</p><pre class=" language-c"><code class="language-c">gcc test<span class="token punctuation">.</span>o <span class="token operator">-</span>o test<span class="token punctuation">.</span>exe</code></pre><p>综上，生成可执行程序过程为：预处理、编译、汇编、链接。各个命令如下图所示：</p><p><a href="https://imgchr.com/i/V5hpPs" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5hpPs.md.png" alt="V5hpPs.md.png"></a></p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言笔记】main()函数的几种形式</title>
      <link href="/2018/10/02/c-yu-yan-bi-ji-main-han-shu-de-ji-chong-xing-shi/"/>
      <url>/2018/10/02/c-yu-yan-bi-ji-main-han-shu-de-ji-chong-xing-shi/</url>
      
        <content type="html"><![CDATA[<p>在C语言中，main函数是程序的入口。其有四种写法，即：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//写法一</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello notepad++ \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//写法二</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello notepad++ \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//写法三</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello notepad++ \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//写法四</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello notepad++ \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>前面三种不带参数的都是比较常见的写法。第四种写法带的两个参数是什么意思呢？下面简单来介绍一下。首先，主函数不能被其他函数调用，所以形参<code>argc</code>与<code>argv</code>的实际值就不能从其他函数传入，那么其实参应该从哪传入呢？是从操作系统命令行上获得的。因此这两个参数也被称为命令行参数，<code>argc</code>为命令行参数的个数，<code>argv</code>为字符串命令行参数的首地址。</p><p>下面看一个代码实例：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment" spellcheck="true">//写法四</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;&lt;&lt; argument list >>>>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"argc = %d\n"</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"argv[%d] = %s\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello notepad++ \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>键入组合键<code>【win+r】</code>打开<code>运行</code>窗口，输入<code>cmd</code>并回车进入命令行环境：</p><p>输入<code>gcc hello.c -o hello.exe</code>命令进行编译，再输入<code>hello.exe cmd1 cmd2 cmd3 cmd4 cmd5</code>（DOS提示符下命令行的一般形式为： <code>C:\&gt;可执行文件名 参数 参数……）</code>对main函数进行传参，输出结果为：</p><p><a href="https://imgchr.com/i/V5hhQ0" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/14/V5hhQ0.md.png" alt="V5hhQ0.md.png"></a></p><p>可见， argv为字符串指针数组，其各元素值为命令行中各字符串(参数均按字符串处理)的首地址，argc为指针数组的长度，即为参数的个数。</p><hr><p><a href="https://imgchr.com/i/VcSFJJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/11/VcSFJJ.md.png" alt="VcSFJJ.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> C语言笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
