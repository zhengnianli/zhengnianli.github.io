<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>正念君的博客</title>
  
  <subtitle>嵌入式大杂烩</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhengnianli.github.io/"/>
  <updated>2019-06-17T09:58:22.451Z</updated>
  <id>https://zhengnianli.github.io/</id>
  
  <author>
    <name>ZhengNian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【RT-Thread笔记】裸机系统与多线程系统</title>
    <link href="https://zhengnianli.github.io/2019/06/16/rt-thread-bi-ji-luo-ji-xi-tong-yu-duo-xian-cheng-xi-tong/"/>
    <id>https://zhengnianli.github.io/2019/06/16/rt-thread-bi-ji-luo-ji-xi-tong-yu-duo-xian-cheng-xi-tong/</id>
    <published>2019-06-16T05:59:36.000Z</published>
    <updated>2019-06-17T09:58:22.451Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;单片机编程中有&lt;code&gt;裸机系统&lt;/code&gt;与&lt;code&gt;多线程系统&lt;/code&gt;的区别。&lt;/p&gt;
&lt;h3 id=&quot;裸机系统&quot;&gt;&lt;a href=&quot;#裸机系统&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="嵌入式" scheme="https://zhengnianli.github.io/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
      <category term="嵌入式" scheme="https://zhengnianli.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【C语言笔记】#运算符与##运算符</title>
    <link href="https://zhengnianli.github.io/2019/05/07/c-yu-yan-bi-ji-yun-suan-fu-yu-yun-suan-fu/"/>
    <id>https://zhengnianli.github.io/2019/05/07/c-yu-yan-bi-ji-yun-suan-fu-yu-yun-suan-fu/</id>
    <published>2019-05-07T00:22:15.000Z</published>
    <updated>2019-06-17T14:14:46.780Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;1、-运算符&quot;&gt;&lt;a href=&quot;#1、-运算符&quot; class=&quot;headerlink&quot; title=&quot;1、#运算符&quot;&gt;&lt;/a&gt;1、#运算符&lt;/h3&gt;&lt;p&gt;我们平时使用带参宏时，字符串中的宏参数是没有被替换的。例如：&lt;/p&gt;
&lt;div
        
      
    
    </summary>
    
      <category term="C语言笔记" scheme="https://zhengnianli.github.io/categories/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C语言" scheme="https://zhengnianli.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【C语言笔记】带参宏定义（二）</title>
    <link href="https://zhengnianli.github.io/2019/03/26/c-yu-yan-bi-ji-dai-can-hong-ding-yi-er/"/>
    <id>https://zhengnianli.github.io/2019/03/26/c-yu-yan-bi-ji-dai-can-hong-ding-yi-er/</id>
    <published>2019-03-26T00:22:15.000Z</published>
    <updated>2019-06-17T14:16:51.598Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;带参宏在我们的嵌入式编程中使用得非常多，其定义如下：&lt;/p&gt;
&lt;pre class=&quot; language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;define 标识符&lt;span class=&quot;token
        
      
    
    </summary>
    
      <category term="C语言笔记" scheme="https://zhengnianli.github.io/categories/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C语言" scheme="https://zhengnianli.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【C语言笔记】带参宏定义（一）</title>
    <link href="https://zhengnianli.github.io/2019/03/23/c-yu-yan-bi-ji-dai-can-hong-ding-yi-yi/"/>
    <id>https://zhengnianli.github.io/2019/03/23/c-yu-yan-bi-ji-dai-can-hong-ding-yi-yi/</id>
    <published>2019-03-23T00:22:15.000Z</published>
    <updated>2019-06-17T14:23:39.147Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;公司某项目用到&lt;code&gt;DSP+FPGA&lt;/code&gt;架构（当然不是著名的ARM+DSP+FPGA点灯项目,哈哈），我的发展方向为DSP方向。其中DSP与FPGA通过两个带参宏进行数据交互（DSP与FPGA通过一块共享内存来实现数据交互，我这边的DSP只要往共享内存中写入
        
      
    
    </summary>
    
      <category term="C语言笔记" scheme="https://zhengnianli.github.io/categories/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C语言" scheme="https://zhengnianli.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【C语言笔记】指定初始化器</title>
    <link href="https://zhengnianli.github.io/2019/02/16/c-yu-yan-bi-ji-zhi-ding-chu-shi-hua-qi/"/>
    <id>https://zhengnianli.github.io/2019/02/16/c-yu-yan-bi-ji-zhi-ding-chu-shi-hua-qi/</id>
    <published>2019-02-16T00:22:15.000Z</published>
    <updated>2019-06-17T14:35:39.132Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt; &lt;code&gt;C99&lt;/code&gt;增加了一个新特性：&lt;code&gt;指定初始化器(designated initializer)&lt;/code&gt;。利用该特性可以初始化指定的数组元素，也可以初始化指定的结构体变量（往期笔记&lt;a
        
      
    
    </summary>
    
      <category term="C语言笔记" scheme="https://zhengnianli.github.io/categories/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C语言" scheme="https://zhengnianli.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【C语言笔记】操作位的技巧</title>
    <link href="https://zhengnianli.github.io/2019/02/15/c-yu-yan-bi-ji-cao-zuo-wei-de-ji-qiao/"/>
    <id>https://zhengnianli.github.io/2019/02/15/c-yu-yan-bi-ji-cao-zuo-wei-de-ji-qiao/</id>
    <published>2019-02-15T00:22:15.000Z</published>
    <updated>2019-06-17T14:29:29.275Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;操作位有两种方法，一种是&lt;code&gt;位字段&lt;/code&gt;，另一种是使用&lt;code&gt;按位运算符&lt;/code&gt;。位字段的方法可查看往期笔记：&lt;a
        
      
    
    </summary>
    
      <category term="C语言笔记" scheme="https://zhengnianli.github.io/categories/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C语言" scheme="https://zhengnianli.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【C语言笔记】位域</title>
    <link href="https://zhengnianli.github.io/2019/02/14/c-yu-yan-bi-ji-wei-yu/"/>
    <id>https://zhengnianli.github.io/2019/02/14/c-yu-yan-bi-ji-wei-yu/</id>
    <published>2019-02-14T00:22:15.000Z</published>
    <updated>2019-06-17T14:31:30.926Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;位域的概念&quot;&gt;&lt;a href=&quot;#位域的概念&quot; class=&quot;headerlink&quot; title=&quot;位域的概念&quot;&gt;&lt;/a&gt;位域的概念&lt;/h3&gt;&lt;p&gt;有些数据在存储时并不需要占用一个完整的字节，只需要占用一个或几个二进制位即可。例如开关只有通电和断电两种状态，用
        
      
    
    </summary>
    
      <category term="C语言笔记" scheme="https://zhengnianli.github.io/categories/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C语言" scheme="https://zhengnianli.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【C语言笔记】结构体</title>
    <link href="https://zhengnianli.github.io/2019/01/22/c-yu-yan-bi-ji-jie-gou-ti/"/>
    <id>https://zhengnianli.github.io/2019/01/22/c-yu-yan-bi-ji-jie-gou-ti/</id>
    <published>2019-01-22T00:22:15.000Z</published>
    <updated>2019-06-17T15:01:48.618Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;我们都知道C语言中变量的类型决定了变量存储占用的空间。当我们要使用一个变量保存年龄时可以将其声明为&lt;code&gt;int&lt;/code&gt;类型，当我们要使用一个变量保存某一科目的考试成绩时可以将其声明为&lt;code&gt;float&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;那么，当我们要做一个学生信
        
      
    
    </summary>
    
      <category term="C语言笔记" scheme="https://zhengnianli.github.io/categories/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C语言" scheme="https://zhengnianli.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【C语言笔记】枚举</title>
    <link href="https://zhengnianli.github.io/2019/01/15/c-yu-yan-bi-ji-mei-ju/"/>
    <id>https://zhengnianli.github.io/2019/01/15/c-yu-yan-bi-ji-mei-ju/</id>
    <published>2019-01-15T00:22:15.000Z</published>
    <updated>2019-06-17T14:36:21.677Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;首先，提一下宏定义&lt;code&gt;#define&lt;/code&gt;，其一般形式为：&lt;/p&gt;
&lt;pre class=&quot; language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;#&lt;span
        
      
    
    </summary>
    
      <category term="C语言笔记" scheme="https://zhengnianli.github.io/categories/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C语言" scheme="https://zhengnianli.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【C语言笔记】整数溢出问题</title>
    <link href="https://zhengnianli.github.io/2019/01/10/c-yu-yan-bi-ji-zheng-shu-yi-chu-wen-ti/"/>
    <id>https://zhengnianli.github.io/2019/01/10/c-yu-yan-bi-ji-zheng-shu-yi-chu-wen-ti/</id>
    <published>2019-01-10T00:22:15.000Z</published>
    <updated>2019-06-17T14:59:50.641Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;整数溢出是一种未定义的行为，当产生溢出行为时，系统并不会通知用户，所以应当多加小心。如下是整数溢出的一个案例：&lt;/p&gt;
&lt;p&gt;&lt;a
        
      
    
    </summary>
    
      <category term="C语言笔记" scheme="https://zhengnianli.github.io/categories/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C语言" scheme="https://zhengnianli.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【C语言笔记】函数指针作为函数的参数</title>
    <link href="https://zhengnianli.github.io/2019/01/04/c-yu-yan-bi-ji-han-shu-zhi-zhen-zuo-wei-han-shu-de-can-shu/"/>
    <id>https://zhengnianli.github.io/2019/01/04/c-yu-yan-bi-ji-han-shu-zhi-zhen-zuo-wei-han-shu-de-can-shu/</id>
    <published>2019-01-04T00:22:15.000Z</published>
    <updated>2019-06-17T14:57:26.434Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;函数指针有两种常用的用法，一种是作为结构体成员，关于函数指针作为结构体成员的用法可移步至上一篇&lt;a
        
      
    
    </summary>
    
      <category term="C语言笔记" scheme="https://zhengnianli.github.io/categories/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C语言" scheme="https://zhengnianli.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【C语言笔记】函数指针作为结构体成员</title>
    <link href="https://zhengnianli.github.io/2019/01/03/c-yu-yan-bi-ji-han-shu-zhi-zhen-zuo-wei-jie-gou-ti-cheng-yuan/"/>
    <id>https://zhengnianli.github.io/2019/01/03/c-yu-yan-bi-ji-han-shu-zhi-zhen-zuo-wei-jie-gou-ti-cheng-yuan/</id>
    <published>2019-01-03T00:22:15.000Z</published>
    <updated>2019-06-17T14:52:28.523Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;函数指针在C语言中的意义&quot;&gt;&lt;a href=&quot;#函数指针在C语言中的意义&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="C语言笔记" scheme="https://zhengnianli.github.io/categories/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C语言" scheme="https://zhengnianli.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【C语言笔记】windows命令行下编译C程序</title>
    <link href="https://zhengnianli.github.io/2018/12/23/c-yu-yan-bi-ji-windows-ming-ling-xing-xia-bian-yi-c-cheng-xu/"/>
    <id>https://zhengnianli.github.io/2018/12/23/c-yu-yan-bi-ji-windows-ming-ling-xing-xia-bian-yi-c-cheng-xu/</id>
    <published>2018-12-23T00:22:15.000Z</published>
    <updated>2019-06-17T14:49:48.330Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;有关注我的朋友可能会知道我的C开发环境是：&lt;code&gt;Notepad++&lt;/code&gt;与&lt;code&gt;MinGW&lt;/code&gt;相结合，即用&lt;code&gt;Notepad++&lt;/code&gt;写代码，用&lt;code&gt;MinGW&lt;/code&gt;这个工具包中的&lt;code&gt;gcc编译器&lt;/cod
        
      
    
    </summary>
    
      <category term="C语言笔记" scheme="https://zhengnianli.github.io/categories/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C语言" scheme="https://zhengnianli.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【C语言笔记】分享一个C语言测试程序模板</title>
    <link href="https://zhengnianli.github.io/2018/12/14/c-yu-yan-bi-ji-fen-xiang-yi-ge-c-yu-yan-ce-shi-cheng-xu-mo-ban/"/>
    <id>https://zhengnianli.github.io/2018/12/14/c-yu-yan-bi-ji-fen-xiang-yi-ge-c-yu-yan-ce-shi-cheng-xu-mo-ban/</id>
    <published>2018-12-14T00:22:15.000Z</published>
    <updated>2019-06-17T15:03:53.779Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="C语言笔记" scheme="https://zhengnianli.github.io/categories/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C语言" scheme="https://zhengnianli.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【C语言笔记】如何查看数据类型范围？</title>
    <link href="https://zhengnianli.github.io/2018/12/07/c-yu-yan-bi-ji-ru-he-cha-kan-shu-ju-lei-xing-fan-wei/"/>
    <id>https://zhengnianli.github.io/2018/12/07/c-yu-yan-bi-ji-ru-he-cha-kan-shu-ju-lei-xing-fan-wei/</id>
    <published>2018-12-07T05:59:36.000Z</published>
    <updated>2019-06-17T12:57:54.395Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;知识点一：查看整数范围&quot;&gt;&lt;a href=&quot;#知识点一：查看整数范围&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="C语言笔记" scheme="https://zhengnianli.github.io/categories/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C语言" scheme="https://zhengnianli.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【C语言笔记】什么是ANSI C标准？</title>
    <link href="https://zhengnianli.github.io/2018/12/06/c-yu-yan-bi-ji-shi-me-shi-ansi-c-biao-zhun/"/>
    <id>https://zhengnianli.github.io/2018/12/06/c-yu-yan-bi-ji-shi-me-shi-ansi-c-biao-zhun/</id>
    <published>2018-12-06T00:22:15.000Z</published>
    <updated>2019-06-17T14:32:31.311Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;我们在很多地方都有看到过&lt;code&gt;K&amp;amp;R C、ANSI C、ISO C、C89、C99、C11&lt;/code&gt;等标准，具体有什么不同呢？（文末有个很好的实例）&lt;/p&gt;
&lt;h3 id=&quot;什么是K-amp-R-C？&quot;&gt;&lt;a href=&quot;#什么是K-amp-R-C？&quot;
        
      
    
    </summary>
    
      <category term="C语言笔记" scheme="https://zhengnianli.github.io/categories/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C语言" scheme="https://zhengnianli.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【C语言笔记】变参函数</title>
    <link href="https://zhengnianli.github.io/2018/11/22/c-yu-yan-bi-ji-bian-can-han-shu/"/>
    <id>https://zhengnianli.github.io/2018/11/22/c-yu-yan-bi-ji-bian-can-han-shu/</id>
    <published>2018-11-22T00:22:15.000Z</published>
    <updated>2019-06-17T12:52:01.855Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;提到变参函数，我们的感觉是不是既熟悉又陌生？感觉熟悉是因为我们平时都在使用着，如我们常使用的printf()函数与scanf()函数就是典型的变参函数。因为printf()函数是变参函数我们才可以根据我们的需要灵活地输出变量的值。如：&lt;/p&gt;
&lt;pre class=&quot;
        
      
    
    </summary>
    
      <category term="C语言笔记" scheme="https://zhengnianli.github.io/categories/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C语言" scheme="https://zhengnianli.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【C语言笔记】时间日期函数</title>
    <link href="https://zhengnianli.github.io/2018/11/16/c-yu-yan-bi-ji-shi-jian-shi-qi-han-shu/"/>
    <id>https://zhengnianli.github.io/2018/11/16/c-yu-yan-bi-ji-shi-jian-shi-qi-han-shu/</id>
    <published>2018-11-16T00:22:15.000Z</published>
    <updated>2019-06-17T13:06:10.553Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;time.h是C/C++中的日期和时间头文件。用于需要时间方面的函数。下面分享time.h头文件中几个常用函数的用法：&lt;/p&gt;
&lt;p&gt;&lt;a
        
      
    
    </summary>
    
      <category term="C语言笔记" scheme="https://zhengnianli.github.io/categories/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C语言" scheme="https://zhengnianli.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【C语言笔记】两个小知识</title>
    <link href="https://zhengnianli.github.io/2018/11/13/c-yu-yan-bi-ji-liang-ge-xiao-zhi-shi/"/>
    <id>https://zhengnianli.github.io/2018/11/13/c-yu-yan-bi-ji-liang-ge-xiao-zhi-shi/</id>
    <published>2018-11-13T00:22:15.000Z</published>
    <updated>2019-06-17T13:07:08.403Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;一、关于头文件包含问题&lt;/p&gt;
&lt;p&gt;C语言包含头文件时应该使用尖括号还是双引号？使用尖括号&amp;lt;&amp;gt;,编译器会到系统路径下查找头文件；而使用双引号“”，编译器首先在当前路径目录下查找头文件，如果没有找到，再转到系统目录下查找。所以，通常使用尖括号包含标准头文件，使用
        
      
    
    </summary>
    
      <category term="C语言笔记" scheme="https://zhengnianli.github.io/categories/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C语言" scheme="https://zhengnianli.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【C语言笔记】数组a与&amp;a有什么不同？</title>
    <link href="https://zhengnianli.github.io/2018/11/13/c-yu-yan-bi-ji-shu-zu-a-yu-a-you-shi-me-bu-tong/"/>
    <id>https://zhengnianli.github.io/2018/11/13/c-yu-yan-bi-ji-shu-zu-a-yu-a-you-shi-me-bu-tong/</id>
    <published>2018-11-13T00:22:15.000Z</published>
    <updated>2019-06-17T13:16:35.844Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;首先，看一段代码：&lt;/p&gt;
&lt;pre class=&quot; language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;#&lt;span class=&quot;token directive
        
      
    
    </summary>
    
      <category term="C语言笔记" scheme="https://zhengnianli.github.io/categories/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C语言" scheme="https://zhengnianli.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
</feed>
